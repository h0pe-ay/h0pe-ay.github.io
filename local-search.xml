<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深入理解计算机系统学习笔记</title>
    <link href="/2023/06/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/06/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="第7章-链接"><a href="#第7章-链接" class="headerlink" title="第7章 链接"></a>第7章 链接</h1><p>链接是将代码与数据组合为单一文件的过程。在现代系统中，链接由链接器的程序自动执行。</p><p>编译可存在如下周期：</p><ul><li>编译：源代码翻译为机器代码</li><li>加载：程序被加载器加载到内存并执行</li><li>运行：应用程序执行</li></ul><h2 id="7-1-编译器驱动程序"><a href="#7-1-编译器驱动程序" class="headerlink" title="7.1 编译器驱动程序"></a>7.1 编译器驱动程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//main.c</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> val = sum(<span class="hljs-built_in">array</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//数组元素求和</span><br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><br><span class="hljs-comment">//sum.c</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        s += a[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译驱动程序包括</p><ul><li>语言处理器</li><li>编译器</li><li>汇编器</li><li>链接器</li></ul><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220421000959782.png" alt="image-20220421000959782"></p><p><code>Linux</code>下驱动程序的调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -Og -o prog main.c sum.c<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-O选项对程序进行优化编译、连接。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-g选项产生符号调试工具</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-v选项可以查看编译具体的步骤</span><br></code></pre></td></tr></table></figure><p><code>C</code>预处理器(<code>cpp</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将main.c翻译成ASCII码的中间文件main.i</span><br>cpp [other arguments] man.c ./main.i<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">main.i</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;main.c&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">31 <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;/usr/include/stdc-predef.h&quot;</span> 1 3 4</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">32 <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span> 2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 <span class="hljs-string">&quot;main.c&quot;</span></span><br>int sum(int *a,int n);<br>int array[2] = &#123;1,2&#125;;<br><br>int main()<br>&#123;<br> int val = sum(array,2);<br> return val;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>C</code>编译器(<code>cc1</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将main.i文件翻译成一个ASCII汇编语言文件main.s</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">cc1的路径 /usr/lib/gcc/x86_64-linux-gnu/9/cc1</span><br>cc1 ./main.i -Og [other arguments] -o ./main.s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">汇编代码</span><br>.file&quot;main.i&quot;<br>.text<br>.globlmain<br>.typemain, @function<br>main:<br>.LFB0:<br>.cfi_startproc<br>subq$8, %rsp<br>.cfi_def_cfa_offset 16<br>movl$2, %esi<br>leaqarray(%rip), %rdi<br>callsum@PLT<br>addq$8, %rsp<br>.cfi_def_cfa_offset 8<br>ret<br>.cfi_endproc<br>.LFE0:<br>.sizemain, .-main<br>.globlarray<br>.data<br>.align 8<br>.typearray, @object<br>.sizearray, 8<br>array:<br>.long1<br>.long2<br>.ident&quot;GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0&quot;<br>.section.note.GNU-stack,&quot;&quot;,@progbits<br></code></pre></td></tr></table></figure><p><code>C</code>汇编器(<code>as</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">汇编器将汇编代码文件翻译成可重定位目标文件</span><br>as [other arguments] -o ./main.o ./main.s<br></code></pre></td></tr></table></figure><p>链接器程序(<code>ld</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">链接器将可重定位的目标文件及系统目标文件组合起来，输出一个可执行目标文件</span><br>ld -o prog [system object files and args] ./main.o ./sum.o<br></code></pre></td></tr></table></figure><p>加载器[<code>loader</code>]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">shell调用操作系统中加载器的函数，将可执行文件prog中的代码和数据复制到内存，然后将控制转移到这个程序的起始位置</span><br>./prog<br></code></pre></td></tr></table></figure><h2 id="7-2-静态链接"><a href="#7-2-静态链接" class="headerlink" title="7.2 静态链接"></a>7.2 静态链接</h2><p>静态链接器（<code>Linix LD</code>）</p><ul><li>输入：可重定位目标文件与命令行参数</li><li>输出：完全链接、可以加载和运行的可执行目标文件</li></ul><p>链接器的两个主要任务</p><ul><li>符号解析：目标文件定义和引用符号，每个符号对应一个函数、一个全局变量或一个静态变量。符号解析的目的是将符号引用与符号定义关联起来。</li><li>重定位：编译器和汇编器生成从地址为0开始的代码和数据节。链接器通过把每个符号定义与一个内存位置关联起来，重定位这些节，然后修改对符号的引用，使得它们指向相应的内存位置。</li></ul><h2 id="7-3-目标文件"><a href="#7-3-目标文件" class="headerlink" title="7.3 目标文件"></a>7.3 目标文件</h2><p>目标文件的三种形式</p><ul><li>可重定位目标文件：包含二进制代码和数据，其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。</li><li>可执行目标文件：包含二进制代码和数据，其形式可以被直接复制到内存并指向。</li><li>共享目标文件：特殊的可重定位目标文件，可以在加载或者运行时被动态地加载进内存并链接</li></ul><p>目标模块是一个字节序列，目标文件则是存储在磁盘上地目标模块。目标文件在不同地操作系统上的文件格式各不相同</p><ul><li><code>Unix</code>系统：<code>a.out</code></li><li><code>Windows</code>系统：<code>PE</code></li><li><code>MacOS-X</code>系统：<code>Mach-O</code></li><li><code>Linux</code>系统：<code>ELF</code></li></ul><h2 id="7-4-可重定位目标文件"><a href="#7-4-可重定位目标文件" class="headerlink" title="7.4 可重定位目标文件"></a>7.4 可重定位目标文件</h2><p><code>ELF HEADER</code></p><ol><li>以16字节序列开始，记载生成该文件的系统的字的大小和字节顺序。</li><li><code>ELF</code>头的大小</li><li>目标文件的类型</li><li>机器类型</li><li>节部表的文件偏移</li><li>节头部表中条目的大小和数量</li></ol><p>在<code>ELF</code>文件与节头部表之间的都是节</p><ul><li><code>.text</code>：已编译程序的机器代码</li><li><code>.rodata</code>：只读数据</li><li><code>.data</code>：已初始化的全局和静态<code>C</code>变量</li><li><code>.bss</code>：未初始化的全局和静态<code>C</code>变量，以及所有初始化为0的全局或静态变量</li><li><code>.symtab</code>：符号表，存放在程序中定义和引用的函数和全局变量的信息</li><li><code>.rel.text</code>：<code>.text</code>节中位置的列表，当链接器把该目标文件和其他文件组合时需要修改的位置。</li><li><code>.rel.data</code>：被模块引用或定义的所有全局变量的重定位信息。</li><li><code>.debug</code>：调试符号表，其条目是程序中定义的局部变量和类型定义，程序中定义和引用的全局变量，以及原始的<code>C</code>源文件。</li><li><code>.line</code>：原始<code>C</code>源程序中的行号和<code>.text</code>节中机器指令之间的映射。</li><li><code>.strtab</code>：字符串表，内容包括<code>.symtab</code>和<code>.debug</code>节中的符号表，以及节头部中的节名字。</li></ul><h2 id="7-5-符号和符号表"><a href="#7-5-符号和符号表" class="headerlink" title="7.5 符号和符号表"></a>7.5 符号和符号表</h2><p>可重定位目标模块<code>m</code>都有一个符号表，包含<code>m</code>定义和引用的符号的信息。在链接器的上下文中，有三种不同的符号：</p><ul><li>由<strong>模块<code>m</code>定义</strong>并能被其他模块引用的<strong>全局符号</strong>。全局链接器符号对应于<strong>非静态的<code>C</code>函数</strong>和<strong>全局变量</strong>。（函数与全局变量）</li><li>由<strong>其他模块定义</strong>并被模块<code>m</code>引用的全局符号。这些符号称为<strong>外部符号</strong>，对应于在<strong>其他模块</strong>中定义的<strong>非静态<code>C</code>函数</strong>和<strong>全局变量</strong>。（其他文件定义的函数和全局变量）</li><li>只被模块<code>m</code>定义和引用的<strong>局部符号</strong>。它们对应于带<strong>static</strong>属性的<strong>C函数</strong>和<strong>全局变量</strong>。这些符号只有在<strong>模块m中可见</strong>，其他模块不可引用。</li></ul><p><strong>本地程序变量</strong>指的是局部变量，存储在堆栈中而不是段中。程序只有应用时才会分配地址空间。</p><p><strong>本地链接器符号</strong>指的是存储在段地址上的变量。程序编译链接时以及分配好地址空间。</p><p><code>C</code>语言中用<code>static</code>修饰的变量类似<code>C++</code>与<code>Java</code>中使用<code>private</code>修饰变量，是当前模块私有的。</p><p>符号表数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> sturct&#123;<br><span class="hljs-type">int</span> name; <span class="hljs-comment">//字符串表中的字节偏移</span><br>    <span class="hljs-type">char</span> type:<span class="hljs-number">4</span><span class="hljs-comment">/*类型为数据或者是函数*/</span><br>         binding:<span class="hljs-number">4</span>;<span class="hljs-comment">/*代表符号是本地的还是全局的*/</span><br>    <span class="hljs-type">char</span> reserved;<span class="hljs-comment">/*未使用*/</span><br>    <span class="hljs-type">short</span> section;<br>    <span class="hljs-type">long</span> value; <span class="hljs-comment">//符号的地址</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    对于重定位文件来说value是距定义目标的节的起始位置的偏移。</span><br><span class="hljs-comment">    对于可执行目标文件来说，该值是一个绝对运行时的地址。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">long</span> size; <span class="hljs-comment">//目标的大小</span><br>&#125;Elf64_Symbol;<br></code></pre></td></tr></table></figure><p>符号表需要结合字符串表寻找符号信息。</p><p>三个特殊的伪节，它们在节头部表中是没有条目的</p><ul><li><code>ABS</code>符号代表不该被重定位的符号</li><li><code>UNDEF</code>符号代表未定义的符号，本目标模块引用了，但是符号是在其他模块定义的符号</li><li><code>COMMON</code>符号表示还未被分配位置的未初始化的数据。<ul><li><code>value</code>字段给出对齐要求</li><li><code>size</code>给出最小的大小</li></ul></li><li>只有可重定位目标文件中才有这些伪节</li></ul><p><code>COMMON</code>和<code>.bss</code>的区别：<code>COMMON</code>存储未初始化的<strong>全局变量</strong>，<code>.bss</code>存储<strong>未初始化的静态变量</strong>，以及<strong>初始化为0的全局</strong>或<strong>静态变量</strong></p><p><img src="https://s2.loli.net/2022/05/08/FQpjJStIuHOxZi5.png" alt="image-20220508172957864"></p><ul><li><code>Name</code>：指的是符号的字符串</li><li><code>Value</code>：指的是符号距离节头的偏移</li><li><code>Size</code>：所占内存大小</li><li><code>Type</code>：类型，指的是函数，变量还是文件等</li><li><code>Bind</code>：指的是全局变量还是局部变量</li><li><code>Ndx</code>：指的所在节区</li></ul><p><strong>练习题7.1</strong></p><table><thead><tr><th>符号</th><th>.symtab条目?</th><th>符号类型</th><th>在哪个模块中定义</th><th>节</th></tr></thead><tbody><tr><td>buf</td><td>是</td><td>外部</td><td>m.o</td><td>.data</td></tr><tr><td>bufp</td><td>是</td><td>全局</td><td>swap.o</td><td>.data</td></tr><tr><td>bufp1</td><td>是</td><td>全局</td><td>swap.o</td><td>COMMON</td></tr><tr><td>swap</td><td>是</td><td>全局</td><td>swap.o</td><td>.text</td></tr><tr><td>temp</td><td>否</td><td></td><td></td><td></td></tr></tbody></table><h2 id="7-6-符号解析"><a href="#7-6-符号解析" class="headerlink" title="7.6 符号解析"></a>7.6 符号解析</h2><p><strong>链接器如何解析多重定义的全局符号</strong></p><p><strong>函数</strong>与<strong>已初始化的全局变量</strong>是强符号</p><p><strong>未初始化的全局变量</strong>是弱符号</p><ul><li>规则1：不允许多个同名的强符号</li><li>规则2：如果有一个强符号和多个弱符号同名，那么选择强符号（有强选强）</li><li>规则3：如果有多个弱符号同名，那么则随机从弱符号中选择一个（多弱随机）</li></ul><p><strong>练习题7.2</strong></p><p>A</p><p>(a)REF(main.1) -&gt; DEF(main.1)</p><p>(b)REF(main.2)-&gt;DEF(main.1)</p><p>B</p><p>(a)两个强符号，错误</p><p>(b)两个强符号，错误</p><p>C</p><p>(a)REF(x.1)-&gt;DEF(x.2)</p><p>(b)REF(x.2)-&gt;DEF(x.2)</p><p>  <strong>与静态库链接</strong></p><p>当链接器接收的是一组可重定位目标文件</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220508232741644.png" alt="image-20220508232741644"></p><p>将相关的目标模块打包成为一个单独的文件，称之为静态库作为链接器的输入。</p><p><img src="https://s2.loli.net/2022/05/08/ZpA6qQOlx3NR4dJ.png" alt="image-20220508233013659"></p><p>当链接器输出可执行文件时，它仅仅复制静态库里被应用程序引用的目标模块。</p><p>当不适用静态库时，编译器开发者向用户提供库函数的几种做法：</p><ul><li><p>方法一：使用编译器识别库函数，生成指定库函数代码。</p><ul><li>缺点：C标准定义了大量的标准函数，给编译器增加了复杂性，并且库函数每次更新都需要更新一次编译器。</li></ul></li><li><p>方法二：将所有标准C函数都放在单独的可重定位目标模块中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc main.c /usr/lib/libc.o<br></code></pre></td></tr></table></figure><ul><li>优点：将编译器与库函数的实现分离开</li><li>缺点：每个可执行文件都需要包含一份标准函数副本，以及每个运行的程序都需要将这些函数副本放置在内存中。每次库函数更新都需要重新编译重定位模块</li></ul></li><li><p>方法三：可以将每个库函数单独编译成独立的重定位模块，但是每次连接时需要将多个重定位模块进行链接，容易出错且耗时</p></li></ul><p>静态库结合了方法二与方法三，将方法相近的模块编译为独立的目标模块，然后封装为一个单独的静态库文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc main.c /usr/lib/libm,a /usr/lib/libc.a<br></code></pre></td></tr></table></figure><p>在链接时，链接器只复制被程序引用的目标模块。</p><p>在<code>Linux</code>系统中，静态库以一种成为存档的特殊文件格式存放在磁盘中。存档文件命后缀<code>.a</code></p><p><strong>addvec.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> addcnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">addvec</span><span class="hljs-params">(<span class="hljs-type">int</span> *x,<span class="hljs-type">int</span> *y,<span class="hljs-type">int</span> *z,<span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><br>addcnt++;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>z[i] = x[i] + y[i];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>multvec.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> multcnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">multvec</span><span class="hljs-params">(<span class="hljs-type">int</span> *x,<span class="hljs-type">int</span> *y, <span class="hljs-type">int</span> *z,<span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><br>multcnt++;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>z[i] = x[i] * y[i];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -c addvec.c multvec.c<br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成静态库</span><br>ar rcs libvector.a addvec.o multvec.o<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">与静态库链接</span><br>gcc -static -o prog2c main2.o ./libvector.a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">等价于</span><br>gcc -static -o prog2c main2.o -L . -lvector<br></code></pre></td></tr></table></figure><p><strong>链接器解析静态库引用</strong></p><p>链接器<strong>从左到右</strong>按照编译器驱动程序命令扫描<strong>可重定位目标文件</strong>和<strong>存档文件</strong></p><p>链接器维护三个集合，初始时，三个集合都为空</p><ul><li><strong>可重定位目标文件</strong>的集合E</li><li>一个<strong>未解析</strong>的符号集合U</li><li>在前面输入文件中<strong>已定义</strong>的符号集合D</li></ul><p><strong>链接器解析引用</strong></p><ul><li>对每个输入文件<code>f</code>，链接器会判断<code>f</code>是目标文件还是存档文件。如果<code>f</code>是目标文件，那么链接器将<code>f</code>添加到<code>E</code>，<code>U</code>是用来放置引用了但是没有找到定义的符号，<code>D</code>则是已经在模块中定义的符号，因此若输入文件中存在集合<code>U</code>中定义的符号，则将集合<code>U</code>中的符号放置在集合<code>D</code>中</li><li>如果<code>f</code>是存档文件，链接器就会将集合<code>U</code>中的符号与存档文件定义的符号进行比较。若存档文件中的成员<code>m</code>定义了集合<code>U</code>中的符号，则将成员<code>m</code>放置到集合<code>E</code>中，将集合<code>U</code>中的符号移动到集合<code>D</code>中，对存档文件的每个成员都依次进行该过程，直到<code>U</code>和<code>D</code>都不发生变化。那么不包含在集合<code>E</code>中的成员目标文件都会被抛弃，链接器则继续输入下一个文件。</li><li>若链接器完成了所有输入文件的解析，但是发现集合<code>U</code>非空，那么就会发出异常并终止。否则就合并和重定位<code>E</code>中的目标文件，构建输出的可执行文件。</li></ul><p><strong>练习题7.3</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">A.p.o -&gt; libx.a</span><br>gcc p.o libx.a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">B.p.o -&gt; libx.a -&gt; liby.a</span><br>gcc p.o libx.a liby.a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">C.p.o -&gt; libx.a -&gt; liby.a且liby.a-&gt;libx.a-&gt;p.o</span><br>gcc p.o libx.a liby.a libx.a <br></code></pre></td></tr></table></figure><h2 id="7-7-重定位"><a href="#7-7-重定位" class="headerlink" title="7.7 重定位"></a>7.7 重定位</h2><p>重定位由两个步骤组成</p><ul><li>重定位节和符号定义：链接器将所有相同类型的节合并为同一类型的新的聚合节。接着链接器将运行时内存地址赋给新的聚合节，赋给输入模块定义的每个节以及赋给输入模块定义的每个符号。此时，程序中的每条指令和全局变量都有唯一的运行时内存地址。（往符号写入地址）</li><li>重定位节中的符号引用：链接器修改代码节和数据节中对符号的引用，使得它们指向正确的运行时地址。（将符号的地址重定位），重定位依赖于可重定位目标模块中称为<strong>重定位条目的数据结构</strong></li></ul><p><strong>重定位条目</strong></p><p>当编译器遇到最终未知的目标引用时，它会生成一个重定位条目，用于告知链接器在目标文件合并为可执行文件时如何修改这个引用。</p><p>代码的重定位条目放在<code>.rel.text</code>中</p><p>初始化数据的重定位条目放在<code>.rel.data</code>中</p><p><code>ELF</code>重定位条目的数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">long</span> offset; <span class="hljs-comment">//标识需要被修改的引用的节偏移</span><br>    <span class="hljs-type">long</span> type:<span class="hljs-number">32</span>, <span class="hljs-comment">//用于告知链接器如何修改新的引用</span><br>    symbol:<span class="hljs-number">32</span>; <span class="hljs-comment">//标识被修改引用应该指向的符号</span><br>    <span class="hljs-type">long</span> addend; <span class="hljs-comment">//有些重定位类型需要它作为偏移调整</span><br>&#125;Elf64_Rela;<br></code></pre></td></tr></table></figure><p>两种最基本的重定位类型</p><ul><li><code>R_X86_64_PC32</code>：重定位一个使用32位<code>PC</code>相对地址的引用</li><li><code>R_X86_64_32</code>：重定位一个使用32位绝对地址的引用</li></ul><p><strong>重定位符号引用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">foreach section s&#123; <span class="hljs-comment">//遍历每个节</span><br>    foreach relocation entry r&#123; <span class="hljs-comment">//遍历每个重定位结构条目</span><br>        refptr = s + r.offset; <span class="hljs-comment">//节地址+节偏移地址 = 重定位条目的地址</span><br>        <span class="hljs-keyword">if</span>(r.type == R_X86_64_PC32)&#123; <span class="hljs-comment">//使用PC相对地址引用</span><br>            refaddr = ADDR(s) + r.offset;<br>            *refptr = (<span class="hljs-type">unsigned</span>)(ADDR(r.symbol) + r.addend - refaddr);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r.type == R_X86_64_32) <span class="hljs-comment">//使用绝对地址</span><br>            *refptr = (<span class="hljs-type">unsigned</span>)(ADDR(r.symbol) + r.addend);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main.o</code>反汇编代码</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220510162009652.png" alt="image-20220510162009652"></p><p><code>main</code>函数中有两个重定位引用，并且汇编器为每个引用产生一个重定位条目，显示在该引用的后面。<code>array</code>使用<code>PC</code>相对地址进行重定位，而<code>sum</code>使用绝对地址引用</p><p><strong>重定位PC相对引用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">e: e8 00 00 00 00 callq 13 &lt;main+0x13&gt;<br></code></pre></td></tr></table></figure><ul><li><code>e8</code>：是<code>call</code>指令的操作码</li></ul><p>相应的重定位条目<code>r</code>由4个字段组成</p><ul><li><code>r.offset</code> &#x3D; <code>0xf</code> <ul><li><code>call</code>指令偏移<code>0xe</code>，但是<code>e8</code>后一个字节码偏移为<code>0xf</code></li></ul></li><li><code>r.symbol</code> &#x3D; <code>sum</code><ul><li>该重定位项为<code>sum</code></li></ul></li><li><code>r.type</code> &#x3D; <code>R_X86_64_PC32</code><ul><li>采用PC相对引用</li></ul></li><li><code>r.addend</code> &#x3D; <code>-4</code><ul><li>当前需要填充字节码的地址与下一条指令的距离</li></ul></li></ul><p>重定位的流程</p><ul><li><p>首先链接器确定了 节地址<code>ADDR(s)</code> &#x3D; <code>ADDR(.text)</code> &#x3D; <code>0x4004d0</code>与确定了符号地址<code>ADDR(r.symbol)</code> &#x3D; <code>ADDR(sum)</code> &#x3D; <code>0x4004e8</code></p></li><li><p>接着计算引用的运行地址$refaddr &#x3D; ADDR(s) + r.offset\&#x3D;0x4004d0+0xf\0x4004df$</p></li><li><p>然后修改该引用，使其指向函数实际运行地址$*refptr &#x3D; (unsigned)(ADDR(r.symbol)+r.addend - refaddr)\&#x3D;(unsigned)(0x4004e8 + (-4) - 0x4004df)\&#x3D;(unsigned)(0x5)$</p></li><li><p>最后，指令被修改为</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">4004e8:e8 05 00 00 00 callq 4004e8&lt;sum&gt;<br></code></pre></td></tr></table></figure><ul><li>在指令执行时，CPU执行的步骤为<ul><li>将<code>PC</code>(下一条指令)压入栈中</li><li>计算地址$PC &lt;-  PC + 0x5 &#x3D; 0x4004e3(下一条指令的地址) + 0x5 &#x3D; 0x4004e8$</li></ul></li></ul><p><strong>重定位绝对引用</strong></p><p><code>array</code>的重定位条目为</p><ul><li><code>r.offset</code> &#x3D; <code>0xa</code></li><li><code>r.symbol</code> &#x3D; <code>array</code></li><li><code>r.type</code> &#x3D; <code>R_X86_64_32</code></li><li><code>r.addend</code> &#x3D; <code>0</code></li></ul><p>重定位流程</p><ul><li>首先确定符号运行地址：<code>ADDR(r.symbol) = ARRD(array) = 0x601018</code></li><li>接着链接器修改引用$*refptr &#x3D; (unsigned)(ADDR(r.symbol) + r.addend)\&#x3D; (unsigend)(0x601018+0)\(unsigned)(0x601018)$</li><li>最后可执行目标文件下的指令为</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">4004d9: bf 18 10 60 00 mob $0x601018,%edi<br></code></pre></td></tr></table></figure><h2 id="7-8-可执行目标文件"><a href="#7-8-可执行目标文件" class="headerlink" title="7.8 可执行目标文件"></a>7.8 可执行目标文件</h2><p>二进制文件包含加载程序到内存并运行它所需的所有信息</p><p><img src="https://s2.loli.net/2022/05/10/L6zNOjwHhcDT1Mf.png" alt="image-20220510175440833"></p><p><strong>ELF文件格式</strong></p><ul><li><code>ELF</code>头描述文件的总体格式，包含程序的入口点</li><li><code>.init</code>节定义了个函数，叫做<code>_init</code>，程序的初始化代码会调用它。由于可执行文件是完全链接的（已被重定位），所以它不再需要<code>.rel</code>节</li></ul><p>程序头部表描述了可执行文件到连续的内存段的映射</p><p><img src="https://s2.loli.net/2022/05/10/5N1RPTUScnwVQKH.png" alt="image-20220510180231214"></p><ul><li><code>off</code>：目标文件中的偏移</li><li><code>vaddr/paddr</code>：内存地址</li><li><code>align</code>：对齐要求</li><li><code>filesz</code>：目标文件中的段大小</li><li><code>memsz</code>：内存中的段大小</li><li><code>flags</code>：运行时访问权限</li></ul><h2 id="7-9-加载可执行目标文件"><a href="#7-9-加载可执行目标文件" class="headerlink" title="7.9 加载可执行目标文件"></a>7.9 加载可执行目标文件</h2><p>执行目标文件所执行的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./prog<br></code></pre></td></tr></table></figure><p>可执行文件是通过加载器运行。<code>execve</code>函数可以用来调用加载器，加载器将可执行目标文件中的代码和数据从磁盘复制到内存中，然后通过跳转到程序的第一条指令或入口点来运行该程序。将程序复制到内存并运行的过程叫做加载。</p><p><img src="https://s2.loli.net/2022/05/10/NjDWEBIcFldSsi3.png" alt="image-20220510181119921"></p><p>在<code>Linux x86-64</code>系统中</p><ul><li>代码段总是从地址<code>0x400000</code>处开始，后面紧接着是数据段</li><li>堆空间在数据段之后，通过<code>malloc</code>库向上增长，堆后面的区域是为共享模块保留的</li><li>用户栈总是从最大的合法用于地址（$2^{48}-1$）开始，向较小的内存地址增长</li><li>从地址（$2^{48}$）开始，为内核中的代码和数据保留的，内核是操作系统驻留在内存的部分</li></ul><p>加载器加载可执行文件的流程</p><ul><li>当加载器运行时，创建上图所示的内存映像</li><li>在程序头部表的引导下加载器将可执行文件的片复制到代码段和数据段</li><li>加载器跳转到程序的入口点，也就是<code>_start</code>函数的地址</li><li><code>_start</code>函数启动<code>__libc_start_main</code>函数，该函数初始化执行环境，接着调用用户层的<code>main</code>函数，处理<code>main</code>函数的返回值，并且在需要的时候把控制返回给内核</li></ul><p><strong>加载器的实际工作流程</strong></p><p><code>Linux</code>系统中的每个程序运行在一个进程上下文（抽象认为进程自己的数据记录），并且每个进程拥有自己的虚拟空间。</p><ul><li>当<code>shell</code>运行一个可执行文件时，父<code>shell</code>进程会生成一个子进程，它是父进程的一个复制。子进程通过<code>execve</code>系统调用启动加载器。</li><li>加载器删除现有的虚拟内存段，并创建一组新的代码、数据、堆和栈段。新的堆栈空间会被初始化为零。</li><li>通过将虚拟内存地址空间中的页映射到可执行文件的页大小的片，新的代码和数据会被初始化为可执行文件的内容。</li><li>加载器跳转到<code>_start</code>函数地址，最终调用用户<code>main</code>函数。</li></ul><h2 id="7-10-动态链接共享库"><a href="#7-10-动态链接共享库" class="headerlink" title="7.10 动态链接共享库"></a>7.10 动态链接共享库</h2><p>静态库的缺陷</p><ul><li>需要定期维护和更新，若需要用到最新版本的库，需要显示的将程序与库重新链接</li><li>几乎所有的C程序都需要使用标准<code>I/O</code>函数，因此使用静态库的时候，程序运行时，就需要将库函数的副本拷贝到内存中，因此在系统上存在着成千上万的<code>I/O</code>库函数的副本，浪费内存空间</li></ul><p>共享库是一个目标模块，在可执行文件运行或加载时，可以加载到任意的内存空间，并且和内存中的程序链接起来，该过程称之为动态链接，是由一个动态链接器的程序执行的。</p><p>共享库以两种方式被可执行文件所共享</p><ul><li>所有可执行的目标文件共享<code>.so</code>文件中的代码与数据</li><li>在内存中，一个共享库的<code>.text</code>节的一个副本可以被不同的正在运行的进程共享。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">编译共享库</span><br>gcc -shared -fpic -o libvector.so addvec.c multvec.c<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-fpic选项指示编译器生成与位置无关的代码</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-shared选项指示链接器创建一个共享的目标文件</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220511181450651.png" alt="image-20220511181450651"></p><p>动态链接创建可执行文件步骤</p><ul><li>首先静态执行一些链接</li><li>然后再程序加载时，动态完成链接</li></ul><p>没有代码和数据复制到<strong>可执行文件</strong>中，<strong>链接器</strong>复制了重定位和符号表信息（与静态链接不同点，静态链接复制了代码和数据）</p><p>加载器加载和运行可执行文件（部分链接）</p><ul><li>部分链接的可执行文件包含<code>.interp</code>节（包含动态链接的路径），加载器加载和运行动态链接器，动态链接器完成任务如下<ul><li>重定位<code>libc.so</code>的文本和数据</li><li>重定位<code>libvector.so</code>的文件和输</li><li>重定位可执行文件对由<code>libc.so</code>和<code>libvector.so</code>定义的符号的引用</li><li>最后，动态链接器将控制传递给应用程序，此时共享库的位置就固定，在程序执行时都不会改变了</li></ul></li></ul><h2 id="7-11-从应用程序中加载和链接共享库"><a href="#7-11-从应用程序中加载和链接共享库" class="headerlink" title="7.11 从应用程序中加载和链接共享库"></a>7.11 从应用程序中加载和链接共享库</h2><p><code>Linux</code>系统为动态链接器提供了一个简单的接口，允许引用程序在运行时加载和链接共享库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag)</span>; <span class="hljs-comment">//打开与加载共享库</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlsym</span><span class="hljs-params">(<span class="hljs-type">void</span> *handle,<span class="hljs-type">char</span> *symbol)</span>; <span class="hljs-comment">//获取函数地址</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dlclose</span><span class="hljs-params">(<span class="hljs-type">void</span> *handle)</span>; <span class="hljs-comment">//卸载共享库</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">dlerror</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//描述调用dlopen、dlsym或者dlclose函数发送的最近的错误</span><br></code></pre></td></tr></table></figure><p><strong>dll.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc -rdynamic -o prog2r dll.c -ldl</span><br><span class="hljs-comment">//-ldl参数为显示加载共享库</span><br><span class="hljs-comment">//-rdynamic参数为通知链接器将所有符号添加到动态符号表</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><br><span class="hljs-type">int</span> x[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> y[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> z[<span class="hljs-number">2</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">void</span> *handle;<br><span class="hljs-type">void</span> (*addvec)(<span class="hljs-type">int</span> *,<span class="hljs-type">int</span> *, <span class="hljs-type">int</span> *,<span class="hljs-type">int</span>);<br><span class="hljs-type">char</span> *error;<br><br>handle = dlopen(<span class="hljs-string">&quot;./libvector.so&quot;</span>,RTLD_LAZY); <span class="hljs-comment">//打开共享库，延迟绑定的方式</span><br><span class="hljs-keyword">if</span>(!handle)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s\n&quot;</span>,dlerror());<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br>addvec = dlsym(handle,<span class="hljs-string">&quot;addvec&quot;</span>);<span class="hljs-comment">//获取addvec函数的地址</span><br><span class="hljs-keyword">if</span>((error = dlerror())!=<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s\n&quot;</span>,error);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br>addvec(x,y,z,<span class="hljs-number">2</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;z = [%d %d]\n&quot;</span>,z[<span class="hljs-number">0</span>],z[<span class="hljs-number">1</span>]);<br><br><span class="hljs-keyword">if</span>(dlclose(handle)&lt;<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//关闭共享库</span><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s\n&quot;</span>,dlerror());<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-12-位置无关代码"><a href="#7-12-位置无关代码" class="headerlink" title="7.12 位置无关代码"></a>7.12 位置无关代码</h2><p>多个进程是如何共享程序中的一个副本</p><ul><li>方案一：为每个共享库分配一个事先预备的专用的地址空间片<ul><li>问题一：空间利用率不高<ul><li>即使程序不适用该库也需要预留空间</li><li>当共享库修改时需要判断预留空间是否足够，不足够需要找新的空间</li><li>当创建新的共享库，需要再次找新的内存空间</li><li>共享库数量多，会将内存空间分割为大小不均匀的片段</li><li>对于不同的操作系统，给库分配的空间大小不一</li></ul></li></ul></li><li>方案二：提供一种编译方式，使得共享库可以加载到内存的任何位置，并且无需链接器修改，这种编译方式被称之为位置无关代码(Position-Independent Code,PIC)，使用<code>-fpic</code>参数指示编译系统生成<code>PIC</code>代码</li></ul><p><strong>PIC数据引用</strong></p><ul><li>数据段与代码段中数据与指令的偏移是常量</li><li>在数据段开始的地方创建了全局偏移量表(Global Offset Table,GOT)，GOT表中每个被引用的全局变量都会有一个8字节条目（GOT项地址），并且编译器为每个条目生成一个重定位记录，加载时，动态链接器会重定位GOT中的每个条目，使该条目包含正确的变量地址。每个目标模块都有属于自己的GOT</li></ul><p><img src="https://s2.loli.net/2022/05/11/a3hsfVIupGr9BKZ.png" alt="image-20220511232959402"></p><p><strong>PIC函数调用</strong></p><p>延迟绑定：将过程地址的绑定延迟到第一次调用该过程时，延迟绑定采用两个数据结构进行交互实现，GOT和过程链接表(Procedure Linkage Table, PLT)</p><ul><li>过程链接表(PLT)。PLT是一个数组，每个条目为16字节代码。<ul><li>PLT[0]用于跳转到动态链接器中。</li><li>PLT[1]调用系统启动函数(__libc_start_main)，用于初始化执行环境，调用<code>main</code>函数并处理其中返回值。</li><li>PLT[2]开始的条目调用用户代码调用的函数</li></ul></li><li>全局偏移表(GOT)。GOT是一个数组，每个条目是8字节地址。<ul><li>GOT[0]与GOT[1]是动态链接器解析函数地址时使用的参数信息</li><li>GOT[2]时动态链接器在<code>ld-linux.so</code>模块中的入口点。其余的每个条目对应一个被调用的函数，其地址需要在运行时被解析。</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/11/Z4d9zcTDtWMsYVJ.png" alt="image-20220511235250490"></p><p>延迟解析地址步骤</p><ul><li>首先跳转到<code>addvec</code>的<code>plt</code>地址，即程序调用进入<code>PLT[2]</code>，这是<code>addvec</code>的<code>PLT</code>条目</li><li>第一条<code>PLT</code>指令通过<code>GOT[4]</code>进行间接跳转，在延迟绑定完成之前，都是跳转到<code>PLT</code>条目的下调指令</li><li>把<code>addvec</code>的<code>ID</code>压入栈中，<code>PLT[2]</code>跳转到<code>PLT[0]</code>，即动态链接器的函数地址</li><li><code>PLT[0]</code>将<code>GOT[1]</code>项内容压入栈中，通过<code>GOT[2]</code>跳转到动态链接器中。动态链接器通过压入的两个参数确定<code>addvec</code>函数的实际地址，最后将实际地址重写<code>GOT</code>项内容，再把控制传递给<code>addvec</code>函数</li></ul><h2 id="7-13-库打桩机制"><a href="#7-13-库打桩机制" class="headerlink" title="7.13 库打桩机制"></a>7.13 库打桩机制</h2><p><code>Linux</code>链接器使用库打桩技术，允许截获对共享库函数的调用，取而代之执行自己的代码（类似<code>Windows</code>的<code>Hook</code>技术）。</p><p>库打桩的基本思想：创建一个包装函数，它的原型与目标函数一致，使用打桩技术，使得系统调用包装函数而不是原函数，包装函数内会先执行自己的逻辑后再调用原函数并把返回值返回给调用者</p><p>打桩可以发生在编译、链接或程序加载和执行时</p><h3 id="编译时打桩"><a href="#编译时打桩" class="headerlink" title="编译时打桩"></a>编译时打桩</h3><p>本地定义一个<code>malloc.h</code>头文件，将<code>malloc</code>函数定义为自定义的<code>mymalloc</code>函数，编译时使用<code>-I</code>参数强制载入本地库文件，完成编译时库打桩技术</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*编译*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">gcc -DCOMPILETIME -c mymalloc.c</span><br><span class="hljs-comment">gcc -I . -o intc int.c mymalloc.o</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">编译参数解析：</span><br><span class="hljs-comment">1.-D为定义宏</span><br><span class="hljs-comment">2.-I表示搜素库的目录</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">//int.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>);<br><span class="hljs-built_in">free</span>(p);<br><span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//malloc.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> malloc(size) mymalloc(size)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> free(ptr) myfree(ptr)</span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mymalloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">myfree</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span>;<br><br><span class="hljs-comment">//mymalloc.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> COMPILETIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mymalloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br><span class="hljs-type">void</span> *ptr = <span class="hljs-built_in">malloc</span>(size);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(%d) = %p\n&quot;</span>,(<span class="hljs-type">int</span>)size,ptr);<br><span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">myfree</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span><br>&#123;<br><span class="hljs-built_in">free</span>(ptr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free(%p)\n&quot;</span>,ptr);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">out:</span><br><span class="hljs-comment">malloc(32) = 0x558f09de52a0</span><br><span class="hljs-comment">free(0x558f09de52a0)</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="链接时打桩"><a href="#链接时打桩" class="headerlink" title="链接时打桩"></a>链接时打桩</h3><p>编译时使用参数<code>--wrap f</code>可以修改引用时的符号，符号<code>f</code>会被修改为<code>__wrap_f</code>而<code>__real_f</code>会被修改为符号<code>f</code>从而完成打桩技术</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">gcc -Wl,--wrap,malloc -Wl,--wrap,free -o intl int.o mymalloc.o</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//mymalloc.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LINKTIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> *__real_malloc(<span class="hljs-type">size_t</span> size);<br><span class="hljs-type">void</span> __real_free(<span class="hljs-type">void</span> *ptr);<br><br><span class="hljs-type">void</span> *__wrap_malloc(<span class="hljs-type">size_t</span> size)<br>&#123;<br><span class="hljs-type">void</span> *ptr = __real_malloc(size); <span class="hljs-comment">//__real_malloc会被替换为malloc</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(%d) = %p \n&quot;</span>,(<span class="hljs-type">int</span>)size,ptr);<br><span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br><span class="hljs-type">void</span> __wrap_free(<span class="hljs-type">void</span> *ptr)<br>&#123;<br>__real_free(ptr);<span class="hljs-comment">//__real_free会被替换为free</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free(%p)\n&quot;</span>,ptr);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//int.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>); <span class="hljs-comment">//malloc会被替换为__wrap_malloc</span><br><span class="hljs-built_in">free</span>(p); <span class="hljs-comment">//free会被替换为__wrap_free</span><br><span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行时打桩"><a href="#运行时打桩" class="headerlink" title="运行时打桩"></a>运行时打桩</h3><p>自定义<code>.so</code>文件，使用<code>LD_PRELOAD</code>环境变量，使得系统载入我们自定义的<code>.so</code>文件完成打桩</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//课本例子</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">gcc -DRUMTIME -shared -fpic -o mymalloc.so mymalloc.c -ldl</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//mymalloc.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RUNTIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br> <br><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">void</span> *(*mallocp)(<span class="hljs-type">size_t</span> size);<br>    <span class="hljs-type">char</span> *error;<br> <br>    mallocp = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;malloc&quot;</span>); <span class="hljs-comment">//RTLD_NEXT为库中第一个出现的函数</span><br>    <span class="hljs-keyword">if</span> ((error = dlerror()) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fputs</span>(error, <span class="hljs-built_in">stderr</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-type">char</span> *ptr = mallocp(size);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(%d) = %p\n&quot;</span>, (<span class="hljs-type">int</span>)size, ptr);<br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span><br>&#123;<br>    <span class="hljs-type">void</span> (*freep)(<span class="hljs-type">void</span> *) = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> *error;<br> <br>    <span class="hljs-keyword">if</span> (!ptr)<br>        <span class="hljs-keyword">return</span>;<br> <br>    freep = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;free&quot;</span>);<br>    <span class="hljs-keyword">if</span> ((error = dlerror()) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fputs</span>(error, <span class="hljs-built_in">stderr</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    freep(ptr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free(%p)\n&quot;</span>, ptr);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//int.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>);<br><span class="hljs-built_in">free</span>(p);<br><span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是课本例子无法运行</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220517152506071.png" alt="image-20220517152506071"></p><p>参考网上解析<a href="https://blog.csdn.net/damon_x/article/details/111551317">CSAPP第三版运行时打桩Segmentation fault</a></p><p>进入gdb调试，使用<code>(gdb) set env LD_PRELOAD=./mymalloc.so</code>设置环境变量，运行程序，输入<code>bt</code>查看栈回溯</p><p><img src="https://s2.loli.net/2022/05/17/Ga3cYm5ZOJhPdL4.png" alt="image-20220517152718348"></p><p>发现<code>print</code>和<code>malloc</code>函数一直互相递归调用，这是因为<code>printf</code>函数里使用<code>malloc</code>函数，而自定义的<code>.so</code>文件又调用了<code>printf</code>函数因此产生了死循环。</p><p>网上教程修改后的文件为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RUNTIME</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br> <br><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">void</span> *(*mallocp)(<span class="hljs-type">size_t</span> size);<br>    <span class="hljs-type">char</span> *error;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> print_times = <span class="hljs-number">0</span>;<br>    print_times++;<br>    mallocp = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;malloc&quot;</span>);<br>    <span class="hljs-keyword">if</span> ((error = dlerror()) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fputs</span>(error, <span class="hljs-built_in">stderr</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-type">char</span> *ptr = mallocp(size);<br>    <span class="hljs-keyword">if</span>(print_times == <span class="hljs-number">1</span>)<span class="hljs-comment">//防止了递归调用</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(%d) = %p\n&quot;</span>, (<span class="hljs-type">int</span>)size, ptr);<br>    print_times = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span><br>&#123;<br>    <span class="hljs-type">void</span> (*freep)(<span class="hljs-type">void</span> *) = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> *error;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> print_times = <span class="hljs-number">0</span>;<br>    print_times++; <br>    <span class="hljs-keyword">if</span> (!ptr)<br>        <span class="hljs-keyword">return</span>;<br> <br>    freep = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;free&quot;</span>);<br>    <span class="hljs-keyword">if</span> ((error = dlerror()) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fputs</span>(error, <span class="hljs-built_in">stderr</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    freep(ptr);<br>    <span class="hljs-keyword">if</span>(print_times == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free(%p)\n&quot;</span>, ptr);<br>    print_times = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,World!\n&quot;</span>);<br><span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/17/7ru92ZNpBLqao6z.png" alt="image-20220517153341247"></p><h2 id="7-14-处理目标文件的工具"><a href="#7-14-处理目标文件的工具" class="headerlink" title="7.14 处理目标文件的工具"></a>7.14 处理目标文件的工具</h2><ul><li>AR：创建静态库，插入、删除、列出和提取成员</li><li>STRINGS：列出一个目标文件中所有可打印的字符串</li><li>NM：列出一个目标文件的符号表定义的符号</li><li>SIZE：列出目标文件中节的名字和大小</li><li>READELF：显示一个目标文件的完整结构，包括ELF头中编码的所有信息。包含SIZE和NM的功能</li><li>OBJDUMP：显示一个目标文件中所有的信息。可以反汇编<code>.text</code>节中的二进制指令</li><li>LDD：列出一个可执行文件再运行时所需的共享库</li></ul><h1 id="第8章-异常处理控制流"><a href="#第8章-异常处理控制流" class="headerlink" title="第8章 异常处理控制流"></a>第8章 异常处理控制流</h1><p>从给处理器上电开始，直到处理器断电，程序计算器中的序列为$a_0,a_1,…,a_{n-1}$，其中每个$a_k$是某个相应的指令$I_k$的地址。每次从$a_k$到$a_{k+1}$的过度成为控制转移。这样的控制转移序列称之为处理器控制流。</p><p>平滑序列：$I_k$和$I_{k+1}$在内存中相邻</p><p>平滑流突变：$I_k$和$I_{k+1}$不相邻，通常是由于跳转、调用和返回指令造成，这种突变是内部程序状态中的变化</p><p>系统状态变化例如：硬件定时器定期产生信号、包到达网络适配器后、程序向磁盘请求数据以及子进程终止需要通知父进程等</p><p>现代系统通过使控制流发生突变来应对这些情况，上述突变被称之为异常控制流（Exceptional Control Flow,ECF）</p><h2 id="8-1-异常"><a href="#8-1-异常" class="headerlink" title="8.1 异常"></a>8.1 异常</h2><p>异常就是控制流中的突变，用来相应处理器状态中的某些变化</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220609233241439.png" alt="image-20220609233241439"></p><ul><li>状态被编码为不同的位和信号</li><li>状态变化被称之为事件</li><li>事件可能与当前指令的直接相关<ul><li>虚拟内存缺页</li><li>算术溢出</li><li>试图除0</li></ul></li><li>时间也可能与当前指令无关<ul><li>系统定时器产生信号</li><li>I&#x2F;O请求完成</li></ul></li></ul><p>处理器检测到事件发生，就会去异常表的跳转表进行查询并进行间接过程调用，跳转到专门处理此类事件的异常处理程序中进行处理。处理程序完成后，根据异常事件的类型可能会发生以下三种情况之一</p><ul><li>处理程序将控制返回给当前指令$I_{curr}$</li><li>处理程序将控制返回给$I_{next}$，如果没有异常则会执行下一条指令</li><li>处理程序终止被中断的程序</li></ul><h3 id="8-1-1-异常处理"><a href="#8-1-1-异常处理" class="headerlink" title="8.1.1 异常处理"></a>8.1.1 异常处理</h3><p>处理器设计者分配的异常号</p><ul><li>被零除</li><li>缺页</li><li>内存访问违例</li><li>断点</li><li>算术运算溢出</li></ul><p>操作系统内核（操作系统驻留在内存的部分）</p><ul><li>外部I&#x2F;O设备的信号</li></ul><p>系统启动时，操作系统分配和初始化一张称之为异常表的跳转表，表目k包含异常k的处理程序地址</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220609234222043.png" alt="image-20220609234222043"></p><p>异常表的起始地址放在异常表基址寄存器中</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220609234558373.png" alt="image-20220609234558373"></p><p>异常的调用过程与过程调用的不同之处</p><ul><li>过程调用时会将返回地址压入栈中，但是根据异常的类型，返回地址可能是当前指令也可能是下一条指令</li><li>处理器会将额外的处理器状态压入栈中，程序返回时，需要用到这些状态。</li><li>若控制从用户程序转移到内核，所有这些项目都将会被压入内核栈中，而不是压入到用户栈中</li><li>异常处理程序运行在内核模式下，因此具有对系统资源的访问权限</li></ul><h3 id="8-1-2-异常的类别"><a href="#8-1-2-异常的类别" class="headerlink" title="8.1.2 异常的类别"></a>8.1.2 异常的类别</h3><p>异常分为四类：中断、故障、陷阱、终止。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220609235158994.png" alt="image-20220609235158994"></p><ul><li>中断</li></ul><p>中断是异步发生的，来自处理器外部的I&#x2F;O设备的信号的结果。例如网络适配器、磁盘控制器和定时器芯片，这些设备通过向处理器新品上的引脚发信号，并将异常号放到系统总线上，来触发中断，异常号用于标识引起中断的设备。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220610000703892.png" alt="image-20220610000703892"></p><ul><li>陷阱和系统调用</li></ul><p>陷阱是有意而为的异常，陷阱最重要用途是在用户态与内核态之间提供一个接口，被称之为系统调用。</p><p>用户程序需要向内核请求服务，比如读文件（read）、创建新进程（fork）、加载新程序（execve）或终止当前进程（exit）。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220610001720226.png" alt="image-20220610001720226"></p><ul><li>故障</li></ul><p>故障由错误情况引起，它可能能够被修正。当故障发生时，处理器就会将控制转移给故障处理程序。当故障能被修正（例如缺页），则将控制返回给引起故障的指令，重新执行它。否则，处理程序返回到内核中<code>abort</code>例程，<code>abort</code>例程会终止引起故障的应用程序。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220610001938109.png" alt="image-20220610001938109"></p><ul><li>终止</li></ul><p>终止是不可恢复的致命错误造成的结果，通常是一些硬件错误，比如<code>DRAM</code>或<code>SRAM</code>位被损坏时发生的奇偶错误。终止处理程序不会将控制返回给应用程序，而是交给<code>abort</code>例程</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220610163709497.png" alt="image-20220610163709497"></p><h3 id="8-1-3-Linux-x2F-x86-64系统中的异常"><a href="#8-1-3-Linux-x2F-x86-64系统中的异常" class="headerlink" title="8.1.3 Linux&#x2F;x86-64系统中的异常"></a>8.1.3 Linux&#x2F;x86-64系统中的异常</h3><p><code>x86-64</code>系统定义了256种不同的异常类型</p><ul><li>0-31的号码由<code>Intel</code>架构师定义</li><li>32-255的号码由操作系统定义</li></ul><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220610164007260.png" alt="image-20220610164007260"></p><p><strong>1.Linux&#x2F;x86-64故障和终止</strong></p><ul><li>除法错误：应用试图除以零，或者当处罚指令的结果对于目标操作数来说太大了，<code>Unix</code>不会对除法错误进行恢复处理，而是直接终止程序。<code>Linux Shell</code>报告位浮点异常</li><li>一般保护故障：引用未定义的虚拟内存区域，写只读区域，<code>Linux Shell</code>报告为段故障</li><li>缺页：缺页异常时会重新执行故障的指令</li><li>机器检查：监测到致命的硬件错误</li></ul><p><strong>2.Linux&#x2F;x86-64 系统调用</strong></p><p>当应用程序想要请求内核服务时使用，例如读写文件或创建进程</p><p><img src="https://s2.loli.net/2022/06/10/xkvZNeIHTQAjUBd.png" alt="image-20220610165218222"></p><p>c语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>write(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;hello,world\n&quot;</span>,<span class="hljs-number">13</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>汇编语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.section .data<br>string:<br>.ascii &quot;hello,world\n&quot;<br>string_end:<br>.equ len,string_end -string<br>.section .text<br>.global main<br>main:<br>movq $1,%rax ;系统调用号<br>movq $1,%rdi ;键盘输入<br>movq $string,%rsi ;存储地址<br>movq $len,%rdx ;长度<br>syscall ;调用write(1,&quot;hello,world\n&quot;,13)<br><br>movq $60,%rax ;调用exit(0)<br>movq $0,%rdi<br>syscall<br></code></pre></td></tr></table></figure><h2 id="8-2-进程"><a href="#8-2-进程" class="headerlink" title="8.2 进程"></a>8.2 进程</h2><p>进程：正在执行的程序</p><p>系统种的每个程序都运行在某个进程的上下文种。</p><p>上下文由程序正确运行所需的状态组成的</p><ul><li>程序中的代码与数据</li><li>栈、通用寄存器的内容</li><li>程序计数器（PC）</li><li>环境变量</li><li>打开文件描述符</li></ul><p>执行目标文件的流程</p><ul><li>在<code>shell</code>中输入可执行目标文件的名字</li><li><code>shell</code>创建新的进程，在该进程的上下文中运行该可执行目标文件</li></ul><h3 id="8-2-1-逻辑控制流"><a href="#8-2-1-逻辑控制流" class="headerlink" title="8.2.1 逻辑控制流"></a>8.2.1 逻辑控制流</h3><p><code>PC</code>值得序列称之为逻辑控制流</p><h3 id="8-2-2-并发流"><a href="#8-2-2-并发流" class="headerlink" title="8.2.2 并发流"></a>8.2.2 并发流</h3><p>一个逻辑流的执行在时间上与另一个流重叠，称之为并发流</p><p>两个逻辑流并发的运行在不同的处理器核或者计算机上，这为并行流。</p><p><strong>练习题8.1</strong></p><p>考虑三个具有下述起始和结束事件的进程</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220610171839679.png" alt="image-20220610171839679"></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">  <span class="hljs-comment">0     1     2   3   4    5</span><br>  <br><span class="hljs-comment">A</span> <span class="hljs-literal">--</span>          <span class="hljs-literal">--</span><br><br><span class="hljs-comment">B</span>       <span class="hljs-literal">--</span>            <span class="hljs-literal">--</span><br><br><span class="hljs-comment">C</span>                 <span class="hljs-literal">--</span>       <span class="hljs-literal">--</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>进程对</th><th>并发的？</th></tr></thead><tbody><tr><td>AB</td><td>并发的</td></tr><tr><td>AC</td><td>不是并发的</td></tr><tr><td>BC</td><td>并发的</td></tr></tbody></table><h3 id="8-2-3-私有地址空间"><a href="#8-2-3-私有地址空间" class="headerlink" title="8.2.3 私有地址空间"></a>8.2.3 私有地址空间</h3><p>进程为每个程序提供它的私有地址空间</p><p><code>Linux</code>进程的地址空间的组织结构</p><p><img src="https://s2.loli.net/2022/06/10/WdjY1VbOuPQIUzK.png" alt="image-20220610172531499"></p><h3 id="8-2-4-用户模式和内核模式"><a href="#8-2-4-用户模式和内核模式" class="headerlink" title="8.2.4 用户模式和内核模式"></a>8.2.4 用户模式和内核模式</h3><p>今存起通常使用某个控制寄存器中的一个<strong>模式位</strong>区分用户态与内核态，该寄存器描述了进程当前享有的特权。</p><p>当设置了模式位时，进程运行在内核模式中</p><p>没有设置模式位时，进程运行子用户模式中</p><p>进程通过中断、故障或者陷入系统调用这样的异常从用户态转化为内核态。</p><p><code>/proc</code>文件系统，允许用户模式进程访问内核数据结构的内容</p><ul><li><code>/proc/cpuinfo</code>：CPU类型</li><li><code>/proc/&lt;process-id&gt;/maps</code>：某个特殊的进程使用的内存段</li><li><code>/sys</code>：输出系统总线和设备的额外的底层信息</li></ul><h3 id="8-25-上下文切换"><a href="#8-25-上下文切换" class="headerlink" title="8.25 上下文切换"></a>8.25 上下文切换</h3><p>操作系统内核使用上下文切换的异常控制流实现多任务</p><p>内核选择启用哪个进程的决策称之为调度，由调度器处理</p><p>内核调度过程</p><ul><li>内核选择新进程抢占当前进程</li><li>上下文切换<ul><li>保存当前进程的上下文</li><li>恢复某个先前被抢占的进程被保存的上下文</li><li>将控制传递给这个新恢复的进程</li></ul></li></ul><p><img src="https://s2.loli.net/2022/06/10/cBSUmI9sZd1NLwA.png" alt="image-20220610174537704"></p><h2 id="8-3-系统调用错误处理"><a href="#8-3-系统调用错误处理" class="headerlink" title="8.3 系统调用错误处理"></a>8.3 系统调用错误处理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">unix_error</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: %s\n&quot;</span>,msg,strerror(errno));<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-4-进程控制"><a href="#8-4-进程控制" class="headerlink" title="8.4 进程控制"></a>8.4 进程控制</h2><h3 id="8-4-1-获取进程ID"><a href="#8-4-1-获取进程ID" class="headerlink" title="8.4.1 获取进程ID"></a>8.4.1 获取进程ID</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-comment">/* pid_t = int */</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回进程的PID</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getppid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//返回父进程的PID</span><br></code></pre></td></tr></table></figure><h3 id="8-4-2-创建和终止进程"><a href="#8-4-2-创建和终止进程" class="headerlink" title="8.4.2 创建和终止进程"></a>8.4.2 创建和终止进程</h3><p>进程的三种状态</p><ul><li>运行：进程要么在<code>CPU</code>上运行，要么在等待被执行且最终会被内核调度</li><li>停止：进程的执行被挂起，且不会被调度。当收到<code>SIGSTOP</code>、<code>SIGTSTP</code>、<code>SIGTTIN</code>或<code>SIGTTOU</code>信号时，进程就停止，知道接收到<code>SIGCONT</code>信号</li><li>终止：进程永远地停止了，停止地原因有<ul><li>收到信号，该信号默认行为为终止进程</li><li>从主程序返回</li><li>调用<code>exit</code>函数</li></ul></li></ul><p><code>exit</code>函数以<code>status</code>退出状态来终止进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span><br></code></pre></td></tr></table></figure><p>父进程通过<code>fork</code>函数创建新的运行的子进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">子进程返回0，父进程返回子进程的PID，出错为-1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>新创建的子进程几乎与父进程相同。子进程与父进程具有相同的用户级虚拟空间地址，包括代码和数据段、堆、共享库以及用户栈。子进程还获得与父进程任何打开文件描述符相同的副本，因此子进程可以读写父进程中打开的任何文件。父进程与子进程的区别在于它们具有不同的<code>PID</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unix_error</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s: %s\n&quot;</span>,msg,strerror(errno));<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">Fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-comment">//fork函数有两个返回值</span><br>    <span class="hljs-comment">//父进程返回子进程的PID</span><br>    <span class="hljs-comment">//子进程返回0</span><br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>unix_error(<span class="hljs-string">&quot;Fork error&quot;</span>);<br><span class="hljs-keyword">return</span> pid;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main\n&quot;</span>);<br>pid = Fork();<br><span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child : x=%d\n&quot;</span>,++x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PID:%d\n&quot;</span>,pid);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent: x=%d\n&quot;</span>,--x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PID:%d\n&quot;</span>,pid);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>fork</code>函数特点</p><ul><li>调用一次，返回两次。一次返回到父进程，一次返回到子进程。</li><li>并发执行。父进程与子进程是独立并发的进程并且内核能够以任意方式交替执行它们逻辑控制流中的指令。</li><li>两者相同但是具有独立的地址空间。</li><li>共享文件。父进程与子进程都将输出打印在屏幕上，原因上子进程继承了父进程所有的打开文件。当父进程调用<code>fork</code>时,<code>stdout</code>文件时打开的，并指向屏幕。子进程继承了该文件，因此也会向屏幕输出。</li></ul><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220610233208043.png" alt="image-20220610233208043"></p><p><code>gdb</code>调试<code>fork()</code>函数</p><ul><li>调试父进程：<code>set follow-fork-mode parent</code></li><li>调试子进程：<code>set follow-fork-mode child</code></li></ul><p><strong>练习题8.2 考虑下面的程序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1: x=%d\n&quot;</span>,++x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p2: x=%d\n&quot;</span>,--x);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>A.子进程的输出是<code>p1: x = 2</code>，<code>p2: x=1</code></li><li>B.父进程的输出是<code>p2：x=0</code></li></ul><h3 id="8-4-3-回收子进程"><a href="#8-4-3-回收子进程" class="headerlink" title="8.4.3 回收子进程"></a>8.4.3 回收子进程</h3><p>进程因为某种原因终止时，内核并不是立即把它从系统中清除。进程被标志为已终止状态，直到它被父进程回收。</p><p>当父进程回收已终止的子进程的时候，内核就会将子进程的退出状态传递给父进程，并且抛弃已终止进程，此时该进程就不存在系统中。</p><p>若已终止进程未被回收则称之为僵尸进程。</p><p><code>init</code>进程是所有进程的父进程，负责回收孤儿进程（即父进程终止，但其子进程还存在，存在的子进程被称之为孤儿进程）。</p><p><code>init</code>进程的<code>PID</code>为1，不会终止。是在系统启动的时候由内核创建的。</p><p>僵尸进程仍然会消耗系统的内存资源。</p><p><code>waitpid</code>函数用于等到它的子进程终止或者停止</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">waitpid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid,<span class="hljs-type">int</span> *statusp, <span class="hljs-type">int</span> options)</span>;<br><span class="hljs-comment">//返回：成功返回子进程PID，否则返回0，其他错误返回-1</span><br></code></pre></td></tr></table></figure><p>默认情况下（<code>options=0</code>)，<code>waitpid</code>挂起调用进程的指向，直到它的集合中的一个子进程终止。</p><p><strong>1.判定等待集合的成员</strong></p><p>等待集合的成员由参数<code>pid</code>确定</p><ul><li><code>pid</code>&gt;0，只等待进程<code>ID</code>等于<code>pid</code>的子进程</li><li><code>pid</code> &#x3D; -1，等待任何一个子进程退出</li><li><code>pid</code> &#x3D; 0，等待同一个进程组中的任何自己才能</li><li><code>pid</code> &lt; -1，等待一个指定进程组中的任何子进程，这个进程组的<code>ID</code>等于<code>pid</code>的绝对值</li></ul><p><strong>2.修改默认行为</strong></p><p><code>options</code>可以设置为<code>WNOHANG</code>、<code>WUNTRACED</code>和<code>WCONTINUED</code>或者这几种的组合</p><ul><li><code>WNOHANG</code>：如果等待集合中的任何子进程都还没有终止，那么就立即返回(返回值为0)。</li></ul><p>例子（参考<a href="https://blog.csdn.net/tycoon1988/article/details/40976807">Linux    waitpid用WNOHANG</a>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">pid_t</span> pc,pr;<br><br>pc = fork();<br><span class="hljs-keyword">if</span>(pc &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork error\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pc == <span class="hljs-number">0</span>)<br>&#123;<br>sleep(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">do</span>&#123;<br>pr = waitpid(pc,<span class="hljs-literal">NULL</span>,WNOHANG);<br><span class="hljs-keyword">if</span>( pr == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No child exit\n&quot;</span>);<br>sleep(<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">while</span>(pr == <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> ( pr == pc)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;successfully get child %d\n&quot;</span>,pr);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wait child error\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/11/MiaQ6TXko7m1ySc.png" alt="image-20220611005605666"></p><ul><li><code>WUNTRACED</code>：挂起调用进程的指向，直到等待集合中的一个进程变成已终止或者被停止。返回的<code>PID</code>为已终止或被停止子进程的<code>PID</code>。默认的行为是只返回已终止的子进程。</li><li><code>WCONTINUED</code>：挂起调用进程的执行，直到等待集合中一个正在运行的进程终止或等待集合中一个被停止的进程搜到<code>SIGCONT</code>信号重新开始执行。</li></ul><p><strong>3.检查已回收子进程的退出状态</strong></p><p>若<code>statusp</code>参数是飞控的，那么<code>waitpid</code>就会在<code>status</code>中放上关于导致返回的子进程的状态信息，<code>status</code>是<code>statusp</code>指向的值。<code>wait.h</code>头文件定义了解释<code>status</code>参数的几个宏</p><ul><li><code>WIFEXITED</code>：如果子进程通过调用<code>exit</code>或者一个返回正常终止，就返回真</li><li><code>WEXITSTATUS</code>：返回一个正常终止的子进程的退出状态。只有当<code>WIFEXITED()</code>返回真时，才会定义这个状态。</li><li><code>WIFSIGNALED</code>：如果子进程时因为一个未捕获的信号终止的，那么就返回真</li><li><code>WTERMSIG</code>：返回导致子进程终止的信号编号。只有在<code>WIFSIGNALED()</code>返回为真时，才定义这个状态。</li><li><code>WIFSTOPPED</code>：如果引起返回的子进程当前是停止的，那么就返回真</li><li><code>WSTOPSIG</code>：返回引起子进程停止的信号和编号。只有在<code>WIFSTOPPED()</code>返回为真时，才定义这个状态。</li><li><code>WIFCONTINUED</code>：如果子进程收到<code>SIGCONT</code>信号重新启动，则返回真。</li></ul><p><strong>4.错误条件</strong></p><p>如果调用进程没有子进程，那么<code>waitpid</code>返回<code>-1</code>，并且设置<code>errno</code>为<code>ECHILD</code></p><p>如果<code>waitpid</code>函数被一个信号中断，那么它返回<code>-1</code>，并设置<code>errno</code>为<code>EINTR</code></p><p>使用<code>man</code> + 函数名可以查询需要导入的头文件</p><p><strong>练习题8.3</strong></p><p>列出下面程序所有可能的输出序列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>        waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/11/mK6DnhsxCRkGMU2.png" alt="image-20220611011515337"></p><p><strong>5.wait 函数</strong></p><p><code>wait</code>函数时<code>waitpid</code>函数的简单版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">int</span> *statusp)</span>;<br></code></pre></td></tr></table></figure><p>调用<code>wait(&amp;status)</code>等价于调用<code>waitpid(-1，&amp;status，0)</code></p><p><strong>6. 使用waitpid的示例</strong></p><p><strong>waitpid1.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 2</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unix_error</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s:%s\n&quot;</span>,msg,strerror(errno));<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">Fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>unix_error(<span class="hljs-string">&quot;Fork error&quot;</span>);<br><span class="hljs-keyword">return</span> pid;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> status,i;<br><span class="hljs-type">pid_t</span> pid;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; N;i++) <span class="hljs-comment">//fork两个子进程</span><br><span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">100</span>+i); <span class="hljs-comment">//退出状态</span><br><br><span class="hljs-keyword">while</span> ((pid = waitpid(<span class="hljs-number">-1</span>, &amp;status,<span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//等到任意进程终止</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pid:%d\n&quot;</span>,pid);<br><span class="hljs-keyword">if</span>(WIFEXITED(status)) <span class="hljs-comment">//调用exit函数退出则执行</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;chid %d terminated normally with exit status=%d\n&quot;</span>,pid,WEXITSTATUS(status));<span class="hljs-comment">//打印终止的进程ID即状态号</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d terminated abnormally\n&quot;</span>,pid);<br>&#125;<br><br><span class="hljs-keyword">if</span> (errno != ECHILD)<br>unix_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>waitpid2.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N  2</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unix_error</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;%s:%s\n&quot;</span>,msg,strerror(errno));<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">Fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span> )<br>unix_error(<span class="hljs-string">&quot;Fork error&quot;</span>);<br><span class="hljs-keyword">return</span> pid;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> status,i;<br><span class="hljs-type">pid_t</span> pid[N], retpid;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; N; i++)<br><span class="hljs-keyword">if</span>((pid[i] = Fork()) == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">100</span>+i);<br><br>i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//pid &gt; 0 等待指定的子进程退出</span><br><span class="hljs-keyword">while</span> ((retpid = waitpid(pid[i++], &amp;status,<span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span> (WIFEXITED(status))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d terminated normally with exit status=%d\n&quot;</span>,retpid,WEXITSTATUS(status));<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d terminated abnormally\n&quot;</span>,retpid); <br>&#125;<br><span class="hljs-keyword">if</span>(errno != ECHILD)<br>unix_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习题8.4</strong></p><p>考虑下面的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello\n&quot;</span>);<br>    pid = Fork();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,!pid);<br>    <span class="hljs-keyword">if</span>(pid != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> (waitpid(<span class="hljs-number">-1</span>,&amp;status,<span class="hljs-number">0</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(WIFEXITED(status)!=<span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,WEXITSTATUS(status));<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Bye\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A.这个程序会产生多少输出行</p><p><img src="https://s2.loli.net/2022/06/11/uhPyHwYE9d5evgf.png" alt="image-20220611121332443"></p><p>B.这些输出行的一种可能顺序是什么？</p><p><img src="F:\CTF\787e781cc849bb40e68b8e58237ade5.jpg" alt="787e781cc849bb40e68b8e58237ade5"></p><h3 id="8-4-4-让进程休眠"><a href="#8-4-4-让进程休眠" class="headerlink" title="8.4.4 让进程休眠"></a>8.4.4 让进程休眠</h3><p><code>sleep</code>函数将一个进程挂起一段指定的时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> secs)</span>;<br></code></pre></td></tr></table></figure><p>若请求时间到了，<code>sleep</code>返回<code>0</code>，否则返回还剩下的要休眠的秒数。<code>sleep</code>函数有可能会被信号中断过早地返回。</p><p><code>pause</code>函数让调用函数休眠，直到该进程收到一个信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pause</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>练习题8.5</strong></p><p>编写一个<code>sleep</code>地包装函数，叫做<code>snooze</code>，带有下面地接口：</p><p><code>unsigned int snooze(unsigned int secs)</code>;</p><p><code>snooze</code>函数和<code>sleep</code>函数地行为完全一样，除了它会打印出一条消息来描述进程实际休眠了多长时间：</p><p>Slept for 4 of secs.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">snooze</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> secs)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> rc = sleep(secs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Slept for %d of %d secs\n&quot;</span>,secs - rc, secs);<br><span class="hljs-keyword">return</span> rc;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> rc;<br>rc = snooze(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-5-加载并运行程序"><a href="#8-4-5-加载并运行程序" class="headerlink" title="8.4.5 加载并运行程序"></a>8.4.5 加载并运行程序</h3><p><code>execve</code>函数在当前进程地上下文中加载并运行一个新程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *argv[], <span class="hljs-type">const</span> <span class="hljs-type">char</span> *envp[])</span>;<br><span class="hljs-comment">//成功则不返回，错误则返回-1</span><br></code></pre></td></tr></table></figure><p><code>execve</code>调用一次并不返回</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220611130234576.png" alt="image-20220611130234576"></p><p>当<code>main</code>函数开始执行时，用户栈地组织结构为下图</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220611163804777.png" alt="image-20220611163804777"></p><p><code>int main(int argc, char **argv, char **envp);</code></p><p><code>int main(int argc,char *argv[], char *envp[]);</code></p><p><code>main</code>函数有3个参数</p><ol><li><code>argc</code>，指的是<code>argv[]</code>数组中非空指针地数量</li><li><code>argv</code>，指向<code>argv[]</code>数组中的第一个条目</li><li><code>envp</code>，指向<code>envp[]</code>数组中的第一条目</li></ol><p><code>Linux</code>用于操作环境数组的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">getenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-comment">//返回：若存在则为指向name的指针，若无匹配的，则为NULL</span><br></code></pre></td></tr></table></figure><p><code>getenv</code>函数在环境数组中搜索字符串<code>name =  value</code>。如果找到返回指向<code>value</code>的指针，否则返回<code>NULL</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *newvalue, <span class="hljs-type">int</span> overwrite)</span>;<br><span class="hljs-comment">//返回：若成功则为0，若错误则为-1</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unsetenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-comment">//返回：无</span><br></code></pre></td></tr></table></figure><p>如果环境数组包含一个形如<code>name = oldvalue</code>的字符串，那么<code>unsetenv</code>会删除指定键值对，而使用<code>setenv</code>会使用<code>newvalue</code>代替<code>oldvalue</code>，但是只有在<code>overwrite</code>为非零时才会覆盖。</p><p>如果<code>name</code>不存在，那么<code>setenv</code>酒吧<code>name = new value</code>添加到数组中。</p><p>程序与进程的区别</p><ul><li>程序是一堆代码和数据，作为目标文件存在于磁盘上。进程则是执行程序的实例。</li><li>程序是运行在进程的上下文中的</li></ul><p><strong>练习题8.6</strong></p><p>编写一个叫做<code>myecho</code>的程序，打印出它的命令行参数和环境变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[],<span class="hljs-type">char</span> *envp[])</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Command-ine arguments:&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; argc; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argv[ %d]: %s\n&quot;</span>,i,argv[i]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Enviroment variables:&quot;</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(envp); i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;envp[ %d]: %s\n&quot;</span>,i,envp[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/11/TwRvgDjtkzSObxo.png" alt="image-20220611170151025"></p><p>课后答案</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[],<span class="hljs-type">char</span> *envp[])</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Command-ine arguments:&quot;</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; argv[i] != <span class="hljs-literal">NULL</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argv[%2d]: %s\n&quot;</span>,i,argv[i]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Environment variables:&quot;</span>);<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; envp[i] != <span class="hljs-literal">NULL</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;envp[%2d]: %s\n&quot;</span>,i,envpc[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-6-利用fork和execve运行程序"><a href="#8-4-6-利用fork和execve运行程序" class="headerlink" title="8.4.6 利用fork和execve运行程序"></a>8.4.6 利用fork和execve运行程序</h3><p><strong>shellex.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//gcc -o shellex shellex.c csapp.c -lpthread</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXARGS 128</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">char</span> *cmdline)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">parseline</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">char</span> **argv)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">builtin_command</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> cmdline[MAXLINE];<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt; &quot;</span>);<br>Fgets(cmdline,MAXLINE,<span class="hljs-built_in">stdin</span>);<span class="hljs-comment">//输入命令</span><br><span class="hljs-keyword">if</span>(feof(<span class="hljs-built_in">stdin</span>))<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>eval(cmdline);<span class="hljs-comment">//解析命令</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">char</span> *cmdline)</span><br>&#123;<br><span class="hljs-type">char</span> *argv[MAXARGS];<br><span class="hljs-type">char</span> buf[MAXLINE];<br><span class="hljs-type">int</span> bg;<br><span class="hljs-type">pid_t</span> pid;<br><br><span class="hljs-built_in">strcpy</span>(buf,cmdline);<span class="hljs-comment">//将命令拷贝到buf数组中</span><br>bg = parseline(buf,argv);<span class="hljs-comment">//解析命令，将空格转换为截断符，将转换后的命令放在argv中</span><br><span class="hljs-keyword">if</span>( argv[<span class="hljs-number">0</span>] == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">if</span>(!builtin_command(argv))&#123;<br><span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(execve(argv[<span class="hljs-number">0</span>],argv,environ) &lt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: Command not found.\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!bg)&#123;<br><span class="hljs-type">int</span> status;<br><span class="hljs-keyword">if</span> (waitpid(pid,&amp;status,<span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)<br>unix_error(<span class="hljs-string">&quot;waitfd: waitpid error&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s&quot;</span>,pid,cmdline);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">builtin_command</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span><br>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;quit&quot;</span>))<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;&amp;&quot;</span>))<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">parseline</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br><span class="hljs-type">char</span> *delim;<br><span class="hljs-type">int</span> argc;<br><span class="hljs-type">int</span> bg;<br><br>buf[<span class="hljs-built_in">strlen</span>(buf)<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">//末尾改为空格</span><br><span class="hljs-keyword">while</span>(*buf &amp;&amp; (*buf == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">//跳过空格</span><br>buf++;<br>argc = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//定位空格位置</span><br><span class="hljs-keyword">while</span>((delim = <span class="hljs-built_in">strchr</span>(buf, <span class="hljs-string">&#x27; &#x27;</span>)))&#123;<br>argv[argc++] = buf;<br>*delim = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>buf = delim + <span class="hljs-number">1</span>; <span class="hljs-comment">//跳过空格</span><br><span class="hljs-keyword">while</span>(*buf &amp;&amp; (*buf == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">//避免参数之间含有多个空格，空格全跳过</span><br>buf++;<br>&#125;<br>argv[argc] = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (argc == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>((bg = (*argv[argc<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;&amp;&#x27;</span>)) != <span class="hljs-number">0</span>)<span class="hljs-comment">//判断最后一个字符是否为&amp;，若是则后台运行进程</span><br>argv[--argc] = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> bg;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-5-信号"><a href="#8-5-信号" class="headerlink" title="8.5 信号"></a>8.5 信号</h2><p><code>Linux</code>信号允许进程和内核中断其他进程。</p><p>底层硬件异常由内核异常处理程序处理，用户程进程不可见。因此信号提供一种机制，可以通知用户进程发生了异常。</p><p><img src="https://s2.loli.net/2022/06/11/RDeNJFgmjy2tu6O.png" alt="image-20220611191313999"></p><p>按下<code>Ctrl+C</code>，内核将会发送<code>SIGINT</code>信号给前台进程组的每个进程。</p><p>一个进程可以通过向另一个进程发送<code>SIGKILL</code>信号强制终止它。</p><p>当一个子进程终止或停止时，内核会发送一个<code>SIGCHLD</code>信号给父进程</p><h4 id="8-5-1-信号术语"><a href="#8-5-1-信号术语" class="headerlink" title="8.5.1 信号术语"></a>8.5.1 信号术语</h4><p>传送信号到目的进程的步骤：</p><ul><li>发送信号。内核通过更新目的进程上下文中的某个状态，发送（递送）一个信号给目的进程。</li><li>接收信号。当目的进程被内核强迫以某种方式对信号的发送做出反应时，它就接收了信号。进程可以忽略这个信号，终止或者通过执行一个称为信号处理程序的用户层函数捕获这个信号</li></ul><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220611202438537.png" alt="image-20220611202438537"></p><p>没有被接收的信号称之为待处理信号，一种信号至多只有一个待处理信号，若此时接收了相同类型的信号则直接抛弃，不会进行排队等号。</p><p>进程可以有选择性的阻塞接收某种信号。当一种信号被阻塞时，它仍可以被发送，但是产生的待处理信号不会被接收，直到进程取消对这种信号的阻塞。</p><h4 id="8-5-2-发送信号"><a href="#8-5-2-发送信号" class="headerlink" title="8.5.2 发送信号"></a>8.5.2 发送信号</h4><p><code>Unix</code>系统提供了向进程发送信号的机制，这些机制都是基于进程组概念。</p><p><strong>1.进程组</strong></p><p>每个进程都只属于一个进程组，进程组由一个正整数进程组ID标识。</p><p><code>getpgrp</code>函数返回当前进程的进程组<code>ID</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpgrp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">//返回：调用进程的进程组ID</span><br></code></pre></td></tr></table></figure><p>默认条件下，子进程与它的父进程同属于一个进程组。</p><p>进程可以通过<code>setpgid</code>函数改变自己或其他进程的进程组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setpgid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">pid_t</span> pgid)</span>;<br><span class="hljs-comment">//成功则返回0，错误则为-1</span><br></code></pre></td></tr></table></figure><ul><li>若<code>pid</code>为0，则使用当前进程的<code>PID</code></li><li>若<code>pgid</code>为0，则使用<code>pid</code>指定的进程的<code>PID</code>作为进程组<code>ID</code></li></ul><p><strong>2. 用&#x2F;bin&#x2F;kill程序发送信号</strong></p><p><code>/bin/kill</code>程序可以向另外的进程发送任意的信号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">/bin/kill -9 15213</span><br></code></pre></td></tr></table></figure><p>发送一个<code>SIGKILL</code>信号给进程15213</p><p>负的<code>PID</code>则会将信号被发送到进程组<code>PID</code>中的每个进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash">/bin/kill -9 -15213</span><br></code></pre></td></tr></table></figure><p>发送一个<code>SIGKILL</code>信号给进程组15213中的每个进程</p><p><strong>3.从键盘发送信号</strong></p><p><code>Unix shell</code>使用作业表示为对一条命令行求值而创建的进程。</p><p>至多只有一个前台作业或0个或多个后台作业。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">linux&gt; </span><span class="language-bash"><span class="hljs-built_in">ls</span> | <span class="hljs-built_in">sort</span></span><br></code></pre></td></tr></table></figure><p>上述命令会创建一个由两个进程组成的前台作业，这两个进程是通过<code>Unix</code>管道连接起来</p><p><code>shell</code>为每个作业创建一个独立的进程组，进程组<code>ID</code>通常取父进程的<code>PID</code></p><p><img src="https://s2.loli.net/2022/06/11/a5PKihr2qIzn1GM.png" alt="image-20220611205347003"></p><p><code>Ctrl + C</code>往前台进程组发送<code>SIGINT</code>信号，终止前台作业</p><p><code>Ctrl + z</code>往前台进程发送<code>SIGTSTP</code>信号，挂起前台作业</p><p><strong>4.用kill函数发送信号</strong></p><p>进程通过调用<code>kill</code>函数发送洗脑给其他进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kill</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> sig)</span>;<br></code></pre></td></tr></table></figure><ul><li><p><code>pid&gt;0</code>，这<code>kill</code>函数发送信号号码<code>sig</code>给进程<code>pid</code></p></li><li><p><code>pid = 0</code>，则<code>kill</code>函数发送信号<code>sig</code>给调用进程所在进程组中的每个进程，包括调用进程自己</p></li><li><p><code>pid &lt; 0</code>，<code>kill</code>函数发送信号<code>sig</code>给进程组<code>pid</code>中的每个进程</p></li></ul><p><strong>kill.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br><span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br>Pause();<span class="hljs-comment">//休眠进程等待信号</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;control should never reach here!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>Kill(pid,SIGKILL);<span class="hljs-comment">//给子进程发送杀死进程的信号</span><br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.用alarm函数发送信号</strong></p><p>进程可以通过<code>alarm</code>函数向它自己发送<code>SIGALRM</code>信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alarm</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> secs)</span>;<br></code></pre></td></tr></table></figure><p><code>alarm</code>被称为闹钟函数，可以在进程中设置一个定时器，当定时器指定的时间到时，它向进程发送<code>SIGALRM</code>信号，其动作是终止调用该<code>alarm</code>函数的进程</p><h4 id="8-5-3-接收信号"><a href="#8-5-3-接收信号" class="headerlink" title="8.5.3 接收信号"></a>8.5.3 接收信号</h4><p>当进程从内核态转化为用户态时，内核会检测进程是否存在未被阻塞且待处理信号的集合。若有则内核会选择某个信号（通常为最小值的信号），并且强制进程接收信号。</p><p>进程接收信号后会采取某种行为，每个信号都有一个预定义的默认行为</p><ul><li>进程终止</li><li>进程终止并转储内存</li><li>进程停止（挂起）直到被<code>SIGCONT</code>信号重启</li><li>进程忽略该信号</li></ul><p>信号的默认行为可以通过<code>signal</code>函数修改，除了<code>SIGSTOP</code>和<code>SIGKILL</code>信号不能被修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*<span class="hljs-type">sighandler_t</span>)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-type">sighandler_t</span> <span class="hljs-title function_">signal</span><span class="hljs-params">(<span class="hljs-type">int</span> signum,<span class="hljs-type">sighandler_t</span> handler)</span>;<br><br><span class="hljs-comment">//返回：若成功则为指向前次处理程序的指针，出错则为SIG_ERR</span><br></code></pre></td></tr></table></figure><p><code>signal</code>函数可以通过三种方法来修改和信号<code>signum</code>相关联的行为</p><ul><li><code>handler</code>是<code>SIG_IGN</code>，那么忽略类型为<code>signum</code>的信号</li><li><code>handler</code>是<code>SIG_DFL</code>，那么类型为<code>signum</code>的信号行为恢复为默认行为（处理信号）</li><li>否则，<code>handler</code>就是用户定义的函数的地址，这个函数被称为信号处理程序，只要进程接收到一个类型为<code>signum</code>的信号，就会调用这个程序。通过把处理程序的地址传递给<code>signal</code>函数从而改变默认行为，这叫设置信号处理程序。调用信号处理程序被称为捕获信号。执行信号处理程序被称为处理信号。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-comment">//捕获到SIGINT信号的处理函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nCaught SIGINT!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">if</span>(signal(SIGINT,sigint_handler) == SIG_ERR)<br>unix_error(<span class="hljs-string">&quot;signal error&quot;</span>);<br>pause(); <span class="hljs-comment">//挂起进程直到收到信号</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-5-4-阻塞和解除阻塞信号"><a href="#8-5-4-阻塞和解除阻塞信号" class="headerlink" title="8.5.4 阻塞和解除阻塞信号"></a>8.5.4 阻塞和解除阻塞信号</h4><p>Linux提供阻塞信号的隐式和显式的机制：</p><ul><li>隐式阻塞机制。内核默认阻塞任何当前处理程序正在处理信号类型的待处理的信号。即每个信号都有对应的信号处理程序，在该信号处理程序执行时会默认阻塞该信号</li><li>显示阻塞机制。应用程序可以使用<code>sigprocmask</code>函数和它的辅助函数，明确地阻塞和解除阻塞选定的信号</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigprocmask</span><span class="hljs-params">(<span class="hljs-type">int</span> how,<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-type">sigset_t</span> *oldset)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigemtyset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigfillset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>,<span class="hljs-type">int</span> signum)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigdelset</span><span class="hljs-params">(<span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>, <span class="hljs-type">int</span> signum)</span>;<br><span class="hljs-comment">//成功则返回0，出错则为-1</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigismember</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *<span class="hljs-built_in">set</span>,<span class="hljs-type">int</span> signum)</span>;<br><span class="hljs-comment">//若signum是set的成员则为1，不是则为0，出错则为-1</span><br><br></code></pre></td></tr></table></figure><p><code>sigprocmask</code>函数改变当前阻塞的信号集合，具体行为依赖于<code>how</code>的值</p><ul><li><code>SIG_BLOCK</code>：把<code>set</code>中的信号添加到<code>blocked</code>中（<code>blocked=blocked | set</code>）</li><li><code>SIG_UNBOCK</code>：从<code>blocked</code>中删除<code>set</code>中的信号(<code>blocked = blocked &amp; ~set</code>)</li><li><code>SIG_SETMASK</code>：<code>block = set</code></li></ul><p>如果<code>oldset</code>非空，那么<code>blocked</code>位向量之前的值保存在<code>oldset</code>中</p><p>对<code>set</code>信号集合进行操作的函数</p><ul><li><code>sigemptyset</code>初始化<code>set</code>为空集合</li><li><code>sigfillset</code>函数把每个信号都添加到<code>set</code>中</li><li><code>sigaddset</code>函数把<code>signum</code>添加到<code>set</code></li><li><code>sigdelset</code>从<code>set</code>中删除<code>signum</code></li></ul><p><code>sigprocmask</code>临时阻塞接收<code>SIGINT</code>信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">sigset_t</span> mask,prev_mask;<br>Sigemptyset(&amp;mask);<br>Sigaddset(&amp;mask,SIGINT);<br><br><span class="hljs-comment">//将修改之前的信号存放在prev_mask中</span><br>Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev_mask);<br><br><span class="hljs-comment">//还原之前的设置</span><br>Sigprocmask(SIG_SETMASK,&amp;prev_mask,<span class="hljs-literal">NULL</span>);<br><br></code></pre></td></tr></table></figure><h4 id="8-5-5-编写信号处理程序"><a href="#8-5-5-编写信号处理程序" class="headerlink" title="8.5.5 编写信号处理程序"></a>8.5.5 编写信号处理程序</h4><p><strong>1.安全的信号处理</strong></p><p>信号处理程序由于是与主程序以及其他信号处理程序并发地允许，因此可以并发地访问同样地全局数据结构，那么可能会造成不可预知地问题。</p><p>编写处理程序的原则</p><ul><li>处理程序要尽可能简单</li><li>在处理程序中只调用异步信号安全的函数。<ul><li>异步信号安全的函数是可重入的（只访问局部变量）</li><li>异步信号安全的函数不能被信号处理程序中断</li></ul></li></ul><p><strong>异步信号安全的函数</strong></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220613172343468.png" alt="image-20220613172343468"></p><p>信号处理程序中产生输出唯一安全的方法是使用<code>write</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sio_putl</span><span class="hljs-params">(<span class="hljs-type">long</span> v)</span>;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sio_puts</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sio_error</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;<br></code></pre></td></tr></table></figure><p><strong>code&#x2F;src&#x2F;csapp.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sio_puts</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-comment">//sio_strlen函数返回字符串s的长度</span><br>    <span class="hljs-keyword">return</span> write(STDOUT_FILENO,s,sio_strlen(s));<br>&#125;<br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sio_putl</span><span class="hljs-params">(<span class="hljs-type">long</span> v)</span><br>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">128</span>];<br>    <br>    <span class="hljs-comment">//长整形转化为任意进制的字符串</span><br>    sio_ltoa(v,s,<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">return</span> sio_puts(s);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sio_error</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    sio_puts(s);<br>    _exit(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SIGINT</strong>处理程序的安全版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handle</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    Sio_puts(<span class="hljs-string">&quot;Caught SIGINT!\n&quot;</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>保存和恢复<code>errno</code>。由于众多<code>Linux</code>异步信号安全的函数都会在出错返回时设置<code>errno</code>。由于处理程序可能会干扰其他主程序中其他依赖于<code>errno</code>。因此解决办法为是在进入处理程序时将<code>errno</code>保存在一个局部变量中，在处理程序返回前恢复</li><li>阻塞所有的信号，保护对共享全局数据结构的访问。</li><li>用<code>volatile</code>声明全局变量。若用处理程序和<code>main</code>函数共享一个全局变量<code>g</code>，由于<code>main</code>周期性读<code>g</code>。一个优化的编译器会使用缓存在寄存器中的<code>g</code>的副本来满足对<code>g</code>对每次引用。则导致<code>main</code>无法读取<code>g</code>更新过的值<ul><li><code>volatile</code>类型限定符来定义一个变量，告诉编译器不要缓存这个变量。强迫编译器每次在代码中引用<code>g</code>时，都要从内存中读取。</li></ul></li><li>用<code>sig_atomic_t</code>声明标志。处理程序通过写全局标志来记录收到的信号。主程序周期性地读这个标志，响应信号，再清除标志。对于通过这种方式来共享地标志，<code>C</code>提供一种整型数据类型<code>sig_atomic_t</code>，并且该类型的读写是保证是原子操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> flag;<br></code></pre></td></tr></table></figure><p><strong>2. 正确的信号处理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handler1</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br><span class="hljs-type">int</span> olderrno = errno;<br><br><span class="hljs-keyword">if</span>((waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>sio_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>Sio_puts(<span class="hljs-string">&quot;Handler reaped child\n&quot;</span>);<br>Sleep(<span class="hljs-number">1</span>);<br>errno = olderrno;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i,n;<br><span class="hljs-type">char</span> buf[MAXBUF];<br><br><span class="hljs-keyword">if</span>(signal(SIGCHLD,handler1) == SIG_ERR)<br>unix_error(<span class="hljs-string">&quot;signal error&quot;</span>);<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br><span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello from child %d\n&quot;</span>,(<span class="hljs-type">int</span>)getpid());<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>((n = read(STDIN_FILENO,buf,<span class="hljs-keyword">sizeof</span>(buf))) &lt; <span class="hljs-number">0</span>)<br>unix_error(<span class="hljs-string">&quot;read&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent processing input\n&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述程序会导致僵尸进程。父进程接收并捕获了第一个信号，当处理程序还在处理第一个程序时，第二个信号就传送并添加到待处理信号集合里，然而，因为<code>SIGCHLD</code>信号被<code>SIGCHLD</code>处理程序阻塞了，所以第二个信号不会被接收，因此再第三个信号时，该信号会被抛弃，导致进程未被收回。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220613200712252.png" alt="image-20220613200712252"></p><p><strong>code&#x2F;ecf&#x2F;signal2.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">handler2</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    <span class="hljs-comment">//将所有子进程都回收，则不会导致有僵尸进程</span><br>    <span class="hljs-keyword">while</span>(waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>        Sio_puts(<span class="hljs-string">&quot;Handler reaped child\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(errno != ECHILD)<br>        Sio_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>    Sleep(<span class="hljs-number">1</span>);<br>    errno = olderrno;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习题8.8</strong></p><p>下面这个程序的输出是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> counter = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//子进程调用信号处理函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">handler1</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">sigset_t</span> mask,prev_mask;<br>    <span class="hljs-comment">//将所有信号放进mask里</span><br>    Sigfillset(&amp;mask);<span class="hljs-comment">//将信号都放进mask中</span><br>    <span class="hljs-comment">//临时阻塞所有信号</span><br>    Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev_mask);<br>    <span class="hljs-comment">//此时是子进程取出它自己的counter变量</span><br>    Sio_putl(--counter);<span class="hljs-comment">//打印1</span><br>    <span class="hljs-comment">//还原信号</span><br>    Sigprocmask(SIG_SETMASK,&amp;prev_mask,<span class="hljs-literal">NULL</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">sigset_t</span> mask,prev_mask;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld&quot;</span>,counter);<span class="hljs-comment">//用户打印2</span><br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    <br>    signal(SIGUSR1,handler1); <span class="hljs-comment">//用户定义的信号1</span><br>    <span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;&#125;; <span class="hljs-comment">//死循环</span><br>    &#125;<br>    Kill(pid,SIGUSR1);<span class="hljs-comment">//父进程给子进程发送用户定义的信号1</span><br>    Waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//将所有信号放进mask里</span><br>    Sigfillset(&amp;mask);<br>    Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev_mask);<br>    <span class="hljs-comment">//此时是父进程取出它自己的counter变量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld&quot;</span>,++counter);<span class="hljs-comment">//打印3</span><br>    Sigprocmask(SIG_SETMASK,&amp;prev_mask,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出213</p><p><strong>3.可移植的信号处理</strong></p><p><code>Unix</code>信号处理的另一个缺陷在于不同的系统有不同的信号处理语义</p><ul><li><code>signal</code>函数的语义各有不同。在有些老的<code>Unix</code>系统在信号<code>k</code>被处理程序捕获之后就把对信号<code>k</code>的反应恢复到默认值。因此在这些系统上，每次运行之后，处理程序必须调用<code>signal</code>函数，显示地重新设置。</li><li>系统调用可以被中断。像<code>read</code>、<code>write</code>和<code>accept</code>这样的系统调用潜在地会阻塞进程一段时间，称之为慢速系统调用。在老的<code>Unix</code>系统中，当处理程序捕获到一个信号时，被中断地慢速系统调用在信号处理程序返回时不再继续，而是立即返回给用户一个错误条件，并将<code>errno</code>设置为<code>EINTR</code>，因此在这些系统上程序员需要手动重启被中断的系统调用的代码。</li></ul><p><code>sigaction</code>函数允许用户在设置信号处理时，明确指定他们想要的信号处理语义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigaction</span><span class="hljs-params">(<span class="hljs-type">int</span> signum,<span class="hljs-keyword">struct</span> sigaction *atc, <span class="hljs-keyword">struct</span> sigaction *oldact)</span>;<br><span class="hljs-comment">//成功则返回0，出错则为-1</span><br></code></pre></td></tr></table></figure><p>定义一个包装函数，称之为<code>Signal</code>调用<code>sigaction</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">handler_t</span> *<span class="hljs-title function_">Signal</span><span class="hljs-params">(<span class="hljs-type">int</span> signum,<span class="hljs-type">handler_t</span> *handler)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">action</span>, <span class="hljs-title">old_action</span>;</span><br>    action.sa_handler = handler;<br>    sigemptyset(&amp;action.sa_mask);<br>    action.sa_flags = SA_RESTART;<br>    <br>    <span class="hljs-keyword">if</span>(sigaction(signum,&amp;action,&amp;old_action) &lt; <span class="hljs-number">0</span>)<br>        unix_error(<span class="hljs-string">&quot;Signal error&quot;</span>);<br>   <span class="hljs-keyword">return</span>(old_action.sa_handler);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-5-6-同步流以避免讨厌的并发错误"><a href="#8-5-6-同步流以避免讨厌的并发错误" class="headerlink" title="8.5.6 同步流以避免讨厌的并发错误"></a>8.5.6 同步流以避免讨厌的并发错误</h4><p><strong>code&#x2F;ecf&#x2F;procmask1.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    <span class="hljs-type">sigset_t</span> mask_all, prev_all;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <br>    Sigfillset(&amp;mask_all);<br>    <span class="hljs-keyword">while</span>((pid = waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>))&gt;<span class="hljs-number">0</span>)&#123;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all);<br>        deletejob(pid);<br>        Sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(errno != ECHILD)<br>        Sio_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>   errno = olderrno;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> pid;<br>    <span class="hljs-type">sigset_t</span> mask_all,prev_all;<br>    <br>    Sigfillset(&amp;mask_all);<br>    Signal(SIGCHLD,handler);<br>    initjobs();<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br>            Execve(<span class="hljs-string">&quot;/bin/date&quot;</span>,argv,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all);<br>        addjob(pid);<br>        Sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码可能会导致条件竞争</p><ul><li>父进程执行<code>fork</code>函数，内核调度新创建的子进程运行</li><li>子进程终止，传递一个<code>SIGCHLD</code>信号给父进程</li><li>父进程执行前发现有未处理的信号</li><li>信号处理程序回收终止子进程，并且调用<code>deletejob</code>，但是父进程还没有把子进程放进作业中</li><li>信号处理程序完毕后，内核继续运行父进程，父进程从<code>fork</code>返回后，将回收的子进程又添加到作业中</li></ul><p><strong>code&#x2F;efc&#x2F;procmask2.c</strong></p><p>在父进程<code>fork</code>之前阻塞<code>SIGCHLD</code>，在<code>addjob</code>之后才解除，则避免了在<code>addjob</code>之前<code>deletejob</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    <span class="hljs-type">sigset_t</span> mask_all,prev_all;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <br>    Sigfillset(&amp;mask_all);<br>    <span class="hljs-keyword">while</span>((pid = waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>))&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all);<br>        deletejob(pid);<br>        Sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(errno != ECHILD)<br>        Sio_error(<span class="hljs-string">&quot;waitpid error&quot;</span>);<br>    errno = olderrno;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> pid;<br>    <span class="hljs-type">sigset_t</span> mask_all,mask_one,prev_one;<br>    <br>    Sigfillset(&amp;mask_all);<br>    Sigemptyset(&amp;mask_one);<br>    Sigaddset(&amp;mask_one,SIGCHLD);<br>    Signal(SIGCHLD,handler);<br>    initjobs();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_one,&amp;prev_one);<br>        <span class="hljs-keyword">if</span>((pid = Fork()) == <span class="hljs-number">0</span>)&#123;<br>            Sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="hljs-literal">NULL</span>);<br>            Execve(<span class="hljs-string">&quot;/bin/data&quot;</span>,argv,<span class="hljs-literal">NULL</span>);<br>        &#125;<br>        Sigprocmask(SIG_BLOCK,&amp;mask_all,<span class="hljs-literal">NULL</span>);<br>        addjob(pid);<br>        Sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-5-7-显示地等待信号"><a href="#8-5-7-显示地等待信号" class="headerlink" title="8.5.7 显示地等待信号"></a>8.5.7 显示地等待信号</h4><p>有时候主程序需要显示地等待某个信号处理程序运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> pid;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigchld_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    pid = waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br>    errno = olderrno;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>    <br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">sigset_t</span> mask,prev;<br>    <br>    Signal(SIGCHLD,sigchld_handler);<br>    Signal(SIGINT,sigint_handler);<br>    Sigemptyset(&amp;mask);<br>    Sigaddset(&amp;mast,SIGCHLD);<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br> <span class="hljs-comment">//忽略SIGCHLD信号，防止条件竞争</span><br>       Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev);<br>        <span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        pid = <span class="hljs-number">0</span>;<br>        Sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">while</span>(!pid)<span class="hljs-comment">//等到SIGCHLD信号处理程序执行后主程序才接着执行</span><br>            ;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>循环会浪费处理器资源，因此可以修改为其他代码使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(!pid)<br>pause()<br></code></pre></td></tr></table></figure><p>但是若信号在<code>while</code>语句后，<code>pause()</code>语句前到达，那么程序将永久休眠</p><p>使用<code>sleep</code>替换<code>pause</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(!pid)<br>sleep(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>但是使用<code>sleep</code>执行会浪费大量时间，若改为高精度的休眠函数则休眠时间太短则会造成<code>while</code>语句执行次数过多，若休眠时间太长则又会导致程序运行时间太久。</p><p>使用函数<code>sigsuspend</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sigsuspend</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *mask)</span>;<br><br><span class="hljs-comment">//等价于</span><br>sigprocmask(SIG_SETMASK,&amp;mask,&amp;prev);<br>pause();<br>sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p><strong>code&#x2F;ecf&#x2F;sigsuspend.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">sig_atomic_t</span> pid;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigchld_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno = errno;<br>    pid = waitpid(<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br>    errno = olderrno;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span><br>&#123;<br>    <br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">sigset_t</span> mask,prev;<br>    <br>    Signal(SIGCHLD,sigchld_handler);<br>    Signal(SIGINT,sigint_handler);<br>    Sigemptyset(&amp;mask);<br>    Sigaddset(&amp;mast,SIGCHLD);<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br> <span class="hljs-comment">//忽略SIGCHLD信号，防止条件竞争</span><br>       Sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev);<br>        <span class="hljs-keyword">if</span>(Fork() == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        pid = <span class="hljs-number">0</span>;<br>        Sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">while</span>(!pid)<br>            sigsuspend(&amp;prev);<br> Sigprocmast(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-6-非本地跳转"><a href="#8-6-非本地跳转" class="headerlink" title="8.6 非本地跳转"></a>8.6 非本地跳转</h2><p>非本地跳转是通过<code>setjmp</code>和<code>longjmp</code>函数来提供的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;setjmp.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setjmp</span><span class="hljs-params">(jmp_buf env)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sigsetjmp</span><span class="hljs-params">(sigjmp_buf env, <span class="hljs-type">int</span> savesigs)</span>;<br><br><span class="hljs-comment">//返回:setjmp返回0，longjmp返回非零。</span><br></code></pre></td></tr></table></figure><p><code>setjmp</code>函数在<code>env</code>缓冲区中保存当前调用环境，供后面的<code>longjmp</code>使用，并返回0。</p><p>调用环境包括程序计数器、栈指针和通用目的寄存器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;setjmp.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">longjmp</span><span class="hljs-params">(jmp_buf env, <span class="hljs-type">int</span> retval)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">siglongjmp</span><span class="hljs-params">(sigjmp_buf env,<span class="hljs-type">int</span> retval)</span>;<br><span class="hljs-comment">//从不返回</span><br></code></pre></td></tr></table></figure><p><code>longjmp</code>函数从<code>env</code>缓冲区中恢复调用环境，然后触发一个从最近一次初始化<code>env</code>的<code>setjmp</code>调用的返回。然后<code>setjmp</code>返回，并带有非零的返回值<code>retval</code></p><p><strong>code&#x2F;efc&#x2F;setjmp.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br>jmp_buf buf; <span class="hljs-comment">//调用环境</span><br><span class="hljs-type">int</span> error1 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> error2 = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>,<span class="hljs-title function_">bar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">switch</span>(setjmp(buf))&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            foo();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Detected an error1 condition in foo\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Detected an error2 condition in foo\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unkonw error condition in foo\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">//若遇到错误则直接从setjmp返回</span><br>    <span class="hljs-keyword">if</span>(error1)<br>        longjmp(buf,<span class="hljs-number">1</span>);<br>    bar();<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">//若遇到错误则直接从setjmp返回</span><br>    <span class="hljs-keyword">if</span>(error2)<br>        longjmp(buf,<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>longjmp</code>允许它跳过所有中间调用的特性可能会产生意外的后果，例如函数内部分配了资源，应该在函数结束时释放资源，但是由于<code>longjmp</code>跳过了释放的过程导致了内存泄露。</p><p><strong>code&#x2F;ecf&#x2F;restart.c</strong></p><p>非本地跳转的另一个重要应用是使一个信号处理程序分支到一个特殊的代码位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><br>sigjmp_buf buf;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    siglongjmp(buf,<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//设置跳转</span><br>    <span class="hljs-keyword">if</span>(!sigsetjmp(buf,<span class="hljs-number">1</span>))&#123;<br>        <span class="hljs-comment">//设置信号处理程序</span><br>        Signal(SIGINT,handler);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        Sio_puts(<span class="hljs-string">&quot;restarting\n&quot;</span>);<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        Sleep(<span class="hljs-number">1</span>);<br>       Sio_puts(<span class="hljs-string">&quot;processing...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>C++和Java中的软件异常</strong></p><p><code>C++</code>和<code>Java</code>提供的异常机制是较高层次的，是C语言的<code>setjmp</code>和<code>longjmp</code>函数的更加结构化的版本。</p><p><code>try</code>语句中的<code>catch</code>子句类似于<code>setjmp</code>函数，<code>throw</code>语句类似于<code>longjmp</code>函数</p><h2 id="8-7-操作进程的工具"><a href="#8-7-操作进程的工具" class="headerlink" title="8.7 操作进程的工具"></a>8.7 操作进程的工具</h2><ul><li><code>STRACE</code>：打印一个正在运行的程序和它的子进程调用的每个系统调用的轨迹。</li><li><code>PS</code>：列出当前系统中的进程</li><li><code>TOP</code>：打印出关于当前进程资源使用的信息</li><li><code>PMAP</code>：显示进程的内存映射</li><li><code>/proc</code>：一个虚拟文件系统，以<code>ASCII</code>文本格式输出大量内核数据结构的内容，用户程序可以读取这些内容<ul><li>输入<code>cat/proc/loadavg</code>可以看到<code>linux</code>系统上的平均负载</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向工程核心原理--代码注入</title>
    <link href="/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h1><p>代码注入是一种向目标进程插入独立运行代码的技术。一般调用<code>CreateRemoteThread()</code>API以远程线程形式运行插入的代码，也被称之为线程注入。</p><h2 id="代码注入与DLL注入"><a href="#代码注入与DLL注入" class="headerlink" title="代码注入与DLL注入"></a>代码注入与DLL注入</h2><h3 id="使用代码注入的原因"><a href="#使用代码注入的原因" class="headerlink" title="使用代码注入的原因"></a>使用代码注入的原因</h3><ul><li>占用内存少</li><li>难以查找痕迹</li><li>其他：不需要额外的<code>DLL</code>文件，只要又代码注入程序。</li></ul><h3 id="InjectCode"><a href="#InjectCode" class="headerlink" title="InjectCode"></a>InjectCode</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_THREAD_PARAM</span><br>&#123;<br><span class="hljs-comment">//typedef int (FAR WINAPI *FARPROC)();</span><br>FARPROC pFunc[<span class="hljs-number">2</span>]; <span class="hljs-comment">//LoadLibraryA(),GetProcAddress()</span><br><span class="hljs-type">char</span> szBuf[<span class="hljs-number">4</span>][<span class="hljs-number">128</span>]; <span class="hljs-comment">//user32.dll , MessageBoxA</span><br><span class="hljs-comment">//www.reversecode.com , ReverseCore</span><br>&#125;THREAD_PARAM,*PTHREAD_PARAM;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 函数指针名为PFLOADLIBRARYA，参数为lpLibFileName</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HMODULE</span><span class="hljs-params">(WINAPI* PFLOADLIBRARYA)</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpLibFileName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* PFGETPROCADDRESS)</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(WINAPI* PFMESSAGEBOX)</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpCation,</span></span><br><span class="hljs-params"><span class="hljs-function">UINT uType</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc</span><span class="hljs-params">(LPVOID lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>PTHREAD_PARAM pParam = (PTHREAD_PARAM)lParam;<br>HMODULE hMod = <span class="hljs-literal">NULL</span>;<br>FARPROC pFunc = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Loadlibrary(&quot;user32.dll&quot;)</span><br><span class="hljs-comment">* pParam-&gt;pFunc[0]-&gt;kernel32!LoadLibraryA()</span><br><span class="hljs-comment">* pParam-&gt;szBuf[0]-&gt;user32.dll</span><br><span class="hljs-comment">*/</span><br>hMod = ((PFLOADLIBRARYA)pParam-&gt;pFunc[<span class="hljs-number">0</span>])(pParam-&gt;szBuf[<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* GetProcAddress(&quot;MessageBoxA&quot;)</span><br><span class="hljs-comment">* pParam-&gt;pFunc[1] -&gt; kernel32!GetProcAddress()</span><br><span class="hljs-comment">* pParam-&gt;szBuf[1] -&gt; MessageBoxA</span><br><span class="hljs-comment">*/</span><br>pFunc = (FARPROC)((PFGETPROCADDRESS)pParam-&gt;pFunc[<span class="hljs-number">1</span>])(hMod, pParam-&gt;szBuf[<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* MessageBoxA(NULL,www.reversecode.com,ReverseCore,MB_OK)</span><br><span class="hljs-comment">* pParam-&gt;szBuf[2]-&gt;www.reversecode.com</span><br><span class="hljs-comment">* pParam-&gt;szBuf[3]-&gt;ReverseCore</span><br><span class="hljs-comment">*/</span><br>((PFMESSAGEBOX)pFunc)(<span class="hljs-literal">NULL</span>, pParam-&gt;szBuf[<span class="hljs-number">2</span>], pParam-&gt;szBuf[<span class="hljs-number">3</span>], MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">InjectCode</span><span class="hljs-params">(DWORD dwPID)</span></span><br><span class="hljs-function"></span>&#123;<br>HMODULE hMod = <span class="hljs-literal">NULL</span>;<br>THREAD_PARAM param = &#123; <span class="hljs-number">0</span>, &#125;;<br>HANDLE hProcess = <span class="hljs-literal">NULL</span>;<br>HANDLE hThread = <span class="hljs-literal">NULL</span>;<br>LPVOID pRemoteBuf[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0</span>, &#125;;<br>DWORD dwSize = <span class="hljs-number">0</span>;<br><br>hMod = <span class="hljs-built_in">GetModuleHandleA</span>(<span class="hljs-string">&quot;kernel32.dll&quot;</span>);<br>param.pFunc[<span class="hljs-number">0</span>] = <span class="hljs-built_in">GetProcAddress</span>(hMod, <span class="hljs-string">&quot;LoadLibraryA&quot;</span>);<br>param.pFunc[<span class="hljs-number">1</span>] = <span class="hljs-built_in">GetProcAddress</span>(hMod, <span class="hljs-string">&quot;GetProcAddress&quot;</span>);<br><br><span class="hljs-built_in">strcpy_s</span>(param.szBuf[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;user32.dll&quot;</span>);<br><span class="hljs-built_in">strcpy_s</span>(param.szBuf[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br><span class="hljs-built_in">strcpy_s</span>(param.szBuf[<span class="hljs-number">2</span>], <span class="hljs-string">&quot;www.reversecore.com&quot;</span>);<br><span class="hljs-built_in">strcpy_s</span>(param.szBuf[<span class="hljs-number">3</span>], <span class="hljs-string">&quot;ReverseCore&quot;</span>);<br><br>hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID);<br>dwSize = <span class="hljs-built_in">sizeof</span>(THREAD_PARAM);<br>pRemoteBuf[<span class="hljs-number">0</span>] = <span class="hljs-built_in">VirtualAllocEx</span>(<br>hProcess,<br><span class="hljs-literal">NULL</span>,<br>dwSize,<br>MEM_COMMIT,<br>PAGE_READWRITE<br>);<br><br><span class="hljs-built_in">WriteProcessMemory</span>(<br>hProcess,<br>pRemoteBuf[<span class="hljs-number">0</span>],<br>(LPVOID)&amp;param,<br>dwSize,<br><span class="hljs-literal">NULL</span><br>);<br><br>dwSize = (DWORD)InjectCode - (DWORD)ThreadProc;<br>pRemoteBuf[<span class="hljs-number">1</span>] = <span class="hljs-built_in">VirtualAllocEx</span>(<br>hProcess,<br><span class="hljs-literal">NULL</span>,<br>dwSize,<br>MEM_COMMIT,<br>PAGE_EXECUTE_READWRITE<br>);<br><span class="hljs-built_in">WriteProcessMemory</span>(<br>hProcess,<br>pRemoteBuf[<span class="hljs-number">1</span>],<br>(LPVOID)ThreadProc,<br>dwSize,<br><span class="hljs-literal">NULL</span><br>);<br><br>hThread = <span class="hljs-built_in">CreateRemoteThread</span>(<br>hProcess,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-number">0</span>,<br>(LPTHREAD_START_ROUTINE)pRemoteBuf[<span class="hljs-number">1</span>],<br>pRemoteBuf[<span class="hljs-number">0</span>],<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span><br>);<br><span class="hljs-built_in">WaitForSingleObject</span>(hThread,INFINITE);<br><span class="hljs-built_in">CloseHandle</span>(hThread);<br><span class="hljs-built_in">CloseHandle</span>(hProcess);<br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwPID = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n USAGE : %ss pid \n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br>dwPID = (DWORD)<span class="hljs-built_in">atol</span>(argv[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">InjectCode</span>(dwPID);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用汇编语言编写注入代码"><a href="#使用汇编语言编写注入代码" class="headerlink" title="使用汇编语言编写注入代码"></a>使用汇编语言编写注入代码</h1><h2 id="OllyDbg的汇编命令"><a href="#OllyDbg的汇编命令" class="headerlink" title="OllyDbg的汇编命令"></a>OllyDbg的汇编命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs assembly">068C0000   55               PUSH EBP<br>068C0001   8BEC             MOV EBP,ESP<br>068C0003   8B75 08          MOV ESI,DWORD PTR SS:[EBP+0x8];取出第一个参数<br>068C0006   68 6C6C0000      PUSH 0x6C6C<br>068C000B   68 33322E64      PUSH 0x642E3233<br>068C0010   68 75736572      PUSH 0x72657375<br>068C0015   54               PUSH ESP ;压入user32.dll字符串<br>068C0016   FF16             CALL DWORD PTR DS:[ESI];调用LoadLibraryA(&quot;user32.dll&quot;)<br>068C0018   68 6F784100      PUSH 0x41786F<br>068C001D   68 61676542      PUSH 0x42656761<br>068C0022   68 4D657373      PUSH 0x7373654D<br>068C0027   54               PUSH ESP;压入MessageBoxA字符串<br>068C0028   50               PUSH EAX;压入user32.dll模块的地址<br>068C0029   FF56 04          CALL DWORD PTR DS:[ESI+0x4];调用GetProcess(hMod,&quot;MessageBoxA&quot;)<br>068C002C   6A 00            PUSH 0x0<br>068C002E   E8 0C000000      CALL 068C003F ;call指令是先push然后执行jmp,即可将字符串压入栈中<br>068C0033   52               PUSH EDX<br>068C0034   65:76 65         JBE SHORT 068C009C<br>068C0037   72 73            JB SHORT 068C00AC<br>068C0039   65:43            INC EBX<br>068C003B   6F               OUTS DX,DWORD PTR DS:[ESI]<br>068C003C   72 65            JB SHORT 068C00A3<br>068C003E   00E8             ADD AL,CH ;调用call068C0058,也是将字符串压入栈中<br>068C0040   14 00            ADC AL,0x0<br>068C0042   0000             ADD BYTE PTR DS:[EAX],AL<br>068C0044   77 77            JA SHORT 068C00BD<br>068C0046   77 2E            JA SHORT 068C0076<br>068C0048   72 65            JB SHORT 068C00AF<br>068C004A   76 65            JBE SHORT 068C00B1<br>068C004C   72 73            JB SHORT 068C00C1<br>068C004E   65:636F 72       ARPL WORD PTR GS:[EDI+0x72],BP<br>068C0052   65               GS:<br>068C0053   2E:636F 6D       ARPL WORD PTR CS:[EDI+0x6D],BP<br>068C0057   006A 00          ADD BYTE PTR DS:[EDX],CH<br>068C005A   FFD0             CALL EAX<br>068C005C   33C0             XOR EAX,EAX<br>068C005E   8BE5             MOV ESP,EBP<br>068C0060   5D               POP EBP<br>068C0061   C3               RETN<br><br></code></pre></td></tr></table></figure><p><strong>OD保存文件</strong></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220203211222663.png" alt="image-20220203211222663"></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220203211310547.png" alt="image-20220203211310547"></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220203211327879.png" alt="image-20220203211327879"></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220203211454786.png" alt="image-20220203211454786"></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220203211530544.png" alt="image-20220203211530544"></p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向工程核心原理--HOOK</title>
    <link href="/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--HOOK/"/>
    <url>/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--HOOK/</url>
    
    <content type="html"><![CDATA[<h1 id="记事本WriteFile-API钩取"><a href="#记事本WriteFile-API钩取" class="headerlink" title="记事本WriteFile()API钩取"></a>记事本WriteFile()API钩取</h1><p>通过HOOK地址，修改地址所对应的内容完成修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-comment">//WriteFile函数的地址</span><br>LPVOID g_pfWriteFile = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//Debug进程信息</span><br>CREATE_PROCESS_DEBUG_INFO g_cpdi;<br>BYTE g_chINT3 = <span class="hljs-number">0xCC</span>, g_ch0rgByte = <span class="hljs-number">0</span>;<br><span class="hljs-function">BOOL <span class="hljs-title">OnCreateProcessDebugEvent</span><span class="hljs-params">(LPDEBUG_EVENT pde)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//获取WriteFile函数的地址，这里获取的是调试进程Write函数的地址</span><br><span class="hljs-comment">//但是对于Windows OS的系统DLL来说，DLL加载地址为同一个</span><br>g_pfWriteFile = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">GetModuleHandleA</span>(<span class="hljs-string">&quot;kernel32.dll&quot;</span>), <span class="hljs-string">&quot;WriteFile&quot;</span>);<br><span class="hljs-comment">//将被调试进程的信息拷贝到g_cpdi中</span><br><span class="hljs-built_in">memcpy</span>(&amp;g_cpdi, &amp;pde-&gt;u.CreateProcessInfo, <span class="hljs-built_in">sizeof</span>(CREATE_PROCESS_DEBUG_INFO));<br><span class="hljs-comment">//读取被调试进程中WriteFile函数所在地址的指令，只读取一个字节</span><br><span class="hljs-built_in">ReadProcessMemory</span>(g_cpdi.hProcess, g_pfWriteFile, &amp;g_ch0rgByte, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//将被调试进程中WriteFile函数所在地址的指令的首个字节修改为INT3指令，实现断点</span><br><span class="hljs-built_in">WriteProcessMemory</span>(g_cpdi.hProcess, g_pfWriteFile, &amp;g_chINT3, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br><br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">OnExceptionDebugEvent</span><span class="hljs-params">(LPDEBUG_EVENT pde)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//包含特定于处理器的寄存器数据</span><br>CONTEXT ctx;<br>PBYTE lpBuffer = <span class="hljs-literal">NULL</span>;<br>DWORD dwNumberOfBytesToWrite, dwAddrOfBuffer, i;<br><span class="hljs-comment">//用于描述异常</span><br>PEXCEPTION_RECORD per = &amp;pde-&gt;u.Exception.ExceptionRecord;<br><br><span class="hljs-comment">//异常为断点异常</span><br><span class="hljs-keyword">if</span> (EXCEPTION_BREAKPOINT == per-&gt;ExceptionCode)<br>&#123;<br><span class="hljs-keyword">if</span> (g_pfWriteFile == per-&gt;ExceptionAddress)<br>&#123;<br><span class="hljs-comment">//将WriteFile函数所在地址指令恢复原来的状态，去除掉INT3指令</span><br><span class="hljs-built_in">WriteProcessMemory</span>(g_cpdi.hProcess, g_pfWriteFile, &amp;g_ch0rgByte, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//获取进程的上下文信息</span><br>ctx.ContextFlags = CONTEXT_CONTROL;<br><span class="hljs-built_in">GetThreadContext</span>(g_cpdi.hThread, &amp;ctx);<br><br><span class="hljs-comment">//读取WriteFile函数的第二个参数，即写入的缓冲区的地址</span><br><span class="hljs-built_in">ReadProcessMemory</span>(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="hljs-number">0x8</span>), &amp;dwAddrOfBuffer, <span class="hljs-built_in">sizeof</span>(DWORD), <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//读取WriteFile函数的第三个参数，即需要写入的字节数</span><br><span class="hljs-built_in">ReadProcessMemory</span>(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="hljs-number">0xc</span>), &amp;dwNumberOfBytesToWrite, <span class="hljs-built_in">sizeof</span>(DWORD), <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//分配空间，待写入数据</span><br>lpBuffer = (PBYTE)<span class="hljs-built_in">malloc</span>(dwNumberOfBytesToWrite + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">memset</span>(lpBuffer, <span class="hljs-number">0</span>, dwNumberOfBytesToWrite + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//将数据写入到临时缓冲区中</span><br><span class="hljs-built_in">ReadProcessMemory</span>(g_cpdi.hProcess, (PVOID)dwAddrOfBuffer, lpBuffer, dwNumberOfBytesToWrite, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n### original string : %s\n&quot;</span>, lpBuffer);<br><br><span class="hljs-comment">//将小写转化为大写字母</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; dwNumberOfBytesToWrite; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (lpBuffer[i] &gt;= <span class="hljs-number">0x61</span> &amp;&amp; lpBuffer[i] &lt;= <span class="hljs-number">0x7a</span>)<br>lpBuffer[i] -= <span class="hljs-number">0x20</span>;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n### converted string :%s\n&quot;</span>, lpBuffer);<br><span class="hljs-built_in">WriteProcessMemory</span>(g_cpdi.hProcess, (LPVOID)dwAddrOfBuffer, lpBuffer, dwNumberOfBytesToWrite, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">free</span>(lpBuffer);<br><span class="hljs-comment">//修改EIP指针为WriteFile函数，使得程序正常执行</span><br>ctx.Eip = (DWORD)g_pfWriteFile;<br><span class="hljs-built_in">SetThreadContext</span>(g_cpdi.hThread, &amp;ctx);<br><br><span class="hljs-comment">//运行被调试进程</span><br><span class="hljs-built_in">ContinueDebugEvent</span>(pde-&gt;dwProcessId, pde-&gt;dwThreadId, DBG_CONTINUE);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//继续下钩子</span><br><span class="hljs-built_in">WriteProcessMemory</span>(g_cpdi.hProcess, g_pfWriteFile, &amp;g_chINT3, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DebugLoop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>DEBUG_EVENT de;<span class="hljs-comment">//描述调试事件</span><br>DWORD dwContinueStatus;<br><br><span class="hljs-comment">//等待正在调试的进程中发生调试事件</span><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">WaitForDebugEvent</span>(&amp;de, INFINITE))<br>&#123;<br>dwContinueStatus = DBG_CONTINUE;<br><span class="hljs-comment">//被调试进程生产或者附加事件</span><br><span class="hljs-keyword">if</span> (de.dwDebugEventCode == CREATE_PROCESS_DEBUG_EVENT)<br>&#123;<br><span class="hljs-built_in">OnCreateProcessDebugEvent</span>(&amp;de);<br>&#125;<br><span class="hljs-comment">//异常事件,用于处理INT3指令</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (de.dwDebugEventCode == EXCEPTION_DEBUG_EVENT)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">OnExceptionDebugEvent</span>(&amp;de))<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">//被调试进程中止事件</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (EXIT_PROCESS_DEBUG_EVENT == de.dwDebugEventCode)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">ContinueDebugEvent</span>(de.dwProcessId, de.dwThreadId, dwContinueStatus);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwPID;<br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nUSAGE : hookdbg.exe pid\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>    <span class="hljs-comment">//输入进程号</span><br>dwPID = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">//使调试器能够附加到活动进程并对其进行调试。</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">DebugActiveProcess</span>(dwPID))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DebugActiveProcess(%d) failed!!!\n&quot;</span><br><span class="hljs-string">&quot;Error Code = %d\n&quot;</span>, dwPID, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">DebugLoop</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="计算器显示中文数字"><a href="#计算器显示中文数字" class="headerlink" title="计算器显示中文数字"></a>计算器显示中文数字</h1><p><strong>hookiat</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;wchar.h&gt;</span></span><br><br><span class="hljs-comment">//定义了一个布尔型的函数指针</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span><span class="hljs-params">(WINAPI* PFSETWINDOWTEXTW)</span><span class="hljs-params">(HWND hWnd, LPWSTR lpString)</span></span>;<br><br><span class="hljs-comment">//SetWindowTextW的地址</span><br>FARPROC g_pOrgFunc = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">MySetWindowTextW</span><span class="hljs-params">(HWND hWnd, LPWSTR lpString)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* pNum = <span class="hljs-string">L&quot;零一二三四五六七八九&quot;</span>;<br>    <span class="hljs-type">wchar_t</span> temp[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, nLen = <span class="hljs-number">0</span>, nIndex = <span class="hljs-number">0</span>;<br><br>    nLen = <span class="hljs-built_in">wcslen</span>(lpString);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nLen; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">L&#x27;0&#x27;</span> &lt;= lpString[i] &amp;&amp; lpString[i] &lt;= <span class="hljs-string">L&#x27;9&#x27;</span>)<br>        &#123;<br>            temp[<span class="hljs-number">0</span>] = lpString[i];<br>            nIndex = _wtoi(temp);<br>            lpString[i] = pNum[nIndex];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ((PFSETWINDOWTEXTW)g_pOrgFunc)(hWnd, lpString);<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">hook_iat</span><span class="hljs-params">(LPCSTR szDllName, PROC pfnOrg,PROC pfnNew)</span></span><br><span class="hljs-function"></span>&#123;<br>    HMODULE hMod;<br>    LPCSTR szLibName;<br>    PIMAGE_IMPORT_DESCRIPTOR pImportDesc;<span class="hljs-comment">//输入表</span><br>    PIMAGE_THUNK_DATA pThunk;<br>    DWORD dwOldProtect ,dwRVA;<br>    PBYTE pAddr;    <br><br>    hMod = <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//获取当前PE文件的地址</span><br>    pAddr = (PBYTE)hMod;<br>    <span class="hljs-comment">//在MS-DOS头部找到e_lfanew字段，该字段存放着PE文件头的偏移地址</span><br>    pAddr += *((DWORD*)&amp;pAddr[<span class="hljs-number">0x3c</span>]);<br><br>    <span class="hljs-comment">//相对于PE文件头偏移0x80存放着输入表的地址</span><br>    dwRVA = *((DWORD*)&amp;pAddr[<span class="hljs-number">0x80</span>]);<br><br>    pImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)hMod + dwRVA);<br><br>    <span class="hljs-comment">//遍历DLL的名称</span><br>    <span class="hljs-keyword">for</span> (; pImportDesc-&gt;Name; pImportDesc++)<br>    &#123;<br>        szLibName = (LPSTR)((DWORD)hMod + pImportDesc-&gt;Name);<br><br>        <span class="hljs-comment">//判断DLL名称是否为user32.dll</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">stricmp</span>(szLibName, szDllName))<br>        &#123;<br>            pThunk = (PIMAGE_THUNK_DATA)((DWORD)hMod + pImportDesc-&gt;FirstThunk);<br>            <span class="hljs-keyword">for</span> (; pThunk-&gt;u1.Function; pThunk++)<br>            &#123;<br>                <span class="hljs-comment">//判断函数地址是否为setWindowText函数地址</span><br>                <span class="hljs-keyword">if</span> (pThunk-&gt;u1.Function == (DWORD)pfnOrg)<br>                &#123;<br>                    <span class="hljs-comment">//将内存空间权限修改为可读可写</span><br>                    <span class="hljs-built_in">VirtualProtect</span>((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="hljs-number">4</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);<br>                    <span class="hljs-comment">//修改IAT表内的地址</span><br>                    pThunk-&gt;u1.Function = (DWORD)pfnNew;<br>                    <span class="hljs-comment">//将内存权限修改回来</span><br>                    <span class="hljs-built_in">VirtualProtect</span>((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="hljs-number">4</span>, dwOldProtect, &amp;dwOldProtect); <br>                    <span class="hljs-keyword">return</span> TRUE;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> FALSE;<br><br>&#125;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        g_pOrgFunc = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">GetModuleHandleA</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;SetWindowTextW&quot;</span>);<br>        <span class="hljs-built_in">hook_iat</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>, g_pOrgFunc, (PROC)MySetWindowTextW);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>            <span class="hljs-keyword">break</span>;                 <span class="hljs-comment">//break需要添加否则无法更换IAT地址</span><br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>            <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-built_in">hook_iat</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>, (PROC)MySetWindowTextW,g_pOrgFunc);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="进程隐藏"><a href="#进程隐藏" class="headerlink" title="进程隐藏"></a>进程隐藏</h1><p>通过修改<code>API</code>代码实现<code>API</code>钩取的技术。库文件被加载到内存后，在其目录映像中直接修改要钩取的<code>API</code>代码本身。</p><p>用户模式下检测进程的相关<code>API</code>通常分为两种</p><ul><li><code>CreateToolhelp32Snapshot()</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//通过获取进程信息为指定的进程、进程使用的堆[HEAP]、模块[MODULE]、线程建立一个快照</span><br><span class="hljs-function">HANDLE WINAPI <span class="hljs-title">CreateToolhelp32Snapshot</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD dwFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD th32ProcessID</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>EnumProcess()</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//检索系统中每个进程对象的进程标识符</span><br><span class="hljs-built_in">EnumProcesses</span>(<br>DWORD* pProcessIds, <span class="hljs-comment">//指向接收进程标识符列表的数组的指针</span><br>DWORD cb, <span class="hljs-comment">//pProcessIds数组的大小</span><br>DWORD* pBytesReturned <span class="hljs-comment">//pProcessIds数组中返回的字节数</span><br>);<br></code></pre></td></tr></table></figure><p>上述两种<code>API</code>都在内部调用了<code>ntdll.ZwQuerySystemInformation() API</code></p><ul><li><code>ZwQuerySystemInformation()</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//检索指定的系统信息</span><br><span class="hljs-function">NTSTATUS WINAPI <span class="hljs-title">ZwQuerySystemInformation</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_      SYSTEM_INFORMATION_CLASS SystemInformationClass,<span class="hljs-comment">//要检索的系统信息的类型</span></span></span><br><span class="hljs-params"><span class="hljs-function">  _Inout_   PVOID                    SystemInformation,<span class="hljs-comment">//指向接收请求信息的缓冲区的指针</span></span></span><br><span class="hljs-params"><span class="hljs-function">  _In_      ULONG                    SystemInformationLength,<span class="hljs-comment">//参数指向的缓冲区的大小</span></span></span><br><span class="hljs-params"><span class="hljs-function">  _Out_opt_ PULONG                   ReturnLength<span class="hljs-comment">//指向函数写入请求信息的实际大小的位置的可选指针</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><code>ProcExp.exe</code>:进程查看器</p><p><code>taskmgr.exe</code>:任务管理器</p><p>通过钩取上述两个进程可以将目标进程进行隐藏，但是该钩取方法存在缺陷：</p><ol><li>检索进程的工具不仅仅是上述两个进程</li><li>若用户再次开启一个<code>ProcExp.exe</code>或者<code>taskmgr.exe</code>，则旧的<code>ProcExp.exe</code>或者<code>taskmgr.exe</code>被钩取可以达到隐藏进程的效果，但是新的<code>ProcExp.exe</code>或者<code>taskmgr.exe</code>未被钩取因此无法隐藏。</li></ol><p>解决方法：全局钩取</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向工程核心原理--DLL注入</title>
    <link href="/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--DLL%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/06/07/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86--DLL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="键盘消息钩取"><a href="#键盘消息钩取" class="headerlink" title="键盘消息钩取"></a>键盘消息钩取</h1><p>键盘消息钩取的过程如下图，使用<code>SetWindowsHookEx</code>函数设置好钩子后，操作系统回将相关的<code>DLL</code>文件强制注入相应进程中。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220124195922432.png" alt="image-20220124195922432"></p><h2 id="KeyHook"><a href="#KeyHook" class="headerlink" title="KeyHook"></a><strong>KeyHook</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_PROCESS_NAME <span class="hljs-string">&quot;notepad.exe&quot;</span></span><br><br>HINSTANCE g_hInstance = <span class="hljs-literal">NULL</span>;<br>HHOOK g_hHook = <span class="hljs-literal">NULL</span>;<br>HWND g_hWnd = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        g_hInstance = hModule;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">LRESULT为长整形指针</span><br><span class="hljs-comment">每当需要处理键盘消息时就会调用此函数</span><br><span class="hljs-comment">参数一：nCode,如果code小于零，则挂钩过程必须将消息传递给CallNextHookEx函数而不进行进一步处理，并且应该返回CallNextHookEx返回的值。</span><br><span class="hljs-comment">参数二：wParam，生成击键消息的虚拟键代码</span><br><span class="hljs-comment">参数三：当第31位为0时则按键被按下，当为1时表示按键释放</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">KeyboardProc</span><span class="hljs-params">(<span class="hljs-type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-type">char</span>* p = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (nCode == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">if</span> (!(lParam &amp; <span class="hljs-number">0x80000000</span>))<br>        &#123;<br>            <span class="hljs-built_in">GetModuleFileNameA</span>(<span class="hljs-literal">NULL</span>, szPath, MAX_PATH);<br>            p = <span class="hljs-built_in">strrchr</span>(szPath, <span class="hljs-string">&#x27;\\&#x27;</span>);<br><br>            <span class="hljs-keyword">if</span> (!_stricmp(p + <span class="hljs-number">1</span>, DEF_PROCESS_NAME))<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回到钩链中的下一个函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(g_hHook, nCode, wParam, lParam);<br><br>&#125;<br><br><span class="hljs-comment">//判断是否使用c++编写</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-comment">//使用与C语言一致的编译过程</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    __declspec(dllexport)将DLL中的函数导出给其他应用程序使用</span><br><span class="hljs-comment">    */</span><br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookStart</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        g_hHook = <span class="hljs-built_in">SetWindowsHookEx</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="hljs-number">0</span>);<br>    &#125;<br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HookStop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (g_hHook)<br>        &#123;<br>            <span class="hljs-built_in">UnhookWindowsHookEx</span>(g_hHook);<br>            g_hHook = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//  __cplusplus</span></span><br></code></pre></td></tr></table></figure><h2 id="HookMain"><a href="#HookMain" class="headerlink" title="HookMain"></a>HookMain</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;conio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_DLL_NAME <span class="hljs-string">&quot;KeyHook.dll&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_HOOKSTART <span class="hljs-string">&quot;HookStart&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_HOOKSTOP <span class="hljs-string">&quot;HookStop&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*PFN_HOOKSTART)</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*PFN_HOOKSTOP)</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>PFN_HOOKSTART HookStart = <span class="hljs-literal">NULL</span>;<br>PFN_HOOKSTOP HookStop = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">char</span> ch = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//加载KeyHook.dll</span><br>hDll = <span class="hljs-built_in">LoadLibraryA</span>(DEF_DLL_NAME);<br>    <br>    <span class="hljs-comment">//获取开始Hook的函数地址</span><br>HookStart = (PFN_HOOKSTART)<span class="hljs-built_in">GetProcAddress</span>(hDll, DEF_HOOKSTART);<br>    <span class="hljs-comment">//获取停止Hook的函数地址</span><br>HookStop = (PFN_HOOKSTOP)<span class="hljs-built_in">GetProcAddress</span>(hDll, DEF_HOOKSTOP);<br><br>    <span class="hljs-comment">//Hook开始</span><br><span class="hljs-built_in">HookStart</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;press &#x27;q&#x27; to quit!\n&quot;</span>);<br><span class="hljs-keyword">while</span> (_getch() != <span class="hljs-string">&#x27;q&#x27;</span>);<br>    <span class="hljs-comment">//Hook停止</span><br><span class="hljs-built_in">HookStop</span>();<br>    <br>    <span class="hljs-comment">//卸载DLL</span><br><span class="hljs-built_in">FreeLibrary</span>(hDll);<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h1><p><code>DLL</code>注入指的是向运行中的其他进程强制插入特定的<code>DLL</code>文件。</p><h2 id="DLL注入的实现方法"><a href="#DLL注入的实现方法" class="headerlink" title="DLL注入的实现方法"></a>DLL注入的实现方法</h2><ul><li><p>创建远程线程(<code>CreateRemoteThread()API</code>)</p></li><li><p>使用注册表(<code>AppInit_DLLs</code>值)</p></li><li><p>消息钩取(<code>SetWindowsHookEx()API</code>)</p></li></ul><h3 id="创建远程线程"><a href="#创建远程线程" class="headerlink" title="创建远程线程"></a>创建远程线程</h3><h4 id="InjectDll"><a href="#InjectDll" class="headerlink" title="InjectDll"></a>InjectDll</h4><p><code>InjectDll</code>需要传入需要注入的进程号，在该进程的空间内开辟一段区域用于创建线程运行<code>LoadLibrary()</code>方法载入<code>DLL</code>文件，从而达到<code>DLL</code>注入的目的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;tchar.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* LPCTSTR含义</span><br><span class="hljs-comment">* L代表long长整型</span><br><span class="hljs-comment">* P代表指针</span><br><span class="hljs-comment">* C代表不可改变</span><br><span class="hljs-comment">* T代表char，若定义了UNICODE则代表wchar_t</span><br><span class="hljs-comment">* STR代表字符串</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">InjectDll</span><span class="hljs-params">(DWORD dwPID, LPCTSTR szDllPath)</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE hProcess = <span class="hljs-literal">NULL</span>, hThread = <span class="hljs-literal">NULL</span>;<br>HMODULE hMod = <span class="hljs-literal">NULL</span>;<br>LPVOID pRemoteBuf = <span class="hljs-literal">NULL</span>;<br>DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="hljs-number">1</span>) * <span class="hljs-built_in">sizeof</span>(TCHAR);<br><br><span class="hljs-comment">//函数指针</span><br>LPTHREAD_START_ROUTINE pThreadProc;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*打开现有的本地进程对象</span><br><span class="hljs-comment">*   HANDLE OpenProcess(</span><br><span class="hljs-comment">*[in] DWORD dwDesiredAccess,对进程对象访问的权限 PROCESS_ALL_ACCESS即所有权限</span><br><span class="hljs-comment">*[in] BOOL  bInheritHandle,进程是否继承句柄，FALSE为否</span><br><span class="hljs-comment">*[in] DWORD dwProcessId，进程号</span><br><span class="hljs-comment">*返回值，打开进程的句柄</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (!(hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;OpenProcess(%d) failed!!! [%d]\n&quot;</span>, dwPID, GetLastError);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 在指定进程的虚拟地址空间内保留、提交或更改内存区域的状态。</span><br><span class="hljs-comment">*LPVOID VirtualAllocEx(</span><br><span class="hljs-comment">*[in]           HANDLE hProcess,进程句柄，该函数在该进程的虚拟地址空间内分配内存</span><br><span class="hljs-comment">*[in, optional] LPVOID lpAddress,为要分配的页面区域指定所需起始地址的指针</span><br><span class="hljs-comment">*[in]           SIZE_T dwSize,要分配的内存区域的大小，以字节为单位</span><br><span class="hljs-comment">*[in]           DWORD  flAllocationType,内存分配的类型，MEM_COMMIT为指定的保留内存页面分配内存费用</span><br><span class="hljs-comment">*[in]           DWORD  flProtect,要分配的页面区域的内存保护,PAGE_READWRITE,启用对已提交页面区域的执行、只读或读/写访问。</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">* 返回值，如果函数成功，则返回值非零。如果函数失败，则返回值为 0（零）</span><br><span class="hljs-comment">*/</span><br>pRemoteBuf = <span class="hljs-built_in">VirtualAllocEx</span>(hProcess, <span class="hljs-literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 将数据写入指定进程中的内存区域。要写入的整个区域必须可访问，否则操作将失败。</span><br><span class="hljs-comment">* BOOL WriteProcessMemory(</span><br><span class="hljs-comment">*[in]  HANDLE  hProcess,要修改的进程内存的句柄,句柄必须具有对进程的 PROCESS_VM_WRITE 和 PROCESS_VM_OPERATION 访问权限。</span><br><span class="hljs-comment">*[in]  LPVOID  lpBaseAddress,指向要写入数据的指定进程中的起始地址</span><br><span class="hljs-comment">*[in]  LPCVOID lpBuffer,指向缓冲区的指针，该缓冲区包含要写入指定进程地址空间的数据</span><br><span class="hljs-comment">*[in]  SIZE_T  nSize,要写入指定进程的字节数</span><br><span class="hljs-comment">*[out] SIZE_T  *lpNumberOfBytesWritten，指向变量的指针，该变量接收传输到指定进程的字节数，NULL则忽略该参数</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">WriteProcessMemory</span>(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, <span class="hljs-literal">NULL</span>);<br><br>hMod = <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>);<br>pThreadProc = (LPTHREAD_START_ROUTINE)<span class="hljs-built_in">GetProcAddress</span>(hMod, <span class="hljs-string">&quot;LoadLibraryW&quot;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 创建在另一个进程的虚拟地址空间中运行的线程</span><br><span class="hljs-comment">* HANDLE CreateRemoteThread(</span><br><span class="hljs-comment">*[in]  HANDLE                 hProcess,要在其中创建线程的进程的句柄</span><br><span class="hljs-comment">*[in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,指向 SECURITY_ATTRIBUTES结构的指针，该结构指定新线程的安全描述符并确定子进程是否可以继承返回的句柄</span><br><span class="hljs-comment">*[in]  SIZE_T                 dwStackSize,堆栈的初始大小，以字节为单位</span><br><span class="hljs-comment">*[in]  LPTHREAD_START_ROUTINE lpStartAddress,指向要由线程执行的LPTHREAD_START_ROUTINE 类型的应用程序定义函数的指针</span><br><span class="hljs-comment">*[in]  LPVOID                 lpParameter,指向要传递给线程函数的变量的指针</span><br><span class="hljs-comment">*[in]  DWORD                  dwCreationFlags,控制线程创建的标志,0表示线程在创建后立即运行</span><br><span class="hljs-comment">*[out] LPDWORD                lpThreadId，指向接收线程标识符的变量的指针</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*   如果函数成功，则返回值是新线程的句柄</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*创建线程执行LoadLibraryW(DllPath)*/</span><br>hThread = <span class="hljs-built_in">CreateRemoteThread</span>(<br>hProcess,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-number">0</span>,<br>pThreadProc,<br>pRemoteBuf,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span><br>);<br><br><span class="hljs-comment">/*等到线程执行操作*/</span><br><span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE);<br><br><span class="hljs-built_in">CloseHandle</span>(hThread);<br><span class="hljs-built_in">CloseHandle</span>(hProcess);<br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, TCHAR* argv[])<br>&#123;<br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;USAG : %s pid dll_path\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">InjectDll</span>((DWORD)_tstol(argv[<span class="hljs-number">1</span>]), argv[<span class="hljs-number">2</span>]))<br>_tprintf(<span class="hljs-string">L&quot;InjectDll(\&quot;s\&quot;) success!!!\n&quot;</span>, argv[<span class="hljs-number">2</span>]);<br><span class="hljs-keyword">else</span><br>_tprintf(<span class="hljs-string">L&quot;InjectDll(\&quot;%s\&quot;) failed!!!\n&quot;</span>, argv[<span class="hljs-number">2</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="myhack"><a href="#myhack" class="headerlink" title="myhack"></a>myhack</h4><p>当<code>myhack.dll</code>文件被注入时会在<code>dll</code>文件的目录下通过<code>URLDownloadToFile</code>方法下载指定页面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tchar.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;urlmon.h&gt;</span></span><br><br><span class="hljs-comment">//这条语句必须加上否则调用URLDownloadToFile方法会报错</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;urlmon.lib&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_URL (<span class="hljs-string">L&quot;https://www.baidu.com&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_FILE_NAME (<span class="hljs-string">L&quot;index.html&quot;</span>)</span><br><br>HMODULE g_hMod = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc</span><span class="hljs-params">(LPVOID lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    TCHAR szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetModuleFileName</span>(g_hMod, szPath, MAX_PATH))<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    TCHAR* p = _tcsrchr(szPath, <span class="hljs-string">&#x27;\\&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (!p)<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    _tcscpy_s(p + <span class="hljs-number">1</span>, MAX_PATH, DEF_FILE_NAME);<br>    <span class="hljs-built_in">URLDownloadToFile</span>(<span class="hljs-literal">NULL</span>,DEF_URL,szPath,<span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hThread = <span class="hljs-literal">NULL</span>;<br>    g_hMod = hModule;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;myhack.dll Injection!!!&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * HANDLE CreateThread(</span><br><span class="hljs-comment">          [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,是否能被子进程继承，NULL为不能</span><br><span class="hljs-comment">          [in]            SIZE_T                  dwStackSize,初始堆栈大小，0表示默认值</span><br><span class="hljs-comment">          [in]            LPTHREAD_START_ROUTINE  lpStartAddress,由线程执行的函数的指针</span><br><span class="hljs-comment">          [in, optional]  __drv_aliasesMem LPVOID lpParameter,要传递给线程的变量的指针</span><br><span class="hljs-comment">          [in]            DWORD                   dwCreationFlags,控制线程创建的标志，0代表线程在创建后立即执行</span><br><span class="hljs-comment">          [out, optional] LPDWORD                 lpThreadId，指向接收线程标识符的变量的指针。NULL则不返回线程标识符</span><br><span class="hljs-comment">          );</span><br><span class="hljs-comment">        */</span><br>        hThread = <span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProc, <span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">CloseHandle</span>(hThread);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用注册表"><a href="#使用注册表" class="headerlink" title="使用注册表"></a>使用注册表</h3><p><code>Windows</code>操作系统的注册表中默认提供了<code>AppInt_DLLs</code>与<code>LoadAppInit_DLLs</code>两个注册表项。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220127143759703.png" alt="image-20220127143759703"></p><h4 id="myhack2"><a href="#myhack2" class="headerlink" title="myhack2"></a>myhack2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;tchar.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_CMD <span class="hljs-string">L&quot;&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_ADDR <span class="hljs-string">L&quot;https://www.baidu.com&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_DST_PROC <span class="hljs-string">L&quot;notepad.exe&quot;</span></span><br><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    TCHAR szCmd[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    TCHAR szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    TCHAR* p = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//指定创建时进程的主窗口的窗口站、桌面、标准句柄和外观</span><br>    STARTUPINFO si = &#123; <span class="hljs-number">0</span>, &#125;;<br><br>    <span class="hljs-comment">//包含有关新创建的进程及其主线程的信息</span><br>    PROCESS_INFORMATION pi = &#123; <span class="hljs-number">0</span>, &#125;;<br><br>    si.cb = <span class="hljs-built_in">sizeof</span>(STARTUPINFO); <span class="hljs-comment">//结构的大小，以字节为单位</span><br>    si.dwFlags = STARTF_USESHOWWINDOW; <span class="hljs-comment">//一个位域，用于确定进程创建窗口时是否使用某些 STARTUPINFO成员,STARTF_USESHOWWINDOW,wShowWindow成员包含附加信息</span><br>    si.wShowWindow = SW_HIDE;<span class="hljs-comment">//隐藏窗口并激活另一个窗口。</span><br><br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetModuleFileName</span>(<span class="hljs-literal">NULL</span>, szPath, MAX_PATH))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (!(p = _tcsrchr(szPath, <span class="hljs-string">&#x27;\\&#x27;</span>)))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (_tcsicmp(p + <span class="hljs-number">1</span>, DEF_DST_PROC))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">wsprintf</span>(szCmd, <span class="hljs-string">L&quot;%s %s&quot;</span>, DEF_CMD,DEF_ADDR); <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 创建一个新进程及其主线程</span><br><span class="hljs-comment">        * BOOL CreateProcessA(</span><br><span class="hljs-comment">        *  [in, optional]      LPCSTR                lpApplicationName, 要执行的模块的名称。lpApplicationName参数可以是NULL。在这种情况下，模块名称必须是lpCommandLine字符串中第一个以空格分隔的标记。</span><br><span class="hljs-comment">        *  [in, out, optional] LPSTR                 lpCommandLine,要执行的命令行。</span><br><span class="hljs-comment">        *    [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,指向 SECURITY_ATTRIBUTES结构的指针，该结构确定返回的新进程对象的句柄是否可以被子进程继承。如果lpProcessAttributes为NULL，则不能继承句柄。</span><br><span class="hljs-comment">        *    [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,指向 SECURITY_ATTRIBUTES结构的指针，该结构确定返回的新线程对象的句柄是否可以被子进程继承。如果lpThreadAttributes为 NULL，则不能继承句柄。</span><br><span class="hljs-comment">        *    [in]                BOOL                  bInheritHandles,如果此参数为 TRUE，则调用进程中的每个可继承句柄都由新进程继承。如果参数为 FALSE，则不继承句柄</span><br><span class="hljs-comment">        *    [in]                DWORD                 dwCreationFlags,控制优先级和进程创建的标志</span><br><span class="hljs-comment">        *    [in, optional]      LPVOID                lpEnvironment,指向新进程的环境块的指针。如果此参数为NULL，则新进程使用调用进程的环境。</span><br><span class="hljs-comment">        *    [in, optional]      LPCSTR                lpCurrentDirectory,进程当前目录的完整路径</span><br><span class="hljs-comment">        *    [in]                LPSTARTUPINFOA        lpStartupInfo,指向 STARTUPINFO或STARTUPINFOEX结构的指针</span><br><span class="hljs-comment">        *    [out]               LPPROCESS_INFORMATION lpProcessInformation,指向 PROCESS_INFORMATION结构的指针，该结构接收有关新进程的标识信息</span><br><span class="hljs-comment">        * );</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-comment">/*创建一个进程执行cmd的命令*/</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CreateProcess</span>(<span class="hljs-literal">NULL</span>, (LPTSTR)(LPCTSTR)szCmd,<br>            <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE,<br>            NORMAL_PRIORITY_CLASS, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi))<br>            <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消息钩取"><a href="#消息钩取" class="headerlink" title="消息钩取"></a>消息钩取</h3><ul><li><code>SetWindowsHookEx()</code>方法，示例如键盘消息钩取。</li></ul><h1 id="DLL卸载"><a href="#DLL卸载" class="headerlink" title="DLL卸载"></a>DLL卸载</h1><p>DLL卸载（DLL Ejection）是将强制插入进程的<code>DLL</code>弹出的一种技术。</p><h2 id="EjectDll"><a href="#EjectDll" class="headerlink" title="EjectDll"></a>EjectDll</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;TlHelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;tchar.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_PROC_NAME (<span class="hljs-string">L&quot;notepad.exe&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_DLL_NAME (<span class="hljs-string">L&quot;myhack.dll&quot;</span>)</span><br><br><span class="hljs-function">DWORD <span class="hljs-title">FindProcessID</span><span class="hljs-params">(LPCTSTR szProcessName)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwPID = <span class="hljs-number">0xFFFFFFFF</span>;<br>HANDLE hSnapShot = INVALID_HANDLE_VALUE;<br><span class="hljs-comment">//需要导入tlhelp32.h</span><br><span class="hljs-comment">//描述拍摄快照时驻留在系统地址空间中的进程列表中的条目</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* typedef struct tagPROCESSENTRY32 &#123;</span><br><span class="hljs-comment">*DWORD     dwSize; 结构的大小，以字节为单位</span><br><span class="hljs-comment">*DWORD     cntUsage;该成员不再使用，并且始终设置为零</span><br><span class="hljs-comment">*DWORD     th32ProcessID;进程标识符</span><br><span class="hljs-comment">*ULONG_PTR th32DefaultHeapID;该成员不再使用，并且始终设置为零</span><br><span class="hljs-comment">*DWORD     th32ModuleID;该成员不再使用，并且始终设置为零</span><br><span class="hljs-comment">*DWORD     cntThreads;进程启动的执行线程数</span><br><span class="hljs-comment">*DWORD     th32ParentProcessID;创建此进程的进程的标识符（其父进程）</span><br><span class="hljs-comment">*LONG      pcPriClassBase;此进程创建的任何线程的基本优先级</span><br><span class="hljs-comment">*DWORD     dwFlags;该成员不再使用，并且始终设置为零</span><br><span class="hljs-comment">*CHAR      szExeFile[MAX_PATH];进程的可执行文件的名称</span><br><span class="hljs-comment">*&#125; PROCESSENTRY32;</span><br><span class="hljs-comment">*/</span><br>PROCESSENTRY32 pe;<br><br><span class="hljs-comment">//获取系统快照</span><br>pe.dwSize = <span class="hljs-built_in">sizeof</span>(PROCESSENTRY32);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 拍摄指定进程的快照，以及这些进程使用的堆、模块和线程</span><br><span class="hljs-comment">* HANDLE CreateToolhelp32Snapshot(</span><br><span class="hljs-comment">*[in] DWORD dwFlags, 要包含在快照中的系统部分,TH32CS_SNAPALL包括系统中的所有进程和线程，以及th32ProcessID中指定的进程的堆和模块</span><br><span class="hljs-comment">*[in] DWORD th32ProcessID,要包含在快照中的进程的进程标识符。此参数可以为零以指示当前进程</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//将所有进程保存在hSnapShot</span><br>hSnapShot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPALL, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//查找进程</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 检索有关系统快照中遇到的第一个进程的信息。</span><br><span class="hljs-comment">* BOOL Process32First(</span><br><span class="hljs-comment">*[in]      HANDLE           hSnapshot,从先前调用CreateToolhelp32Snapshot函数返回的快照句柄</span><br><span class="hljs-comment">*[in, out] LPPROCESSENTRY32 lppe,指向 PROCESSENTRY32结构的指针</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">Process32First</span>(hSnapShot, &amp;pe);<br><br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-comment">//pe.szExeFile 进程的可执行文件的名称</span><br><span class="hljs-keyword">if</span> (!_tcsicmp(szProcessName, (LPCTSTR)pe.szExeFile))<br>&#123;<br>dwPID = pe.th32ProcessID;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32Next</span>(hSnapShot, &amp;pe));<br><br><span class="hljs-built_in">CloseHandle</span>(hSnapShot);<br><br><span class="hljs-keyword">return</span> dwPID;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">SetPrivilege</span><span class="hljs-params">(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* TOKEN_PRIVILEGES结构包含有关访问令牌的一组权限的信息</span><br><span class="hljs-comment">* typedef struct _TOKEN_PRIVILEGES &#123;</span><br><span class="hljs-comment">*DWORD               PrivilegeCount;  Privileges数组中的条目数</span><br><span class="hljs-comment">*LUID_AND_ATTRIBUTES Privileges[ANYSIZE_ARRAY];指定LUID_AND_ATTRIBUTES结构的数组 。每个结构都包含一个特权的 LUID和属性</span><br><span class="hljs-comment">*&#125; TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;</span><br><span class="hljs-comment">*/</span><br>TOKEN_PRIVILEGES tp;<br>HANDLE hToken;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 描述适配器的本地标识符</span><br><span class="hljs-comment">* typedef struct _LUID &#123;</span><br><span class="hljs-comment">*DWORD LowPart; 指定一个包含 id 的无符号小数的 DWORD。</span><br><span class="hljs-comment">* LONG  HighPart;指定一个包含 id 的带符号高数的 LONG。</span><br><span class="hljs-comment">*&#125; LUID, *PLUID;</span><br><span class="hljs-comment">*/</span><br>LUID luid;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* OpenProcessToken函数打开与进程关联的访问令牌</span><br><span class="hljs-comment">* BOOL OpenProcessToken(</span><br><span class="hljs-comment">*[in]  HANDLE  ProcessHandle,打开其访问令牌的进程的句柄。该进程必须具有 PROCESS_QUERY_INFORMATION 访问权限</span><br><span class="hljs-comment">*[in]  DWORD   DesiredAccess,指定一个访问掩码，该掩码指定对访问令牌的请求访问类型</span><br><span class="hljs-comment">*[out] PHANDLE TokenHandle,指向句柄的指针，该句柄在函数返回时标识新打开的访问令牌</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* 检索当前进程的伪句柄。</span><br><span class="hljs-comment">* HANDLE GetCurrentProcess();</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(),<br>TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;OpenProcessToken error: %u\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* LookupPrivilegeValue函数检索指定系统上使用的本地唯一标识符 (LUID)，以在本地表示指定的特权名称</span><br><span class="hljs-comment">* BOOL LookupPrivilegeValueA(</span><br><span class="hljs-comment">*[in, optional] LPCSTR lpSystemName,指向以空字符结尾的字符串的指针，该字符串指定在其上检索特权名称的系统名称。如果指定了空字符串，该函数将尝试在本地系统上查找权限名称。</span><br><span class="hljs-comment">*[in]           LPCSTR lpName,指向以 null 结尾的字符串的指针，该字符串指定权限的名称</span><br><span class="hljs-comment">*[out]          PLUID  lpLuid,一个指向变量的指针，该变量接收由lpSystemName参数指定的系统上的权限已知的 LUID</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, lpszPrivilege, &amp;luid))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;LookupPrivilegeValue error: %u\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>tp.PrivilegeCount = <span class="hljs-number">1</span>;<br>tp.Privileges[<span class="hljs-number">0</span>].Luid = luid;<br><span class="hljs-keyword">if</span> (bEnablePrivilege)<br>tp.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><span class="hljs-keyword">else</span><br>tp.Privileges[<span class="hljs-number">0</span>].Attributes = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* AdjustTokenPrivileges函数启用或禁用指定访问令牌中的权限</span><br><span class="hljs-comment">* BOOL AdjustTokenPrivileges(</span><br><span class="hljs-comment">*[in]            HANDLE            TokenHandle,包含要修改的权限的访问令牌的句柄</span><br><span class="hljs-comment">*[in]            BOOL              DisableAllPrivileges,指定函数是否禁用所有令牌的权限。如果此值为TRUE，该函数将禁用所有权限并忽略NewState参数。如果为FALSE ，则函数根据NewState参数指向的信息修改权限</span><br><span class="hljs-comment">*[in, optional]  PTOKEN_PRIVILEGES NewState,指向 TOKEN_PRIVILEGES结构的指针，该结构指定特权数组及其属性</span><br><span class="hljs-comment">*[in]            DWORD             BufferLength,指定PreviousState参数指向的缓冲区的大小（以字节为单位）</span><br><span class="hljs-comment">*[out, optional] PTOKEN_PRIVILEGES PreviousState,一个指向缓冲区的指针，函数用TOKEN_PRIVILEGES结构填充该结构，该结构包含函数修改的任何特权的先前状态</span><br><span class="hljs-comment">*[out, optional] PDWORD            ReturnLength,指向变量的指针，该变量接收由PreviousState参数指向的缓冲区的所需大小（以字节为单位）,如果PreviousState为NULL ，则此参数可以为NULL。</span><br><span class="hljs-comment">*);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">AdjustTokenPrivileges</span>(hToken,<br>FALSE,<br>&amp;tp,<br><span class="hljs-built_in">sizeof</span>(TOKEN_PRIVILEGES),<br>(PTOKEN_PRIVILEGES)<span class="hljs-literal">NULL</span>,<br>(PDWORD)<span class="hljs-literal">NULL</span>))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;AdjustTokenPrivileges error: %u\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetLastError</span>() == ERROR_NOT_ALL_ASSIGNED)<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;The token does not have the specified privilege.\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">EjectDll</span><span class="hljs-params">(DWORD dwPID, LPCTSTR szDllName)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL bMore = FALSE, bFound = FALSE;<br>HANDLE hSnapshot, hProcess, hThread;<br>HMODULE hModule = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 描述属于指定进程的模块列表中的条目</span><br><span class="hljs-comment">* typedef struct tagMODULEENTRY32 &#123;</span><br><span class="hljs-comment">*DWORD   dwSize;结构的大小，以字节为单位</span><br><span class="hljs-comment">*DWORD   th32ModuleID;该成员不再使用，并且始终设置为 1</span><br><span class="hljs-comment">*DWORD   th32ProcessID;要检查其模块的进程的标识符</span><br><span class="hljs-comment">*DWORD   GlblcntUsage;模块的加载计数，一般没有意义，通常等于 0xFFFF</span><br><span class="hljs-comment">*DWORD   ProccntUsage;模块的加载计数（与GlblcntUsage相同），通常没有意义，通常等于 0xFFFF</span><br><span class="hljs-comment">*BYTE    *modBaseAddr;拥有进程上下文中模块的基地址</span><br><span class="hljs-comment">*DWORD   modBaseSize;模块的大小，以字节为单位</span><br><span class="hljs-comment">*HMODULE hModule;拥有进程上下文中的模块句柄</span><br><span class="hljs-comment">*char    szModule[MAX_MODULE_NAME32 + 1];模块名称</span><br><span class="hljs-comment">*char    szExePath[MAX_PATH];模块路径</span><br><span class="hljs-comment">*&#125; MODULEENTRY32;</span><br><span class="hljs-comment">*/</span><br>MODULEENTRY32 me = &#123; <span class="hljs-built_in">sizeof</span>(me) &#125;;<br><br>LPTHREAD_START_ROUTINE pThreadProc;<br><br>hSnapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPMODULE, dwPID);<br><br>bMore = <span class="hljs-built_in">Module32First</span>(hSnapshot, &amp;me);<br><span class="hljs-keyword">for</span> (; bMore; bMore = <span class="hljs-built_in">Module32Next</span>(hSnapshot, &amp;me))<br>&#123;<br><span class="hljs-keyword">if</span> (!_tcsicmp((LPCTSTR)me.szModule, szDllName) ||<br>!_tcsicmp((LPCTSTR)me.szExePath, szDllName))<br>&#123;<br>bFound = TRUE;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!bFound)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(hSnapshot);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!(hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;OpenProcess(%d) failed!!! [%d]\n&quot;</span>, dwPID, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>hModule = <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>);<br>pThreadProc = (LPTHREAD_START_ROUTINE)<span class="hljs-built_in">GetProcAddress</span>(hModule, <span class="hljs-string">&quot;FreeLibrary&quot;</span>);<br><br>hThread = <span class="hljs-built_in">CreateRemoteThread</span>(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, pThreadProc, me.modBaseAddr, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE);<br><br><span class="hljs-built_in">CloseHandle</span>(hThread);<br><span class="hljs-built_in">CloseHandle</span>(hProcess);<br><span class="hljs-built_in">CloseHandle</span>(hSnapshot);<br>&#125;<br><br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, TCHAR* argv[])<br>&#123;<br>DWORD dwPID = <span class="hljs-number">0xFFFFFFFF</span>;<br><br>dwPID = <span class="hljs-built_in">FindProcessID</span>(DEF_PROC_NAME);<br><span class="hljs-keyword">if</span> (dwPID == <span class="hljs-number">0xFFFFFFFF</span>)<br>&#123;<br>_tprintf(<span class="hljs-string">L&quot;There is no %s process!\n&quot;</span>, DEF_PROC_NAME);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>_tprintf(<span class="hljs-string">L&quot;PID of \&quot;%s\&quot; is %d \n&quot;</span>, DEF_PROC_NAME, dwPID);<br><br><span class="hljs-comment">//将进程的权限改为调试</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SetPrivilege</span>(SE_DEBUG_NAME, TRUE))<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//将myhack.dll卸载</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">EjectDll</span>(dwPID, DEF_DLL_NAME))<br>_tprintf(<span class="hljs-string">L&quot;EjectDll(%d, \&quot;%s\&quot;) success!!!\n&quot;</span>, dwPID, DEF_DLL_NAME);<br><span class="hljs-keyword">else</span><br>_tprintf(<span class="hljs-string">L&quot;EjectDll(%d, \&quot;%s\&quot;) failed!!!\n&quot;</span>, dwPID, DEF_DLL_NAME);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="通过修改PE加载DLL"><a href="#通过修改PE加载DLL" class="headerlink" title="通过修改PE加载DLL"></a>通过修改PE加载DLL</h1><h2 id="myhack3"><a href="#myhack3" class="headerlink" title="myhack3"></a>myhack3</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ShlObj.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;WinInet.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;Wininet.lib&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_BUF_SIZE (4096)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_URL <span class="hljs-string">L&quot;https://www.baidu.com&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEF_INDEX_FILE <span class="hljs-string">L&quot;index.html&quot;</span></span><br><br>HWND g_hWnd = <span class="hljs-literal">NULL</span>;<br><span class="hljs-function">BOOL <span class="hljs-title">DownloadURL</span><span class="hljs-params">(LPCTSTR szURL, LPCTSTR szFile)</span></span><br><span class="hljs-function"></span>&#123;<br>    BOOL bRet = FALSE;<br>    <span class="hljs-comment">//需要导入wininet.h</span><br>    <span class="hljs-comment">//typedef LPVOID HINTERNET;</span><br>    HINTERNET hInternet = <span class="hljs-literal">NULL</span>, hURL = <span class="hljs-literal">NULL</span>;<br>    BYTE pBuf[DEF_BUF_SIZE] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    DWORD dwBytesRead = <span class="hljs-number">0</span>;<br>    FILE* pFile = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//typedef int errno_t;</span><br>    <span class="hljs-type">errno_t</span> err = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 初始化应用程序对 WinINet 函数的使用</span><br><span class="hljs-comment">    * HINTERNET InternetOpenA(</span><br><span class="hljs-comment">    *    [in] LPCSTR lpszAgent,指向以null结尾的字符串的指针，该字符串指定调用 WinINet 函数的应用程序或实体的名称。此名称用作 HTTP 协议中的用户代理。</span><br><span class="hljs-comment">    *    [in] DWORD  dwAccessType,所需的访问类型。INTERNET_OPEN_TYPE_PRECONFIG，从注册表中检索代理或直接配置。</span><br><span class="hljs-comment">    *    [in] LPCSTR lpszProxy,指向以null结尾的字符串的指针，该字符串指定代理服务器的名称。如果 dwAccessType未设置为 INTERNET_OPEN_TYPE_PROXY，此参数被忽略，应为NULL</span><br><span class="hljs-comment">    *         LPCTSTR lpszProxyBypass,指向以空字符结尾的字符串的长指针，该字符串包含主机名或 IP 地址或两者的可选列表，不应通过代理进行路由。如果此参数为 NULL，则该函数从注册表中读取绕过列表。</span><br><span class="hljs-comment">    *    [in] DWORD  dwFlags，指定影响函数行为的各种选项。</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    * 返回值：应用程序传递给后续 Win32 Internet 函数的有效句柄表示成功</span><br><span class="hljs-comment">    */</span><br>    hInternet = <span class="hljs-built_in">InternetOpen</span>(<span class="hljs-string">L&quot;ReverseCore&quot;</span>,<br>        INTERNET_OPEN_TYPE_PRECONFIG,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (hInternet == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;InternetOpen() failed!&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 打开由完整的 FTP 或 HTTP URL 指定的资源</span><br><span class="hljs-comment">    * HINTERNET InternetOpenUrlA(</span><br><span class="hljs-comment">    *    [in] HINTERNET hInternet, 当前 Internet 会话的句柄</span><br><span class="hljs-comment">    *    [in] LPCSTR    lpszUrl,指向以null结尾的字符串变量的指针，该变量指定要开始读取的 URL</span><br><span class="hljs-comment">    *    [in] LPCSTR    lpszHeaders,指向以null结尾的字符串的指针，该字符串指定要发送到 HTTP 服务器的标头</span><br><span class="hljs-comment">    *    [in] DWORD     dwHeadersLength,附加标头的大小，以TCHARs为单位。</span><br><span class="hljs-comment">    *    [in] DWORD     dwFlags,INTERNET_FLAG_RELOAD,强制从源服务器下载请求的文件、对象或目录列表，而不是从缓存中。</span><br><span class="hljs-comment">    *    [in] DWORD_PTR dwContext,一个指向变量的指针，该变量指定应用程序定义的值，该值连同返回的句柄一起传递给任何回调函数。</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    hURL = <span class="hljs-built_in">InternetOpenUrl</span>(<br>        hInternet,<br>        szURL,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-number">0</span>,<br>        INTERNET_FLAG_RELOAD,<br>        <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (hURL == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;InternetOpenUrl() failed!&quot;</span>);<br>        <span class="hljs-keyword">goto</span> _DownloadURL_EXIT;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (_tfopen_s(&amp;pFile, szFile, <span class="hljs-string">L&quot;wt&quot;</span>))<br>    &#123;<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;fopen() failed!&quot;</span>);<br>        <span class="hljs-keyword">goto</span> _DownloadURL_EXIT;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 从InternetOpenUrl、 FtpOpenFile或 HttpOpenRequest函数打开的句柄中读取数据</span><br><span class="hljs-comment">    * BOOL InternetReadFile(</span><br><span class="hljs-comment">    *    [in]  HINTERNET hFile,从先前调用 InternetOpenUrl、 FtpOpenFile或 HttpOpenRequest返回的句柄</span><br><span class="hljs-comment">    *    [out] LPVOID    lpBuffer,指向接收数据的缓冲区的指针</span><br><span class="hljs-comment">    *    [in]  DWORD     dwNumberOfBytesToRead,要读取的字节数</span><br><span class="hljs-comment">    *    [out] LPDWORD   lpdwNumberOfBytesRead,指向接收读取字节数的变量的指针</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//将网络资源文件写入本地文件中</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">InternetReadFile</span>(hURL, pBuf, DEF_BUF_SIZE, &amp;dwBytesRead))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!dwBytesRead)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 把 ptr 所指向的数组中的数据写入到给定流 stream 中</span><br><span class="hljs-comment">        * size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)</span><br><span class="hljs-comment">        * ptr -- 这是指向要被写入的元素数组的指针</span><br><span class="hljs-comment">        * size -- 这是要被写入的每个元素的大小，以字节为单位</span><br><span class="hljs-comment">        * nmemb -- 这是元素的个数，每个元素的大小为 size 字节</span><br><span class="hljs-comment">        * stream -- 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输出流</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-built_in">fwrite</span>(pBuf, dwBytesRead, <span class="hljs-number">1</span>, pFile);<br>    &#125;<br><br>_DownloadURL_EXIT:<br>    <span class="hljs-keyword">if</span> (pFile)<br>        <span class="hljs-built_in">fclose</span>(pFile);<br>    <span class="hljs-keyword">if</span> (hURL)<br>        <span class="hljs-built_in">InternetCloseHandle</span>(hURL);<br>    <span class="hljs-keyword">if</span> (hInternet)<br>        <span class="hljs-built_in">InternetCloseHandle</span>(hInternet);<br>    <span class="hljs-keyword">return</span> bRet;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 与EnumWindows或EnumDesktopWindows函数一起使用的应用程序定义的回调函数</span><br><span class="hljs-comment">* BOOL CALLBACK EnumWindowsProc(</span><br><span class="hljs-comment">*  _In_ HWND   hwnd,顶级窗口的句柄</span><br><span class="hljs-comment">*  _In_ LPARAM lParam,lParam [in] EnumWindows或EnumDesktopWindows中给出的应用程序定义的值</span><br><span class="hljs-comment">*   );</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL CALLBACK <span class="hljs-title">EnumWindowsProc</span><span class="hljs-params">(HWND hWnd, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    DWORD dwPID = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 检索创建指定窗口的线程的标识符，以及（可选）创建窗口的进程的标识符</span><br><span class="hljs-comment">    * DWORD GetWindowThreadProcessId(</span><br><span class="hljs-comment">    *    [in]            HWND    hWnd,窗口的句柄。</span><br><span class="hljs-comment">    *    [out, optional] LPDWORD lpdwProcessId,指向接收进程标识符的变量的指针</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">GetWindowThreadProcessId</span>(hWnd, &amp;dwPID);<br><br>    <span class="hljs-keyword">if</span> (dwPID == (DWORD)lParam)<br>    &#123;<br>        g_hWnd = hWnd;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">HWND <span class="hljs-title">GetWindowHandleFromPID</span><span class="hljs-params">(DWORD dwPID)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 通过将每个窗口的句柄依次传递给应用程序定义的回调函数来枚举屏幕上的所有顶级窗口。EnumWindows一直持续到枚举最后一个顶级窗口或回调函数返回FALSE</span><br><span class="hljs-comment">    * BOOL EnumWindows(</span><br><span class="hljs-comment">    *    [in] WNDENUMPROC lpEnumFunc,指向应用程序定义的回调函数的指针</span><br><span class="hljs-comment">    *    [in] LPARAM      lParam,要传递给回调函数的应用程序定义的值</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">EnumWindows</span>(EnumWindowsProc, dwPID);<br>    <span class="hljs-keyword">return</span> g_hWnd;<br>&#125;<br><br><span class="hljs-comment">//需要#include&lt;shlobj.h&gt;</span><br><span class="hljs-function">BOOL <span class="hljs-title">DropFile</span><span class="hljs-params">(LPCTSTR wcsFile)</span></span><br><span class="hljs-function"></span>&#123;<br>    HWND hWnd = <span class="hljs-literal">NULL</span>;<br>    DWORD dwBufSize = <span class="hljs-number">0</span>;<br>    BYTE* pBuf = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 定义CF_HDROP剪贴板格式</span><br><span class="hljs-comment">    * typedef struct _DROPFILES &#123;</span><br><span class="hljs-comment">    *    DWORD pFiles;文件列表从此结构开头的偏移量，以字节为单位</span><br><span class="hljs-comment">    *    POINT pt;落点。坐标取决于fNC</span><br><span class="hljs-comment">    *    BOOL  fNC;非客户区标志。如果此成员为TRUE，则pt指定窗口非客户区中某个点的屏幕坐标。如果它是FALSE，pt指定客户区域中一个点的客户坐标</span><br><span class="hljs-comment">    *    BOOL  fWide;指示文件是否包含 ANSI 或 Unicode 字符的值。如果该值为零，则文件包含 ANSI 字符。否则，它包含 Unicode 字符</span><br><span class="hljs-comment">    *    &#125; DROPFILES, *LPDROPFILES;</span><br><span class="hljs-comment">    */</span><br>    DROPFILES* pDrop = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> szFile[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    HANDLE hMem = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 将 UTF-16（宽字符）字符串映射到新字符串</span><br><span class="hljs-comment">    * int WideCharToMultiByte(</span><br><span class="hljs-comment">    *    [in]            UINT                               CodePage,用于执行转换的代码页,CP_ACP,系统默认的 Windows ANSI 代码页。</span><br><span class="hljs-comment">    *    [in]            DWORD                              dwFlags,指示转换类型的标志</span><br><span class="hljs-comment">    *    [in]            _In_NLS_string_(cchWideChar)LPCWCH lpWideCharStr,指向要转换的 Unicode 字符串的指针</span><br><span class="hljs-comment">    *    [in]            int                                cchWideChar,lpWideCharStr指示的字符串的大小（以字符为单位） 。或者，如果字符串以 null 结尾，则可以将此参数设置为 -1</span><br><span class="hljs-comment">    *    [out, optional] LPSTR                              lpMultiByteStr,指向接收转换后字符串的缓冲区的指针</span><br><span class="hljs-comment">    *    [in]            int                                cbMultiByte,lpMultiByteStr指示的缓冲区的大小（以字节为单位）</span><br><span class="hljs-comment">    *    [in, optional]  LPCCH                              lpDefaultChar,指向在指定代码页中无法表示字符时要使用的字符的指针。如果函数要使用系统默认值，则应用程序将此参数设置为NULL</span><br><span class="hljs-comment">    *    [out, optional] LPBOOL                             lpUsedDefaultChar,指向一个标志的指针，该标志指示函数是否在转换中使用了默认字符。如果源字符串中的一个或多个字符不能在指定的代码页中表示，则该标志设置为TRUE 。否则，标志设置为FALSE。该参数可以设置为NULL。</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">WideCharToMultiByte</span>(CP_ACP, <span class="hljs-number">0</span>, wcsFile, <span class="hljs-number">-1</span>, szFile, MAX_PATH, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 锁定一个全局内存对象并返回一个指向对象内存块第一个字节的指针</span><br><span class="hljs-comment">    * LPVOID GlobalLock(</span><br><span class="hljs-comment">    *    [in] HGLOBAL hMem,全局内存对象的句柄</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    pBuf = (LPBYTE)<span class="hljs-built_in">GlobalLock</span>(hMem);<br>    pDrop = (DROPFILES*)pBuf;<br>    pDrop-&gt;pFiles = <span class="hljs-built_in">sizeof</span>(DROPFILES);<br>    <span class="hljs-built_in">strcpy_s</span>((<span class="hljs-type">char</span>*)(pBuf + <span class="hljs-built_in">sizeof</span>(DROPFILES)), <span class="hljs-built_in">strlen</span>(szFile) + <span class="hljs-number">1</span>, szFile);<br><br>    <span class="hljs-built_in">GlobalUnlock</span>(hMem);<br><br>    <span class="hljs-keyword">if</span> (!(hWnd = <span class="hljs-built_in">GetWindowHandleFromPID</span>(<span class="hljs-built_in">GetCurrentProcessId</span>())))<br>    &#123;<br>        <span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">L&quot;GetWndHandleFromPID() failed!!!&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 在与创建指定窗口的线程关联的消息队列中放置（发布）一条消息，并在不等待线程处理消息的情况下返回。</span><br><span class="hljs-comment">    * BOOL PostMessageA(</span><br><span class="hljs-comment">    *    [in, optional] HWND   hWnd,一个窗口句柄，其窗口过程将接收消息</span><br><span class="hljs-comment">    *    [in]           UINT   Msg,要发布的消息</span><br><span class="hljs-comment">    *    [in]           WPARAM wParam,其他特定于消息的信息</span><br><span class="hljs-comment">    *    [in]           LPARAM lParam,其他特定于消息的信息</span><br><span class="hljs-comment">    *    );</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">PostMessage</span>(hWnd, WM_DROPFILES, (WPARAM)pBuf, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> TRUE;<br><br>&#125;<br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc</span><span class="hljs-params">(LPVOID lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    TCHAR szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span>, &#125;;<br>    TCHAR* p = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-built_in">GetModuleFileName</span>(<span class="hljs-literal">NULL</span>, szPath, <span class="hljs-built_in">sizeof</span>(szPath));<br><br>    <span class="hljs-keyword">if</span> (p = _tcsrchr(szPath, <span class="hljs-string">L&#x27;\\&#x27;</span>))<br>    &#123;<br>        _tcscpy_s(p + <span class="hljs-number">1</span>, <span class="hljs-built_in">wcslen</span>(DEF_INDEX_FILE) + <span class="hljs-number">1</span>, DEF_INDEX_FILE);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">DownloadURL</span>(DEF_URL, szPath))<br>        &#123;<br>            <span class="hljs-built_in">DropFile</span>(szPath);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-built_in">CloseHandle</span>(<span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProc, <span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>));<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dummy</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="修改TextView-exe文件"><a href="#修改TextView-exe文件" class="headerlink" title="修改TextView.exe文件"></a>修改TextView.exe文件</h2><h3 id="IMAGE-IMPORT-DESCRIPTOR"><a href="#IMAGE-IMPORT-DESCRIPTOR" class="headerlink" title="IMAGE_IMPORT_DESCRIPTOR"></a>IMAGE_IMPORT_DESCRIPTOR</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_IMAGE_IMPORT_DESCRIPTOR</span><br>&#123;<br>    uion&#123;<br>        DWORD Characteristics;<br>        DWORD OriginalFirstThunk;<span class="hljs-comment">//指向输入名称表</span><br>    &#125;;<br>    DWORD TimeDateStamp;<span class="hljs-comment">//时间标志</span><br>    DWORD ForwarderChain;<span class="hljs-comment">//一般为0，在程序引用一个DLL中的API，而这个API又在引用其他DLL的API时使用</span><br>    DWORD Name;<span class="hljs-comment">//DLL名字的指针</span><br>    DWORD FirstThunk;<span class="hljs-comment">//包含输入地址表（IAT）的RVA</span><br>&#125;IMAGE_IMPORT_DESCRIPTOR;<br></code></pre></td></tr></table></figure><h3 id="移动IDT"><a href="#移动IDT" class="headerlink" title="移动IDT"></a>移动IDT</h3><p>若文件中的<code>IDT</code>没有足够的空间新增<code>IID</code>时就需要将<code>IDT</code>移动。可以采用下列三种方式移动</p><ul><li>查找文件中的空白区域</li><li>增加文件最后一节区的大小</li><li>在文件末尾添加新节区</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/07/Ubuntu%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2023/06/07/Ubuntu%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu设置代理"><a href="#Ubuntu设置代理" class="headerlink" title="Ubuntu设置代理"></a>Ubuntu设置代理</h1><ul><li><p>将<code>ubuntu</code>修改成桥接</p></li><li><p>下载<code>proxychains</code></p></li><li><p>修改配置文件<code>sudo gedit sudo gedit /etc/proxychains.conf</code></p></li><li><p>输入代理的<code>http</code>端口号以及主机的<code>ip</code>地址</p></li></ul><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221220155820550.png" alt="image-20221220155820550"></p><ul><li>选择同端的<code>ip</code>地址</li></ul><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221220155901715.png" alt="image-20221220155901715"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/07/Pico+Gitee%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/06/07/Pico+Gitee%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<ul><li>下载PicGo</li></ul><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><ul><li>选择插件设置</li></ul><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221221160106322.png" alt="image-20221221160106322"></p><ul><li>选择<code>gitee-uploader 1.1.2</code></li></ul><p><img src="C:\Users\39738\AppData\Roaming\Typora\typora-user-images\image-20221221160358454.png" alt="image-20221221160358454"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构</title>
    <link href="/2023/06/07/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2023/06/07/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h1><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/020606_20d5f918_6555973.png" alt="输入图片说明" title="屏幕截图.png"></p><h2 id="MS-DOS头部"><a href="#MS-DOS头部" class="headerlink" title="MS-DOS头部"></a>MS-DOS头部</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"> IMAGE_DOS_HEADER_STRUCT&#123;<br>    +<span class="hljs-number">0h</span> e_magic <span class="hljs-built_in">WORD</span> //DOS标记 MZ<br>    +<span class="hljs-number">2h</span> e_cblp <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">4h</span> e_cp <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">6h</span> e_crlc <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">8h</span> e_cparhdr <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">0ah</span> e_minalloc <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">0ch</span> e_maxalloc <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">0eh</span> e_ss <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">10h</span> e_sp <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">12h</span> e_csum <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">14h</span> e_ip <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">16h</span> e_cs <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">18h</span> e_lfarlc <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">1ah</span> e_ovno <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">1ch</span> e_res <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">24h</span> e_oemid <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">26h</span> e_oeminfo <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">28h</span> e_mres2 <span class="hljs-built_in">WORD</span><br>    +<span class="hljs-number">3ch</span> e_lfanew <span class="hljs-built_in">DWORD</span>  //指向PE文件头，是RVA <br>&#125;IMAGE_DOS_HEADER_ENDS<br></code></pre></td></tr></table></figure><h2 id="PE文件头"><a href="#PE文件头" class="headerlink" title="PE文件头"></a>PE文件头</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">IMAGE_NT_HEADERS STRUCT&#123;<br>+<span class="hljs-number">0</span><span class="hljs-built_in">h</span>SignatureDWORD <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">#define IMAGE_NT_SIGNATURE</span><br>+<span class="hljs-number">4</span><span class="hljs-built_in">h</span>FileHeaderIMAGE_FILE_HEADER<br>+<span class="hljs-number">18</span><span class="hljs-built_in">h</span>OptionalHeaderIMAGE_OPTIONAL_HEADER32<br>&#125;IMAGE_NT_HEADERS64 ENDS<br></code></pre></td></tr></table></figure><h2 id="64位PE文件头"><a href="#64位PE文件头" class="headerlink" title="64位PE文件头"></a>64位PE文件头</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">IMAGE_NT_HEADERS STRUCT&#123;<br>+<span class="hljs-number">0</span><span class="hljs-built_in">h</span>SignatureDWORD  <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">#define IMAGE_NT_SIGNATURE</span><br>+<span class="hljs-number">4</span><span class="hljs-built_in">h</span>FileHeaderIMAGE_FILE_HEADER<br>+<span class="hljs-number">18</span><span class="hljs-built_in">h</span>OptionalHeaderIMAGE_OPTIONAL_HEADER64<br>&#125;IMAGE_NT_HEADERS64 ENDS<br></code></pre></td></tr></table></figure><h2 id="IMAGE-FILE-HEADER"><a href="#IMAGE-FILE-HEADER" class="headerlink" title="IMAGE_FILE_HEADER"></a>IMAGE_FILE_HEADER</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">IMAGE_FILE_HEADER STRUCT&#123;<br>+<span class="hljs-number">04</span>HMachine WORD <span class="hljs-comment">//运行平台</span><br>+<span class="hljs-number">06</span>HNumberOfSectionsWORD <span class="hljs-comment">//文件的区块数 </span><br>+<span class="hljs-number">08</span>HTimeDateStampDWORD <span class="hljs-comment">//文件创建日期和时间</span><br>+<span class="hljs-number">0</span>CHPointerToSymbolTableDWORD <span class="hljs-comment">//指向符号表</span><br>+<span class="hljs-number">10</span>HNumberOfSymbolsDwORD <span class="hljs-comment">//符号表符号的个数</span><br>+<span class="hljs-number">14</span>HSizeOfOptionalHeaderWORD IMAGE_OPTIONAL_HEADER32<span class="hljs-comment">//结构的大小</span><br>+<span class="hljs-number">16</span>HCharacteristicsWORD <span class="hljs-comment">//文件属性</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IMAGE-OPTIONAL-HEADER"><a href="#IMAGE-OPTIONAL-HEADER" class="headerlink" title="IMAGE_OPTIONAL_HEADER"></a>IMAGE_OPTIONAL_HEADER</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">IMAGE_OPTIONAL_HEADER32 STRUCT<br>+<span class="hljs-number">18H</span>Magic<span class="hljs-built_in">WORD</span><span class="hljs-comment">;标志字</span><br>+<span class="hljs-number">1AH</span>MajorLinkerVersion <span class="hljs-built_in">BYTE</span><span class="hljs-comment">;链接器主版本号</span><br>+<span class="hljs-number">1BH</span>MinorLinkerVersion <span class="hljs-built_in">BYTE</span><span class="hljs-comment">;链接器次版本号</span><br>+<span class="hljs-number">1CH</span>SizeOfCode   <span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有含有代码的区块的大小</span><br>+<span class="hljs-number">20H</span>SizeOfInitializedData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有初始化数据区块的大小</span><br>+<span class="hljs-number">24H</span>SizeOfUninitializedData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有未初始化数据区块的大小</span><br>+<span class="hljs-number">28H</span>AddressOfEntryPoint<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;程序指向入口RVA</span><br>+<span class="hljs-number">2CH</span>BaseOfCode<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;代码区块起始RVA</span><br>+<span class="hljs-number">30H</span>BaseOfData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;数据区块起始RVA</span><br>+<span class="hljs-number">34H</span>ImageBase<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;程序默认载入基地址</span><br>+<span class="hljs-number">38H</span>SectionAlignment<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;内存中区块的对齐值</span><br>+<span class="hljs-number">3cH</span>FileAlign<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;文件中区块的对齐值</span><br>+<span class="hljs-number">40H</span>MajorOperationSystemVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;操作系统主版本号</span><br>+<span class="hljs-number">42H</span>MinoroperationSystemVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;操作系统次版本号</span><br>+<span class="hljs-number">44H</span>MajorImageVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;用户自定义主版本号</span><br>+<span class="hljs-number">46H</span>MinorImageVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;用户自定义次版本号</span><br>+<span class="hljs-number">48H</span>MajorSubsystemVersion <span class="hljs-built_in">WORD</span><span class="hljs-comment">;所需子系统主版本号</span><br>+<span class="hljs-number">4aH</span>MinorSubsystemVersion <span class="hljs-built_in">WORD</span><span class="hljs-comment">;所需子系统次版本号</span><br>+<span class="hljs-number">4cH</span>Win32VersionValue<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;保留，通常被设置为0</span><br>    +<span class="hljs-number">50H</span>SizeOfImage<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;映像载入内存后的总尺寸</span><br>+<span class="hljs-number">54H</span>SizeOfHeaders<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;MS-DOS头部、PE文件头、区块表总大小</span><br>+<span class="hljs-number">58H</span>CheckSum<span class="hljs-built_in">WORD</span><span class="hljs-comment">;映像校验和</span><br>+<span class="hljs-number">5cH</span>Subsystem<span class="hljs-built_in">WORD</span><span class="hljs-comment">;文件子系统</span><br>+<span class="hljs-number">5eH</span>DLLCharacteristics <span class="hljs-built_in">WORD</span><span class="hljs-comment">;显示DLL特性的旗帜</span><br>+<span class="hljs-number">60H</span>SizeOfStackReserve<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;初始化时栈的大小</span><br>+<span class="hljs-number">64H</span>SizeOfStackCommit<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;初始化时实际提交栈的大小</span><br>+<span class="hljs-number">68H</span>SizeOfHeapReserve<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;初始化时堆的大小</span><br>+<span class="hljs-number">6cH</span>SizeOfHeapCommit<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;初始化时实际提交堆的大小</span><br>+<span class="hljs-number">70H</span>LoaderFlags<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;与调试相关，默认值为0</span><br>+<span class="hljs-number">74H</span>NumberOfRvaAndSize<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;数据目录表的项数</span><br>+<span class="hljs-number">78H</span>DataDirectory<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;IMAGE_DATA_DIRECTROY </span><br></code></pre></td></tr></table></figure><h2 id="64位下IMAGE-OPTIONAL-HEADER"><a href="#64位下IMAGE-OPTIONAL-HEADER" class="headerlink" title="64位下IMAGE_OPTIONAL_HEADER"></a>64位下IMAGE_OPTIONAL_HEADER</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">IMAGE_OPTIONAL_HEADER32 STRUCT<br>+<span class="hljs-number">18H</span>Magic<span class="hljs-built_in">WORD</span><span class="hljs-comment">;标志字</span><br>+<span class="hljs-number">1AH</span>MajorLinkerVersion <span class="hljs-built_in">BYTE</span><span class="hljs-comment">;链接器主版本号</span><br>+<span class="hljs-number">1BH</span>MinorLinkerVersion <span class="hljs-built_in">BYTE</span><span class="hljs-comment">;链接器次版本号</span><br>+<span class="hljs-number">1CH</span>SizeOfCode   <span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有含有代码的区块的大小</span><br>+<span class="hljs-number">20H</span>SizeOfInitializedData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有初始化数据区块的大小</span><br>+<span class="hljs-number">24H</span>SizeOfUninitializedData<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;所有未初始化数据区块的大小</span><br>+<span class="hljs-number">28H</span>AddressOfEntryPoint<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;程序指向入口RVA</span><br>+<span class="hljs-number">2CH</span>BaseOfCode<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;代码区块起始RVA</span><br>+<span class="hljs-number">30H</span>ImageBaseULONGLONGU7<span class="hljs-comment">;程序默认载入基地址</span><br>+<span class="hljs-number">38H</span>SectionAlignment<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;内存中区块的对齐值</span><br>+<span class="hljs-number">3cH</span>FileAlign<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;文件中区块的对齐值</span><br>+<span class="hljs-number">40H</span>MajorOperationSystemVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;操作系统主版本号</span><br>+<span class="hljs-number">42H</span>MinoroperationSystemVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;操作系统次版本号</span><br>+<span class="hljs-number">44H</span>MajorImageVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;用户自定义主版本号</span><br>+<span class="hljs-number">46H</span>MinorImageVersion<span class="hljs-built_in">WORD</span><span class="hljs-comment">;用户自定义次版本号</span><br>+<span class="hljs-number">48H</span>MajorSubsystemVersion <span class="hljs-built_in">WORD</span><span class="hljs-comment">;所需子系统主版本号</span><br>+<span class="hljs-number">4aH</span>MinorSubsystemVersion <span class="hljs-built_in">WORD</span><span class="hljs-comment">;所需子系统次版本号</span><br>+<span class="hljs-number">4cH</span>Win32VersionValue<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;保留，通常被设置为0</span><br>    +<span class="hljs-number">50H</span>SizeOfImage<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;映像载入内存后的总尺寸</span><br>+<span class="hljs-number">54H</span>SizeOfHeaders<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;MS-DOS头部、PE文件头、区块表总大小</span><br>+<span class="hljs-number">58H</span>CheckSum<span class="hljs-built_in">WORD</span><span class="hljs-comment">;映像校验和</span><br>+<span class="hljs-number">5cH</span>Subsystem<span class="hljs-built_in">WORD</span><span class="hljs-comment">;文件子系统</span><br>+<span class="hljs-number">5eH</span>DLLCharacteristics <span class="hljs-built_in">WORD</span><span class="hljs-comment">;显示DLL特性的旗帜</span><br>+<span class="hljs-number">60H</span>SizeOfStackReserveULONGLONG<span class="hljs-comment">;初始化时栈的大小</span><br>+<span class="hljs-number">68H</span>SizeOfStackCommitULONGLONG<span class="hljs-comment">;初始化时实际提交栈的大小</span><br>+<span class="hljs-number">70H</span>SizeOfHeapReserveULONGLONG<span class="hljs-comment">;初始化时堆的大小</span><br>+<span class="hljs-number">78H</span>SizeOfHeapCommitULONGLONG<span class="hljs-comment">;初始化时实际提交堆的大小</span><br>+<span class="hljs-number">80H</span>LoaderFlags<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;与调试相关，默认值为0</span><br>+<span class="hljs-number">84H</span>NumberOfRvaAndSize<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;数据目录表的项数</span><br>+<span class="hljs-number">88H</span>DataDirectory<span class="hljs-built_in">DWORD</span><span class="hljs-comment">;IMAGE_DATA_DIRECTROY </span><br></code></pre></td></tr></table></figure><h2 id="IMAGE-DATA-DIRECTORY"><a href="#IMAGE-DATA-DIRECTORY" class="headerlink" title="IMAGE_DATA_DIRECTORY"></a>IMAGE_DATA_DIRECTORY</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_DATA_DIRECTORY STRUCT<br>VirtualAddress DWORD<span class="hljs-comment">;数据块的起始RVA</span><br>Size   DWORD<span class="hljs-comment">;数据块的长度</span><br></code></pre></td></tr></table></figure><h2 id="数据目录的成员"><a href="#数据目录的成员" class="headerlink" title="数据目录的成员"></a>数据目录的成员</h2><table><thead><tr><th>序号</th><th>成员</th><th>结构</th><th>偏移量(PE&#x2F;PE32+)</th></tr></thead><tbody><tr><td>0</td><td>Export Table</td><td>IMAGE_DIRECTORY_ENTRY_EXPORT</td><td>78H&#x2F;88H</td></tr><tr><td>1</td><td>Import Table</td><td>IMAGE_DIRECTORY_ENTRY_IMPORT</td><td>80H&#x2F;90H</td></tr><tr><td>2</td><td>Resources Table</td><td>IMAGE_DIRECTORY_ENTRY_RESOURCE</td><td>88H&#x2F;98H</td></tr><tr><td>3</td><td>Exception Table</td><td>IMAGE_DIRECTORY_ENTRY_EXCEPTION</td><td>90H&#x2F;A0H</td></tr><tr><td>4</td><td>Security Table</td><td>IMAGE_DIRECTORY_ENTRY_SECURITY</td><td>98H&#x2F;A8H</td></tr><tr><td>5</td><td>Base relocation Table</td><td>IMAGE_DIRECTORY_ENTRY_BASERELOC</td><td>A0H&#x2F;B0H</td></tr><tr><td>6</td><td>Debug</td><td>IMAGE_DIRECTORY_ENTRY_DEBUG</td><td>A8H&#x2F;B8H</td></tr><tr><td>7</td><td>Copyright</td><td>IMAGE_DIRECTORY_ENTRY_COPYRIGHT</td><td>B0H&#x2F;C0H</td></tr><tr><td>8</td><td>Global Ptr</td><td>IMAGE_DIRECTORY_ENTRY_GLOBALPTR</td><td>D8H&#x2F;C8H</td></tr><tr><td>9</td><td>Thread local storage(TLS)</td><td>IMAGE_DIRECTORY_ENTRY_TLS</td><td>C0H&#x2F;D0H</td></tr><tr><td>10</td><td>Load configuration</td><td>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</td><td>C8H&#x2F;D8H</td></tr><tr><td>11</td><td>Bound Import</td><td>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</td><td>D0H&#x2F;E0H</td></tr><tr><td>12</td><td>Import Address Table(IAT)</td><td>IMAGE_DIRECTORY_ENTRY_IAT</td><td>D8H&#x2F;E8H</td></tr><tr><td>13</td><td>Delay Import</td><td>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</td><td>E0H&#x2F;F0H</td></tr><tr><td>14</td><td>COM descriptor</td><td>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</td><td>E8H&#x2F;F8H</td></tr><tr><td>15</td><td>保留，必须为0</td><td></td><td>F0H&#x2F;100H</td></tr></tbody></table><h2 id="IMAGE-SECTION-HEADER"><a href="#IMAGE-SECTION-HEADER" class="headerlink" title="IMAGE_SECTION_HEADER"></a>IMAGE_SECTION_HEADER</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_SECTION_HEADER <br>NAMEBYTE8<span class="hljs-comment">;8字节得块名</span><br>unionMisc<span class="hljs-comment">;区块尺寸</span><br>PhysicalAddressDWORD<br>VirtualSizeDWORD<span class="hljs-comment">;实际被使用的区块的大小</span><br>VirtualAddressDWORD<span class="hljs-comment">;区块的RVA地址</span><br>SizeOfRawDataDWORD<span class="hljs-comment">;在文件中对齐后的尺寸</span><br>PointerToRawDataDWORD<span class="hljs-comment">;在文件中的偏移</span><br>PointerToRelocationsDWORD<span class="hljs-comment">;在OBJ文件中使用，重定位的偏移</span><br>PointerToLinenumbersDWORD<span class="hljs-comment">;行号表的偏移(供调试用)</span><br>NumberOfRelocationsWORD<span class="hljs-comment">;在OBJ文件中使用，重定位项数目</span><br>NumberOfLinenumbersWORD<span class="hljs-comment">;行号表中行号的数目</span><br>CharacteristicsDWORD<span class="hljs-comment">;区块的属性</span><br><br></code></pre></td></tr></table></figure><table><thead><tr><th>字段值</th><th>地址</th><th>用途</th></tr></thead><tbody><tr><td>IMAGE_SCN_SNT_CODE</td><td>00000020H</td><td>包含代码，常与100000000h一起设置</td></tr><tr><td>IMAGE_SCN_CNT_INITIALIZED_DATA</td><td>00000040H</td><td>该块包含已初始化的数据</td></tr><tr><td>IMAGE_SCN_CNT_UNINITIALIZED_DATA</td><td>00000080H</td><td>该块包含未初始化的数据</td></tr><tr><td>IMAGE_SCN_MEM_DISCARDABLE</td><td>02000000H</td><td>该块可被丢弃，因为它一旦被载入，进程就不再需要它，常见的可丢弃块是.reloc(重定位块)</td></tr><tr><td>IMAGE_SCN_MEM_SHARED</td><td>10000000H</td><td>该块为共享块</td></tr><tr><td>IMAGE_SCN_MEM_READ</td><td>40000000H</td><td>该块可读。可执行文件中的块总是被设置该标志</td></tr><tr><td>IMAGE_SCN_MEM_EXECUTE</td><td>20000000H</td><td>该块可以执行。通常当00000020H标志被设置时，该标志也被设置</td></tr><tr><td>IMAGE_SCN_MEM_WRITE</td><td>80000000H</td><td>该块可写。如果PE文件中没有设置该标志，装载程序就会将内存映像页标记为</td></tr></tbody></table><h2 id="常见区块"><a href="#常见区块" class="headerlink" title="常见区块"></a>常见区块</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>.text</td><td>代码区块，内容全是指令代码。链接器把所有目标文件的.text块链接成一个大的.text块。</td></tr><tr><td>.data</td><td>默认的读&#x2F;写数据区块。全局变量、静态变量一般放在这里</td></tr><tr><td>.rdata</td><td>默认的只读区块，程序很少用到该块。有两种情况需要用到.rdata块。一是在Microsoft链接器产生的EXE文件中，用于存放调试目录;二是用于存放说明字符串。如果程序的DEF文件中指定了DESCRIPTION，字符串就会出现在.rdata块中。</td></tr><tr><td>.idata</td><td>包含其他外来的DLL的函数及数据信息，即输入表。将.idata区块合并到另一个区块已成为惯例，典型的是.rdata区块。</td></tr><tr><td>.edata</td><td>输出表。当创建一个输出API或数据的可执行文件时，链接器会创建一个.EXP文件，这个.EXP文件包含一个.edata区块，它会被加入最后的可执行文件中。idata区块也经常被合并</td></tr><tr><td>.rsrc</td><td>资源。包含模块的全部资源，例如图标、菜单、位图等。这个区块是只读的，不能命名位.rsrc以外的名字，也不能被合并。</td></tr><tr><td>.bss</td><td>未初始化数据。</td></tr><tr><td>.crt</td><td>用于支持c++运行时(CRT)所添加的数据</td></tr><tr><td>.tls</td><td>TLS的意思是线程局部存储器，用于支持通过__declspec(thread)声明的线程局部存储变量的数据，既包括数据的初始化值，也包括运行时所需的额外变量</td></tr><tr><td>.reloc</td><td>可执行文件的基址重定位。基址重定位一般只是DLL需要。在Release模式下，链接器不回给EXE文件加上基质重定位。</td></tr><tr><td>.sdata</td><td>IA-64的常规大小的全局变量放在这个区块。</td></tr><tr><td>.pdata</td><td>异常表，包含一个CPU特定的IMAGE_RUNTIME_FUNCTION_ENTRY结构数组，DataDirectory中的IMAGE_DIRECTORY_ENTRY_EXCEPTION指向它。它用于异常处理，是基于表的体系结构，就像IA-64。唯一不使用基于表的以尝处理架构体系是x86</td></tr><tr><td>.debug$S</td><td>OBJ文件中Codeview格式的符号。这是一个变量长度的Codeview格式的符号记录流</td></tr><tr><td>.debug$T</td><td>OBJ文件中Codeview格式的类型记录。这是一个变量长度的Codeview格式的类型记录流</td></tr><tr><td>.debug$P</td><td>当使用预编译的头时，可以在OBJ文件中找到它</td></tr><tr><td>.drectve</td><td>包含链接器命令，只能在OBJ中找到它。命令是能被传递给练级额其命令行的字符串。例如:-defaultlib:LIBC，命令行用空格字符分开</td></tr><tr><td>.didat</td><td>延迟载入的输入数据，只能在非Release模式的可执行文件中找到。在Release模式下，延迟载入的数据会被合并到另一个区块中</td></tr></tbody></table><h2 id="区块的对齐值"><a href="#区块的对齐值" class="headerlink" title="区块的对齐值"></a>区块的对齐值</h2><p>有两个对齐值，一种用于磁盘内，另一种用于内存中。PE文件头指出了这两个值。在PE文件头里，<code>FileAlignment</code>定义了磁盘区块的对齐值。每一个区块从对齐值的倍数的偏移位置开始，但是区块的实际代码或数据的大小不一定刚好是这么多，不足用00H填充。被填充的空间被称为区块间隙。</p><p>在PE文件里，SectionAlignment定义了内存中区块的对齐值。当PE文件被映射到内u那种时，区块总是至少从一个页边界处开始。每个区块的第一个字节对应于某个内存页。在x86系统CPU中，内存页是按4KB(1000h)排列的;在x64中内存是按8KB(2000h)排列的。</p><h2 id="文件偏移与虚拟地址地址的转换"><a href="#文件偏移与虚拟地址地址的转换" class="headerlink" title="文件偏移与虚拟地址地址的转换"></a>文件偏移与虚拟地址地址的转换</h2><p>PE文件为了减少题基，磁盘对齐值不是一个内存页1000h，而是200h。因此这类文件被映射到内存中后，同一数据相对于文件头的偏移量在内存中与在磁盘中不同。</p><h2 id="输入表"><a href="#输入表" class="headerlink" title="输入表"></a>输入表</h2><p>可执行文件使用来自其他DLL的代码或数据的动作称为输入。当PE文件被载入后，Windows加载器的工作就是定位所有被输入的函数和数据，并让正在载入的文件可以使用那些地址。这个过程是通过PE文件的输入表(Import Table,也称导入表)完成的。输入表中保存的是函数名和其驻留的DLL名等动态链接所需要的信息。</p><h3 id="输入函数的调用"><a href="#输入函数的调用" class="headerlink" title="输入函数的调用"></a>输入函数的调用</h3><p>输入函数就是被程序调用但其执行代码不在程序中的函数，这些函数的代码位于相关的DLL中，在调用者程序中只保留相关的函数信息，例如函数名、DLL文件名等。对磁盘上的PE文件来说，它无法得知这些输入函数在内存中的地址。只有当PE文件载入内存后，Windows加载器才将相关DLL载入，并将调用输入函数的指令和函数实际所处的地址联系起来。</p><ul><li>隐式调用:当应用程序调用一个DLL的代码和数据时，程序就被隐式地连接到DLL，这个过程是由Windows加载器完成地。</li><li>显示调用:首先需要确定目标DLL已被加载，然后寻找API地地址，是通过LoadLibrary和GetProcAddress完成的。</li></ul><p>PE文件内有一组数据结构，分别对应于被输入的DLL。每一个这样的结构都给出了被输入的DLL的名称并指向一组函数指针。这组函数指针被称为输入地址表(Import Address Table,IAT)。每一个被引入的API在IAT里都保留位置，在IAT里API可以被Windows加载器写入输入函数的地址</p><h3 id="输入表结构"><a href="#输入表结构" class="headerlink" title="输入表结构"></a>输入表结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">IMAGE_IMPORT_DESCRIPTOR STRUCT<br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class"><span class="hljs-title">characteristics</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">OriginalFirstThunk</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">ends</span></span><br><span class="hljs-class"><span class="hljs-title">TimeDateStamp</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">ForwarderChain</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">Name</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">FirstThunk</span><span class="hljs-title">DWORD</span></span><br><span class="hljs-class"><span class="hljs-title">IMAGE_IMPORT_DESCRIPTOR</span> <span class="hljs-title">ENDS</span></span><br></code></pre></td></tr></table></figure><ul><li>OriginalFirstThunk(Characteritics):包含指向输入名称表(INT)的RVA。INT是一个IMAGE_THUNK_DATA结构的数组，数组中的每个IMAGE_THUNK_DATA结构都指向IMAGE_IMPORT_BY_NAME结构，数组以一个内容为0的IMAGE_THUNK_DATA结构结束。</li><li>TimeDateStamp:一个32位的时间标志</li><li>ForwarderChain:这是第一个被转向的API的索引，一般为0，在程序引入一个DLL中的API，而这个API又在引用其他DLL的API时使用。</li><li>Name:DLL名字的指针。是以\x00结尾的ASCII字符的RVA地址，该字符串包含输入的DLL名。</li><li>FirstThunk:包含指向输入地址表(IAT)的RVA。IAT是一个IMAGE_THUNK_DATA结构的数组</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/1610528559472.png" alt="1610528559472"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">IMAGE_THUNK_DATASTRUCT<br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">u1</span></span><br><span class="hljs-class"><span class="hljs-title">ForwarderString</span><span class="hljs-title">DWORD</span> ;</span>指向一个转向者字符串的RVA<br>FunctionDWORD ;被输入的函数的内存地址<br>OridinalDWORD ;被输入的API的序数值<br>AddressOfDataDWORD ;指向IMAGE_IMPORT_BY_NAME<br>ends<br>IMAGE_THUNK_DATA_ENDS<br></code></pre></td></tr></table></figure><p><strong>当IMAGE_THUNK_DATA值的最高位为1时，表示函数以序号方式输入，这时低31位被看成一个函数序号。当双字最高位为0时，表示函数以字符串类型的函数名方式输入，这时双字的值是一个RVA，指向一个IMAGE_IMPORT_BY_NAME结构</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">IMAGE_IMPORT_BY_NAME <span class="hljs-keyword">STRUCT</span><br><span class="hljs-type">Hint</span>WORD<br>NameBYTE<br>IMAGE_IMPORT_BY_NAME ENDS<br></code></pre></td></tr></table></figure><ul><li>Hint:本函数在其所驻留DLL的输入表中的序号。该域被PE装载器用来在DLL的输入表里快速查询函数。该值不是必需的，一些链接器将它设为0.</li><li>Name:含有输入函数的函数名。函数名是一个ASCII字符串，以”NULL”结尾。</li></ul><h3 id="输入表地址"><a href="#输入表地址" class="headerlink" title="输入表地址"></a>输入表地址</h3><p><strong>为什么会有两个并行的指针数组指向IMAGE_IMPORT_BY_NAME结构</strong></p><ul><li>第一个数组OriginalFirstThunk所指向的数组，为单独的一项，不可改写，称为INT。也称提示名表</li><li>第二个数组有FirstThunk所指向的数组，由PE装载器重写的。</li><li>PE装载器先搜索OriginalFirst结构所指向的输入函数的地址。然后，加载器用函数真正的入口地址来代替由FirstThunk指向的IMAGE_THUNK_DATA数组里元素的值。<code>Jmp dword ptr [xxxxx]</code>语句中的<code>[xxxxx]</code>是指FirstThunk数组的一个入口，因此被称为输入地址表(IAT Import Address Table)。此时输入表的其他部分就不太重要了，程序依靠IAT提供的函数地址就可以正常运行。程序依靠IAT提供的函数地址就可以正常运行。</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/1610531246311.png" alt="1610531246311"></p><ul><li>另一种情况是程序OrignalFirstThunk的值为0。初始化时，系统根据FirstThunk的值找到指向函数名的地址串，根据地址串找到函数名，再根据函数名得到入口地址，然后用入口地址取代FirstThunk指向的地址串中的原值。</li></ul><h3 id="输入表实例分析"><a href="#输入表实例分析" class="headerlink" title="输入表实例分析"></a>输入表实例分析</h3><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/1610713812828.png" alt="1610713812828"></p><table><thead><tr><th>OrignalFirstThunk</th><th>TimeDateStamp</th><th>ForwardChain</th><th>Name</th><th>First Thunk</th></tr></thead><tbody><tr><td>8C20 0000</td><td>0000 0000</td><td>0000 0000</td><td>7421 0000</td><td>1020 0000</td></tr><tr><td>7C20 0000</td><td>0000 0000</td><td>0000 0000</td><td>B421 0000</td><td>0020 0000</td></tr><tr><td>0000 0000</td><td>0000 0000</td><td>0000 0000</td><td>0000 0000</td><td>0000 0000</td></tr></tbody></table><p>每个IID中的第4个字段是指向DLL名称的指针。OrignalFirstThunk中指向的是IMAGE_THUNK_DATA数组，它存储的是指向IMAGE_IMPORT_BY_NAME结构</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/1610714378003.png" alt="1610714378003"></p><p><strong>IMAGE_THUNK_DATA数据</strong></p><table><thead><tr><th>1021 0000</th><th>1c21 0000</th><th>f420 0000</th><th>e020 0000</th></tr></thead><tbody><tr><td>5021 0000</td><td>6421 0000</td><td>0221 0000</td><td>ce20 0000</td></tr><tr><td>bc20 0000</td><td>2e21 0000</td><td>4221 0000</td><td>0000 000</td></tr></tbody></table><p>同一IID结构中FirstThunk的字段值为2010h,即文件偏移为610h<img src="https://gitee.com/h0pe-ay/blogimages/raw/master/1610721193755.png" alt="1610721193755"></p><p>其数据与PrignalFirstThunk字段所指的完全一样。</p><p>name字段所指向的不是刚好ASCII字符串，前面还有2个字节的空缺，这是作为函数名(Hint)引用的，可以为0.</p><p><strong>API函数</strong></p><table><thead><tr><th>提示名表(RVA)</th><th>提示名表(File Offset)</th><th>Hint</th><th>ApiName</th></tr></thead><tbody><tr><td>00002110h</td><td>710h</td><td>019bh</td><td>LoadIconA</td></tr><tr><td>0000211ch</td><td>71ch</td><td>01DDH</td><td>PostQuitMessage</td></tr><tr><td>000020f4h</td><td>6f4h</td><td>0128h</td><td>GetMessageA</td></tr><tr><td>000020e0h</td><td>6e0h</td><td>0094h</td><td>DispatchMessageA</td></tr><tr><td>00002150h</td><td>750h</td><td>072dh</td><td>TranslateMessage</td></tr><tr><td>00002164h</td><td>764h</td><td>028bh</td><td>UpdateWindow</td></tr><tr><td>00002102h</td><td>702h</td><td>0197h</td><td>LoadCursorA</td></tr><tr><td>000020ceh</td><td>6ceh</td><td>0083h</td><td>DefWindowProcA</td></tr><tr><td>000020bch</td><td>72eh</td><td>01efh</td><td>RegisterClassExA</td></tr><tr><td>00002142h</td><td>742h</td><td>0265h</td><td>ShowWindow</td></tr></tbody></table><h3 id="绑定输入"><a href="#绑定输入" class="headerlink" title="绑定输入"></a>绑定输入</h3><p>当PE装载器载入PE文件时，会检查输入表并将相关的DLL映射到进程地址空间，然后遍历IAT里的IMAGE_THUNK_DATA数组并用输入函数的真实地址替换它。如果程序员能正确预测函数地址，PE装载器就不用再每次载入PE文件时都去修改IMAGE_THUNK_DATA的值。</p><p>当一个可执行文件被绑定时，IAT中的IMAGE_THUNK_DATA结构被输入函数的实际地址改写了。在磁盘中可执行文件的IAT里，有的存放的是与DLL输出函数相关的实际内存地址。</p><p>在整个进程执行期间，Bind程序做了如下两个重要假设</p><ul><li>当进程初始化时，需要的DLL实际上加载到了它们的首选基地址中。</li><li>自从绑定操作执行依赖，DLL输出表中引用的符号位置一直没有改变。</li></ul><p><strong>IMAGE_BOUND_IMPORT_DESCRIPTOR</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">IMAGE_BOUND_IMPORT_DESCRIPTOR STRUCT<br>TimeDateStamp<span class="hljs-built_in">DWORD</span><br>offsetModuleName<span class="hljs-built_in">WORD</span><br>NumberOfModuleForwarderRefs<span class="hljs-built_in">WORD</span><br>IMAGE_BOUND_IMPORT_DESCRIPTOR ENDS<br></code></pre></td></tr></table></figure><ul><li>TimeDateStamp:一个汉字，包含一个被输入DLL的时间&#x2F;日期戳。它允许加载器快速判断是否是新的。</li><li>OffsetModuleName:一个字，包含一个被输入DLL的名称的偏移。这个字段是与第一个IBID结构之间的偏移(不是RVA)</li><li>NumberOfModuleForwarderRes:一个字，包含紧跟该结构的IMAGE_BOUND_FORWARDER_REF结构的数目。</li></ul><h2 id="输出表"><a href="#输出表" class="headerlink" title="输出表"></a>输出表</h2><p>当一个DLL函数能被EXE或另一个DLL文件使用时，它就被输出。输出信息保存在输出表中，DLL文件通过输出表向系统提供输出函数名、序列号和入口地址等。</p><h3 id="输出表结构"><a href="#输出表结构" class="headerlink" title="输出表结构"></a>输出表结构</h3><p>输出表的主要内容是一个表格，其中包括函数名称、输出序数。序数是指定DLL中某个函数的16位数字，在做指向的DLL独一无二。</p><p>输出表是数据目录表的第1个成员，指向IMAGE_EXPORT_DIRECTORY(IED)结构。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">IMAGE_EXPORT_DIRECTORY STRUCT<br>CharacteristicsDWORD <span class="hljs-comment">;未使用，总是为0</span><br>TimeDateStampDWORD <span class="hljs-comment">;文件生成时间</span><br>MajorVersionWORD <span class="hljs-comment">;主版本号，一般为0</span><br>MinorVersionWORD <span class="hljs-comment">;次版本号，一般为0</span><br>NameDWORD <span class="hljs-comment">;模块的真实名称</span><br><span class="hljs-keyword">Base</span>DWORD <span class="hljs-comment">;基数,序数减这个基数就是函数地址数组的索引值</span><br>NumberOfFunctions DWORD <span class="hljs-comment">;AddressOfFunctions阵列中的元素个数</span><br>NumberOfNames  DWORD <span class="hljs-comment">;AddressOfName阵列中的元素个数</span><br><span class="hljs-keyword">AddressOfFunctions</span>DWORD <span class="hljs-comment">;指向函数地址数组</span><br><span class="hljs-keyword">AddressOfNames</span>DWORD <span class="hljs-comment">;函数名字的指针地址</span><br><span class="hljs-keyword">AddressOfNameOrdinals</span>DWORD <span class="hljs-comment">;指向输出序列号数组</span><br></code></pre></td></tr></table></figure><ul><li>Characteristics:输出属性的旗标。目前还没有定义，总是为0</li><li>TimeDateStamp:输出表创建的时间(GMT时间)</li><li>MajorVersion:输出表的主版本号。未使用，设置为0</li><li>MinorVersion:输出表的次版本号。未使用，设置为0</li><li>Name:指向一个ASCII字符串的RVA。这个字符串是与这些输出函数相关联的DLL的名字</li><li>Base:这个字段包含用于这个PE文件输出表的起始数值(基数)。正常情况下这个数值为1.当通过序数查询一个输出函数时，这个值从序数里被减去，其结果将作为进入输出地址表(EAT)的索引</li><li>NumberOfFunctions:EAT中的条目数量。当条目为0时，这个序数值表名没有代码或数据被输出</li><li>NumberOfNames:输出函数名称表(ENT)里的条目数量。NumberOfNames的值总是小于或等于NumberOfFunctions的值，小于的情况发生在符号只通过序数输出的时候。另外，当被赋值的序数里有数字间距时也会是小于的情况，这个值也是输出序数表的长度。</li><li>AddressOfFunctions:EAT的RVA。EAT是一个RVA数组，数组中的每一个非零的RVA都对应于一个被输出的符号。</li><li>AddressOfNames:ENT的RVA。ENT是一个指向ASCII字符串的RVA数组。每一个ASCII字符串对应于一个通过名字输出的符号。因为这个表是要排序的，所以ASCII字符串也是按顺序排序的。</li><li>AddressOfNameOrdinals:输出序数表的RVA。这个表是字的数组。这个表将ENT中的数组索引映射到相应的输出地址表条目。</li><li><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/1610812538170.png" alt="1610812538170"></li></ul><h2 id="基址重定位"><a href="#基址重定位" class="headerlink" title="基址重定位"></a>基址重定位</h2><p>在PE文件中，重定位表往往单独作为一块，用<code>.reloc</code>表示</p><h3 id="基址重定位的概念"><a href="#基址重定位的概念" class="headerlink" title="基址重定位的概念"></a>基址重定位的概念</h3><p>PE格式不参考外部DLL或模块中的其他区块，而是把文件中所有可能需要修改的地址放在一个数组里。如果PE文件不在首选的地址载入，那么文件中的每一个定位都需要被修改。</p><h3 id="基址重定位表的结构"><a href="#基址重定位表的结构" class="headerlink" title="基址重定位表的结构"></a>基址重定位表的结构</h3><p>基址重定位表位于一个.reloc区块内，找到它们得正确方式是通过数据目录表得IMAGE_DIRECTORY_ENTRY_BASERELOC条目查找。基址重定位数据采用类似按页分割的方法组织，是由许多重定位块串接成的，每个块中存放4KB(1000h)的重定位信息，每个重定位数据块的大小必须以DWORD(4字节)对齐。以IMAGE_BASE_RELOCATION结构开始</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_BASE_RELOCATION STRUCT<br>VirtualAddressDWORD<span class="hljs-comment">;重定位数据的开始RVA地址</span><br>SizeOfBlockDWORD<span class="hljs-comment">;重定位块的长度</span><br>TypeOffsetDWORD<span class="hljs-comment">;重定位项数组</span><br>IMAGE_BASE_RELOCATION ENDS<br></code></pre></td></tr></table></figure><ul><li>VirtualAddress:这组重定位数据的开始RVA地址。各重定位项的地址加这个值才是该重定位项的完整RVA地址</li><li>SizeOfBlock:当前重定位结构的大小。因为VirtualAddress和SizeOfBlock的大小都是固定的4字节，所以这个值减8就是TypeOffset数组的大小。</li><li>TypeOffset:一个数组。数组每项大小为2字节，共16位。这16位分为高4位和低12位。高4位代表重定位类型;低12位是重定位地址，它与VirtualAddress相加就是指向PE映像中需要修改的地址数据的指针。</li></ul><table><thead><tr><th>类型</th><th>winnt.h里的预定义值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>IMAGE_REL_BASED_ABSOLUTE</td><td>没有具体的含义，只是为了让每个段4字节对齐</td></tr><tr><td>3h</td><td>IMAGE_REL_BASED_HIGHLOW</td><td>重定位指向的整个地址都需要修改</td></tr><tr><td>10h</td><td>IMAGE_REL_BASED_DIR4</td><td>出现在64位PE文件中，对指向的整个地址进行修正</td></tr></tbody></table><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/1610868096785.png" alt="1610868096785"></p><p><strong>重定位数据转换</strong></p><table><thead><tr><th>项目</th><th>重定位数据1</th><th>重定位数据2</th><th>重定位数据3</th><th>重定位数据4</th></tr></thead><tbody><tr><td>原始数据</td><td>0F30h</td><td>2330h</td><td>0000</td><td>0000</td></tr><tr><td>TypeOffset值</td><td>300Fh</td><td>3023h</td><td>-</td><td>-</td></tr><tr><td>TypeOffset高4位(类型)</td><td>3h</td><td>3h</td><td>-</td><td>-</td></tr><tr><td>TypeOffset低12位(地址)</td><td>00fh</td><td>023h</td><td>-</td><td>-</td></tr><tr><td>低12位加VirtualAddress</td><td>100fh(RVA)</td><td>1023h(RVA)</td><td>-</td><td>-</td></tr><tr><td>转换成文件偏移地址</td><td>60fh</td><td>623h</td><td>-</td><td>-</td></tr></tbody></table><p>60fh和623h分别指向00402000h和00403030h处</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/1610868439050.png" alt="1610868439050"></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>Windows程序的各种界面称为资源，包括加速键、位图、光标、对话框、图标、菜单、串表、工具栏和版本信息等。</p><h3 id="资源结构"><a href="#资源结构" class="headerlink" title="资源结构"></a>资源结构</h3><p>资源使用类型于磁盘目录结构的方式保存，目录通常包含三层。</p><ul><li>第一层类似于文件系统的根目录，每个根目录下的条目总是在它自己权限下的一个目录。</li><li>第二层目录中的每一个都对应于一个资源类型。</li><li>每个第2层资源类型目录下是第3层目录</li></ul><p><strong>资源目录结构</strong></p><ul><li>IMAGE_DIRECTORY_ENTRY_RESOURCE条目包含资源的RVA和大小</li><li>IMAGE_RESOURCE_DIRECTORY和数个IMAGE_RESOURCE_DIRECTORY_ENTRY组成资源目录结构</li></ul><p><strong>IMAGE_RESOURCE_DIRECTORY</strong>结构长度为16字节</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_RESOURCE_DIRECTORY STRUCT<br>CharacteristicsDWORD<span class="hljs-comment">;理论上是资源的属性标志，通常为0</span><br>TimeDateStampDWORD<span class="hljs-comment">;资源建立时间</span><br>MajorVersionWORD<span class="hljs-comment">;理论上是放置资源的版本，通常为0</span><br>MinorVersionWORD<span class="hljs-comment">;</span><br>NumberOfNamedEntriesWORD<span class="hljs-comment">;使用名字的资源条目的个数</span><br>NumberOfEntriesWORD<span class="hljs-comment">;使用ID数字资源条目的个数</span><br></code></pre></td></tr></table></figure><p><strong>资源目录入口结构</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IMAGE_RESOURCE_DIRECTORY_ENTRYSTRUCT<br>NameDWORD<span class="hljs-comment">;目录项的名称字符串指针或ID</span><br>offsetToDateDWORD<span class="hljs-comment">;资源数据偏移地址或子目录偏移地址</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件分析器编写</title>
    <link href="/2023/06/07/PE%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E5%99%A8%E7%BC%96%E5%86%99/"/>
    <url>/2023/06/07/PE%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E5%99%A8%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="编写PE分析工具"><a href="#编写PE分析工具" class="headerlink" title="编写PE分析工具"></a>编写PE分析工具</h1><h2 id="1-检查文件格式"><a href="#1-检查文件格式" class="headerlink" title="1.检查文件格式"></a>1.检查文件格式</h2><ul><li>判断文件第一个字段<code>e_magic</code>是否为<code>IMAGE_DOS_SIGNATURE</code>即<code>5A4Dh</code></li><li>通过<code>e_lfanew</code>找到<code>IMAGE_NT_HEADRES</code>，判断该字段是否为<code>IMAGE_NT_SIGNATURE</code>即<code>0x4550</code></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>HANDLE hFile;<br>HANDLE hMapping;<br><span class="hljs-function">BOOL <span class="hljs-title">CheckFile</span><span class="hljs-params">(PVOID ImageBase)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag = FALSE;<br>PIMAGE_DOS_HEADER header = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//DOS文件头</span><br>PIMAGE_NT_HEADERS32 headerNT = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//NT头</span><br>header = (PIMAGE_DOS_HEADER)ImageBase; <br><span class="hljs-keyword">if</span> (header-&gt;e_magic == IMAGE_DOS_SIGNATURE)<span class="hljs-comment">//判断是否为DOS文件</span><br>&#123;<br>headerNT = (PIMAGE_NT_HEADERS32)((DWORD)ImageBase + header-&gt;e_lfanew);<br><span class="hljs-keyword">if</span> (headerNT-&gt;Signature == IMAGE_NT_SIGNATURE) <span class="hljs-comment">//判断是否为标准的PE文件</span><br>&#123;<br>flag = TRUE;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> flag;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>PVOID ImageBagse = <span class="hljs-literal">NULL</span>;<br>BOOL flag;<br>LPCSTR path = <span class="hljs-string">&quot;F://CTF//逆向//加密与解密//PE文件结构//PETools//Release//PE.exe&quot;</span>;<br>    <span class="hljs-comment">//打开文件</span><br>hFile = <span class="hljs-built_in">CreateFileA</span>(<br>path,<br>GENERIC_READ,<br>FILE_SHARE_READ,<br><span class="hljs-literal">NULL</span>,<br>OPEN_EXISTING,<br>FILE_ATTRIBUTE_NORMAL,<br><span class="hljs-literal">NULL</span><br>);<br><span class="hljs-keyword">if</span> (hFile == INVALID_HANDLE_VALUE)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件加载失败&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>        <span class="hljs-comment">//将文件映射成对象</span><br>hMapping = <span class="hljs-built_in">CreateFileMapping</span>(<br>hFile,<br><span class="hljs-literal">NULL</span>,<br>PAGE_READONLY,<br><span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span><br>);<br><span class="hljs-keyword">if</span> (hMapping == INVALID_HANDLE_VALUE)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件映射对象失败&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">CloseHandle</span>(hFile);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>            <span class="hljs-comment">//将映射对象映射到当前的进程中</span><br>ImageBagse = <span class="hljs-built_in">MapViewOfFile</span>(<br>hMapping,<br>FILE_MAP_READ,<br><span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>,<br><span class="hljs-number">0</span><br>);<br><span class="hljs-keyword">if</span> (!ImageBagse)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件映射到当前进程空间失败&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">CloseHandle</span>(hFile);<br><span class="hljs-built_in">CloseHandle</span>(hMapping);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>flag = <span class="hljs-built_in">CheckFile</span>(ImageBagse);<br><span class="hljs-keyword">if</span> (flag)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;这是标准的PE文件&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;非法PE文件&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用的Win32-API"><a href="#使用的Win32-API" class="headerlink" title="使用的Win32 API"></a>使用的Win32 API</h3><h4 id="CreateFileA"><a href="#CreateFileA" class="headerlink" title="CreateFileA"></a>CreateFileA</h4><p>创建或打开文件或 I&#x2F;O 设备</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">HANDLE <span class="hljs-title">CreateFileA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           LPCSTR                lpFileName, <span class="hljs-comment">//要创建或打开的文件或设备的名称。</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                 dwDesiredAccess,<span class="hljs-comment">//对文件或设备的请求访问，可以概括为读、写、两者或都不为零</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                 dwShareMode,<span class="hljs-comment">//文件或设备请求的共享模式，可以是read、write、both、delete、all these或none</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes,<span class="hljs-comment">//一个指向SECURITY_ATTRIBUTES 结构的指针，该结构包含两个独立但相关的数据成员：一个可选的安全描述符和一个布尔值，用于确定返回的句柄是否可以被子进程继承。此参数可以为NULL</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                 dwCreationDisposition,<span class="hljs-comment">//对存在或不存在的文件或设备执行的操作。对于文件以外的设备，此参数通常设置为OPEN_EXISTING。</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                 dwFlagsAndAttributes,<span class="hljs-comment">//文件或设备属性和标志，FILE_ATTRIBUTE_NORMAL是文件最常见的默认值。</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] HANDLE                hTemplateFile<span class="hljs-comment">//具有GENERIC_READ访问权限的模板文件的有效句柄。模板文件为正在创建的文件提供文件属性和扩展属性。此参数可以为NULL。</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-comment">//例子</span><br>hFile = <span class="hljs-built_in">CreateFileA</span>(<br>path,<br>GENERIC_READ,<br>FILE_SHARE_READ,<br><span class="hljs-literal">NULL</span>,<br>OPEN_EXISTING,<br>FILE_ATTRIBUTE_NORMAL,<br><span class="hljs-literal">NULL</span><br>);<br></code></pre></td></tr></table></figure><h4 id="CreateFileMapping"><a href="#CreateFileMapping" class="headerlink" title="CreateFileMapping"></a>CreateFileMapping</h4><p>为指定文件创建或打开命名或未命名文件映射对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">HANDLE <span class="hljs-title">CreateFileMappingA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           HANDLE                hFile,<span class="hljs-comment">//要从中创建文件映射对象的文件的句柄。</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] LPSECURITY_ATTRIBUTES lpFileMappingAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                 flProtect,<span class="hljs-comment">//指定文件映射对象的页面保护。对象的所有映射视图都必须与此保护兼容。</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                 dwMaximumSizeHigh,<span class="hljs-comment">//文件映射对象的最大大小的高位DWORD</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                 dwMaximumSizeLow,<span class="hljs-comment">//文件映射对象的最大大小的低位DWORD</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] LPCSTR                lpName<span class="hljs-comment">//文件映射对象的名称</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-comment">//例子</span><br>hMapping = <span class="hljs-built_in">CreateFileMapping</span>(<br>hFile,<br><span class="hljs-literal">NULL</span>,<br>PAGE_READONLY,<br><span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span><br>);<br></code></pre></td></tr></table></figure><h4 id="MapViewOfFile"><a href="#MapViewOfFile" class="headerlink" title="MapViewOfFile"></a>MapViewOfFile</h4><p>将文件映射视图映射到调用进程的地址空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">LPVOID <span class="hljs-title">MapViewOfFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] HANDLE hFileMappingObject,<span class="hljs-comment">//文件映射对象的句柄</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in] DWORD  dwDesiredAccess,<span class="hljs-comment">//对文件映射对象的访问类型，它决定了页面的页面保护。</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in] DWORD  dwFileOffsetHigh,<span class="hljs-comment">//视图开始的文件偏移量的高位DWORD。</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in] DWORD  dwFileOffsetLow,<span class="hljs-comment">//视图开始的文件偏移量的低位DWORD。</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in] SIZE_T dwNumberOfBytesToMap<span class="hljs-comment">//映射到视图的文件映射的字节数</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="2-获取PE文件头信息"><a href="#2-获取PE文件头信息" class="headerlink" title="2.获取PE文件头信息"></a>2.获取PE文件头信息</h2><ol><li>通过<code>NT</code>头获取<code>IMAGE_FILE_HEADE</code>结构体指针，接着输出各成员的信息</li><li>通过<code>NT</code>头获取<code>IMAGE_OPTIONAL_HEADER</code>结构体指针，接着输出各成员信息</li><li>通过<code>IMAGE_OPTIONAL_HEADER</code>结构体获取数据目录项成员</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//获取FILE_HEADER结构体</span><br><span class="hljs-function">PIMAGE_FILE_HEADER <span class="hljs-title">GetFileHeader</span><span class="hljs-params">(PVOID ImageBase)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_FILE_HEADER  pFH = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS  pNtH = <span class="hljs-literal">NULL</span>;<br>pNtH = <span class="hljs-built_in">GetNtHeader</span>(ImageBase);<br>pFH = &amp;pNtH-&gt;FileHeader;<br><span class="hljs-keyword">return</span> pFH;<br>&#125;<br><span class="hljs-function">PIMAGE_OPTIONAL_HEADER32 <span class="hljs-title">GetOptionalHeader</span><span class="hljs-params">(PVOID ImageBase)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_OPTIONAL_HEADER32 pOH = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS32 pNtH = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (!ImageBase)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;非法地址&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> pOH;<br>&#125;<br>pNtH = <span class="hljs-built_in">GetNtHeader</span>(ImageBase);<br>pOH = &amp;pNtH-&gt;OptionalHeader;<br><span class="hljs-keyword">return</span> pOH;<br>&#125;<br><span class="hljs-comment">//显示FileHeader结构体信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowFileHeaderInfo</span><span class="hljs-params">(PIMAGE_FILE_HEADER pFH)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;-------------FileHeaderInfo----------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;FileHeader结构体的地址为:&quot;</span> &lt;&lt; hex&lt;&lt;pFH &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Machine:&quot;</span> &lt;&lt; hex&lt;&lt;pFH-&gt;Machine &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;NumberOfSections:&quot;</span> &lt;&lt; hex&lt;&lt;pFH-&gt;NumberOfSections &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;TimeDateStamp:&quot;</span> &lt;&lt; hex&lt;&lt; pFH-&gt;TimeDateStamp &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;PointerToSymbolTable:&quot;</span> &lt;&lt; hex &lt;&lt; pFH-&gt;PointerToSymbolTable &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;NumberOfSymbols:&quot;</span> &lt;&lt; hex &lt;&lt; pFH-&gt;NumberOfSymbols &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;SizeOfOptionalHeader:&quot;</span> &lt;&lt; hex &lt;&lt; pFH-&gt;SizeOfOptionalHeader &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Characteristics:&quot;</span> &lt;&lt; hex &lt;&lt; pFH-&gt;Characteristics &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//显示Optional结构体的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowOptionalInfo</span><span class="hljs-params">(PIMAGE_OPTIONAL_HEADER32 pOH)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;-------------OptionalInfo----------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Magic:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;Magic &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;SizeOfCode&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;SizeOfCode &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;AddressOfEntryPoint&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;AddressOfEntryPoint &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;BaseOfCode&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;BaseOfCode &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;BaseOfData&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;BaseOfData &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ImageBase&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;ImageBase &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;SizeOfImage&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;SizeOfImage &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;CheckSum&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;CheckSum &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;NumberOfRvaAndSize&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;NumberOfRvaAndSizes &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;DataDirectory&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowDataDirectoryInfo</span><span class="hljs-params">(PIMAGE_OPTIONAL_HEADER32 pOH)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;-------------DataDirectoryInfo----------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ExportTable -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">0</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">0</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ImportTable -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">1</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">1</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ResourcesTable -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">2</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">2</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ExceptionTable -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">3</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">3</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;SecurityTable -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">4</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">4</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;BaserelocationTable -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">5</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">5</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Debug -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">6</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">6</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Copyright -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">7</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">7</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Global Ptr -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">8</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">8</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Thread local storage(TLS) -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">9</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">9</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Load configuration -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">10</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">10</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Bound Import -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">11</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">11</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Import Address Table(IAT) -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">12</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">12</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Delay Import -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">13</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">13</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;COM descriptor -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">14</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">14</span>].Size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;NULL -- RVA:&quot;</span> &lt;&lt; hex &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">15</span>].VirtualAddress &lt;&lt; <span class="hljs-string">&quot; -- size: &quot;</span> &lt;&lt; pOH-&gt;DataDirectory[<span class="hljs-number">15</span>].Size &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE静态文件注入</title>
    <link href="/2023/06/07/PE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/06/07/PE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p><strong>本文首发于合天智汇</strong></p><h1 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h1><p><code>DLL</code>注入指的是向运行中的其他进程强制插入特定的<code>DLL</code>文件。</p><p>可以通过修改静态的<code>PE</code>文件，修改输入表结构，使得程序执行时载入特定的<code>DLL</code>文件。</p><p>通常可执行文件需要使用其他<code>DLL</code>文件中的代码或数据，这些<code>DLL</code>文件相关的信息会保存在输入表中，因此我们通过修改<code>PE</code>文件中输入表相应的信息，即可实现<code>PE</code>文件在运行时自动载入特定的<code>DLL</code>文件。</p><p>使用<code>PEview</code>工具可以清晰的看到程序说输入表的信息</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128175512800.png" alt="image-20220128175512800"></p><h2 id="输入表"><a href="#输入表" class="headerlink" title="输入表"></a>输入表</h2><p>由于需要修改输入表信息，因此这里简单介绍一下输入表的结构。</p><p>在<code>PE</code>文件的可选头中存在这数据目录项， 里面记载了输出表、输入表等关键信息的偏移及大小。那么理所当然的<code>PE</code>文件在执行时也会通过数据目录项里的信息去找寻输入表。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128175922148.png" alt="image-20220128175922148"></p><p>输入表是由<code>IMAGE_IMPORT_DESCRIPTOR</code>结构的数组组成，简称<code>IID</code>,没有特定的成员指出<code>IID</code>项数，但是会由全为0的<code>IID</code>结构作为结束。</p><p>上图可以看出输入表的起始地址为<code>0x1B1C4</code>，这是<code>RVA</code>(相对偏移地址)地址，我们需要转化为文件的偏移地址才能够在文件中找到相应的内容。工具中提供了<code>RVA</code>与文件偏移地址的转换或者自行计算。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128181051920.png" alt="image-20220128181051920"></p><p>从上图可以看出<code>IID</code>结构确实是由全为0的<code>IID</code>结构作为结束。</p><p><strong>输入表结构</strong></p><p><code>IID</code>结构的字段成员如下，其中<code>OriginalFirstThunk</code>、<code>Name</code>以及<code>FirstThunk</code>成员是我们添加<code>DLL</code>文件的关键。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">IMAGE_IMPORT_DESCRIPTOR<br><span class="hljs-keyword">union</span><br><span class="hljs-title class_">characteristics</span>DWORD<br>OriginalFirstThunkDWORD <span class="hljs-comment">//指向IMAGE_THUNK_DATA结构的数组</span><br>ends<br>TimeDateStampDWORD <span class="hljs-comment">//时间标志</span><br>ForwarderChainDWORD <span class="hljs-comment">//一般为0</span><br>NameDWORD <span class="hljs-comment">//指向DLL名称的指针</span><br>FirstThunkDWORD<span class="hljs-comment">//指向IMAGE_THUNK_DATA结构的数组</span><br>IMAGE_IMPORT_DESCRIPTOR<br></code></pre></td></tr></table></figure><p>在<code>PE</code>文件尚未执行过时，<code>OriginalFirstThunk</code>与<code>FirstThunk</code>字段指向相同的结构，区别在于<code>OriginalFirstThunk</code>不可以重写，而<code>FirstThunk</code>可以被重写，当<code>PE</code>文件执行后<code>FirstThunk</code>指向的结构会用于存放输入函数的真实地址。因此我们修改时将<code>OriginalFirstThunk</code>与<code>FirstThunk</code>字段指向同个地址即可。而<code>Name</code>字段存放的是指向<code>DLL</code>文件名称的指针。</p><table><thead><tr><th align="left">OriginalFirstThunk</th><th>FirstThunk</th><th>Name</th></tr></thead><tbody><tr><td align="left">指向IMAGE_THUNK_DATA结构的数组</td><td>指向IMAGE_THUNK_DATA结构的数组</td><td>指向DLL名称的指针</td></tr></tbody></table><p><strong>IMAGE_THUNK_DATA</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">IMAGE_THUNK_DATA<br><span class="hljs-keyword">union</span> <span class="hljs-title class_">u1</span><br>ForwarderStringDWORD <span class="hljs-comment">//指向一个转向者字符串的RVA</span><br>FunctionDWORD <span class="hljs-comment">//被输入的函数的内存地址</span><br>OridinalDWORD <span class="hljs-comment">//被输入的API的序数值</span><br>AddressOfDataDWORD <span class="hljs-comment">//指向IMAGE_IMPORT_BY_NAME</span><br>IMAGE_THUNK_DATA<br></code></pre></td></tr></table></figure><p><code>IMAGE_THUNK_DATA</code>结构在不同情况下的成员不同，但是重点关注<code>AddresOfData</code>字段，该字段指向<code>IMAGE_IMPORT_BY_NAME</code>结构，该结构记录的输入函数的名称。当<code>IMAGE_THUNK_DATA</code>值的双字的最高位为0时，表示函数以字符串类型的函数名方式输入。因此构造时高两个字节为0，低两个字节为<code>IMAGE_IMPORT_BY_NAME</code>结构地址即可。</p><p><strong>IMAGE_IMPORT_BY_NAME</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">IMAGE_IMPORT_BY_NAME STRUCT<br>HintWORD <span class="hljs-comment">//忽略设置为0</span><br>NameBYTE <span class="hljs-comment">//输入函数名称</span><br>IMAGE_IMPORT_BY_NAME<br></code></pre></td></tr></table></figure><p><code>IMAGE_IMPORT_BY_NAME</code>结构的高两字节的值忽略，后门跟着的数据直接填入<code>DLL</code>文件中输出的函数名称，即<code>PE</code>文件运行时会使用到<code>DLL</code>文件中函数的名称。</p><h2 id="修改PE文件"><a href="#修改PE文件" class="headerlink" title="修改PE文件"></a>修改PE文件</h2><p>这里准备两个文件</p><ul><li>文件一：<code>HelloWorld.exe</code>，该文件仅仅是简单在屏幕输出<code>HelloWorld!!!</code>的字符</li><li>文件二：待注入的<code>DLL</code>文件，<code>show.dll</code>，该<code>DLL</code>文件的功能可以根据实际情况而定，这里我准备的<code>DLL</code>文件可以简单的弹出一个对话框。</li></ul><p>将<code>HelloWorld.exe</code>文件拖入<code>PEview</code>工具中，查看输入表内容。可以看到并没有载入<code>show.dll</code>文件。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128183520961.png" alt="image-20220128183520961"></p><p>运行<code>HelloWorld.exe</code>文件</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128183807221.png" alt="image-20220128183807221"></p><p>开始修改<code>HelloWorld.exe</code>文件的思路</p><ul><li>需要在输入表中添加额外的<code>IID</code>结构，该<code>IID</code>成员的信息为<code>show.dll</code>文件的信息</li><li>由于需要添加<code>IID</code>成员，需要观察原始输入表是否由额外的空间可以容纳新的<code>IID</code>结构，若没有则可以选择<ul><li>文件中的空白区域</li><li>文件末尾添加新节区</li></ul></li></ul><p>现在观察<code>HelloWorld.exe</code>文件的输入表，可以看见在输入表的结尾处紧跟着的是一串数据，并且大概率不是无用的数据，若我们直接在输入表结尾处添加新的<code>IID</code>结构必定会破坏原文件的结构，导致程序无法正常运行。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128184307687.png" alt="image-20220128184307687"></p><p>因此选择在找空白处，因为<code>PE</code>文件需要对齐，因此会使用大量的空字符进行填充。空白区域可以任取，但是需要记住选取的地址因为后续需要用到。并且我们需要观察该空白区域是否会被载入到内存中去。我们这里选择的是<code>idata</code>段末尾位置，因此需要去查询<code>idata</code>段信息。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128184520992.png" alt="image-20220128184520992"></p><p>如下图所示，文件中<code>idata</code>段的大小比映射到内存中的大小更大，因此我们可以利用这段差值填充伪造输入表。这里选择文件偏移<code>0x8960</code>作为输入表的起始地址。不能将<code>0x8950</code>作为其实地址，这样<code>KERNEL32.DLL</code>字符串会缺失截断符，运行时会提示找不到该<code>DLL</code>文件。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128184910174.png" alt="image-20220128184910174"></p><p>首先将原输入表的数据复制下来，写入文件偏移<code>0x8960</code>处，新增一个<code>IID</code>结构，<code>Name</code>字段填入<code>DLL</code>文件的名字，即<code>show.dll</code>，而<code>OriginalFirstThunk</code>与<code>FirstThunk</code>字段填入填入<code>IMAGE_IMPORT_BY_NAME</code>结构体的地址，<code>IMAGE_IMPORT_BY_NAME</code>的内容填入输入函数的名称，并且高两个字节需要为0。这里所有填入的地址都为<code>RVA</code>地址，因此需要将文件地址转化为<code>RVA</code>地址填入。<img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128205506926.png" alt="image-20220128205506926"></p><p>接着需要改写<code>idata</code>的权限，前面说到<code>FirstThunk</code>在PE文件运行后是会被改写的，因此输入表所在的区段需要具有写权限。可以看到<code>idata</code>不具备写权限，因此需要将写权限加上。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128202057265.png" alt="image-20220128202057265"></p><p><code>0x80000000</code>为写权限的标志位，因此将原来的数据或上<code>0x80000000</code>即可</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128202247026.png" alt="image-20220128202247026"></p><p>修改后为<code>0xC0000000</code></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128202332919.png" alt="image-20220128202332919"></p><p>最后由于修改了输入表结构以及所在地址并且新增了一个<code>IID</code>结构因此需要去数据目录项的位置修改输入表的地址及大小。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128205744922.png" alt="image-20220128205744922"></p><p>使用<code>PEView</code>工具查看修改后的文件，能够发现修改后的文件使用工具依然能够识别出来，证明没有把文件修坏。</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128205844499.png" alt="image-20220128205844499"></p><p>最后执行程序，发现<code>show.dll</code>文件成功注入</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220128205052410.png" alt="image-20220128205052410"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li>加密与解密</li><li>逆向工程核心原理</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/07/IDA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/06/07/IDA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="创建枚举类型"><a href="#创建枚举类型" class="headerlink" title="创建枚举类型"></a>创建枚举类型</h1><p>View-&gt;Open subviews-&gt;Enumerations</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230527223117697.png" alt="image-20230527223117697"></p><p>右键-&gt;add enum</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230527223346762.png" alt="image-20230527223346762"></p><p>输入枚举名以及宽度</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230527223420229.png" alt="image-20230527223420229"></p><p>右键-&gt;add enum member</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230527223447861.png" alt="image-20230527223447861"></p><p>右键-&gt;Field type-&gt;Enum member</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20230527224640913.png" alt="image-20230527224640913"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hellow World</title>
    <link href="/2023/06/07/HelloWorld/"/>
    <url>/2023/06/07/HelloWorld/</url>
    
    <content type="html"><![CDATA[<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>记录学习历程</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hellow World</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/07/git%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/06/07/git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> git使用<br><span class="hljs-symbol">tag:</span> git<br><span class="hljs-symbol">categories:</span> git<br><span class="hljs-symbol">descrition:</span> git常用命令<br></code></pre></td></tr></table></figure><h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><p>参考<a href="https://blog.csdn.net/qq_34147601/article/details/118305793">Git设置代理</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//设置全局代理</span><br><span class="hljs-comment">//http</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:1080</span><br><span class="hljs-comment">//https</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> https:<span class="hljs-comment">//127.0.0.1:1080</span><br><span class="hljs-comment">//使用socks5代理的 例如ss，ssr 1080是windows下ss的默认代理端口,mac下不同，或者有自定义的，根据自己的改</span><br>git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> socks5:<span class="hljs-comment">//127.0.0.1:1080</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> socks5:<span class="hljs-comment">//127.0.0.1:1080</span><br><br><span class="hljs-comment">//只对github.com使用代理，其他仓库不走代理</span><br>git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.https</span>:<span class="hljs-comment">//github.com.proxy socks5://127.0.0.1:1080</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.https</span>:<span class="hljs-comment">//github.com.proxy socks5://127.0.0.1:1080</span><br><span class="hljs-comment">//取消github代理</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> http<span class="hljs-selector-class">.https</span>:<span class="hljs-comment">//github.com.proxy</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> https<span class="hljs-selector-class">.https</span>:<span class="hljs-comment">//github.com.proxy</span><br><br><span class="hljs-comment">//取消全局代理</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> http<span class="hljs-selector-class">.proxy</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> https.proxy<br></code></pre></td></tr></table></figure><h1 id="Github上传项目"><a href="#Github上传项目" class="headerlink" title="Github上传项目"></a>Github上传项目</h1><p>首先<code>New repository</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220418233709499.png" alt="image-20220418233709499"></p><p>填写项目信息创建仓库</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220418233834336.png" alt="image-20220418233834336"></p><p>上传项目的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">第一次上传</span><br>echo &quot;# test&quot; &gt;&gt; README.md<br>git init<br>git add README.md<br>git commit -m &quot;first commit&quot;<br>git branch -M main<br>git remote add origin git@github.com:h0pe-ay/private_service.git<br>git push -u origin main<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">后面几次上传</span><br>git remote add origin git@github.com:h0pe-ay/private_service.git<br><span class="hljs-meta prompt_">#</span><span class="language-bash">git branch -M main</span><br>git branch -f main HEAD<br>git push -u origin main<br></code></pre></td></tr></table></figure><h1 id="更新项目"><a href="#更新项目" class="headerlink" title="更新项目"></a>更新项目</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add *<br>git commit -m &quot;&quot;<br>git branch -f main HEAD<br>git push -u origin main<br>git push origin master -f<br></code></pre></td></tr></table></figure><h1 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ssh key</span><br>ssh-keygen -t rsa -C &quot;youremail@example.com<br></code></pre></td></tr></table></figure><p>在C盘-&gt;用户名-&gt;<code>.ssh</code>文件夹下有个<code>id_rsa.pub</code>文件复制到<code>github</code>设置中<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>中</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220418234406010.png" alt="image-20220418234406010"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220418234526135.png" alt="image-20220418234526135"></p><h1 id="push超时"><a href="#push超时" class="headerlink" title="push超时"></a>push超时</h1><p>参考文章<a href="https://blog.csdn.net/yunxiaobaobei/article/details/123474599">git报错ssh: connect to host github.com port 22: Connection timed out</a></p><ul><li>C盘-&gt;用户名-&gt;<code>.ssh</code>文件夹下创建<code>config</code>文件添加如下信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Host github.com<br>User YourEmail<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/07/Firm-AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2023/06/07/Firm-AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Firm-AFL源码分析"><a href="#Firm-AFL源码分析" class="headerlink" title="Firm-AFL源码分析"></a>Firm-AFL源码分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在看<code>Firm-AFL</code>相关论文，并且搭建好了环境，想通过源码的角度更深层次的理解<code>Firm-AFL</code>的执行过程。</p><p>并且发现了一篇解析源码的文章，非常详细,<a href="https://xudaxian.xyz/2020/09/05/FIRM-AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">FIRM-AFL源码分析</a>。跟着博客认真分析一下。</p><h2 id="1-x2F-usr-mode-x2F-linux-user-x2F-main-c"><a href="#1-x2F-usr-mode-x2F-linux-user-x2F-main-c" class="headerlink" title="1.&#x2F;usr_mode&#x2F;linux-user&#x2F;main.c"></a>1.&#x2F;usr_mode&#x2F;linux-user&#x2F;main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">|-main<br>    |-cross_process_mutex_first_init <span class="hljs-comment">//用于建立互斥锁与共享内存</span><br>    |-parse_mapping_table <span class="hljs-comment">//获取映射表信息</span><br>    |-getconfig <span class="hljs-comment">//获取配置文件信息，判断需要fuzzing的组件</span><br>    |-FirmAFL_config <span class="hljs-comment">//获取配置文件信息</span><br></code></pre></td></tr></table></figure><h3 id="cross-process-mutex-first-init"><a href="#cross-process-mutex-first-init" class="headerlink" title="cross_process_mutex_first_init"></a>cross_process_mutex_first_init</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">/usr_mode/afl-qemu-cpu.inl.h/cross_process_mutex_first_init</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">cross_process_mutex_first_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">//用于建立IPC通讯时需要指定一个ID值，这个ID值就是通过ftok函数获得</span><br>    <span class="hljs-type">key_t</span> key_id = ftok(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//用于创建共享内存</span><br>    shmid = shmget(key_id, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">pthread_mutex_t</span>), IPC_CREAT );<br>    <span class="hljs-keyword">if</span> (shmid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;shmget() create failed&quot;</span>);<br>        sleep(<span class="hljs-number">1000</span>); <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shmget() create success, shmid is %d.\n&quot;</span>, shmid);<br> <span class="hljs-comment">//用来启动对该共享内存的访问</span><br>    p_mutex_shared = shmat(shmid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (p_mutex_shared == (<span class="hljs-type">void</span> *)<span class="hljs-number">-1</span>)<br>    &#123;<br>      <span class="hljs-comment">//IPC_RMID用于删除共享内存</span><br>      shmctl(shmid, IPC_RMID, <span class="hljs-number">0</span>);<br>      perror(<span class="hljs-string">&quot;shmat() failed&quot;</span>);<br>      sleep(<span class="hljs-number">1000</span>); <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shmat() success.\n&quot;</span>);<br> <span class="hljs-comment">//用于建立互斥锁</span><br>    <span class="hljs-type">pthread_mutexattr_t</span> mutextattr;<br>    pthread_mutexattr_init(&amp;mutextattr);<span class="hljs-comment">//互斥锁初始化</span><br><br>    pthread_mutexattr_setpshared(&amp;mutextattr, PTHREAD_PROCESS_SHARED);<span class="hljs-comment">//线程共享互斥锁</span><br>    pthread_mutex_init(p_mutex_shared, &amp;mutextattr);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="parse-mapping-table"><a href="#parse-mapping-table" class="headerlink" title="parse_mapping_table"></a>parse_mapping_table</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">parse_mapping_table</span><span class="hljs-params">(<span class="hljs-type">char</span> *filename)</span><br>&#123;<br>    <br>    <span class="hljs-type">char</span> strline[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">char</span> * res;<br>    FILE *fp = fopen(filename, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(fp == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file open error\n&quot;</span>);sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">32</span>);<br>    &#125;<br>    res = fgets(strline, <span class="hljs-number">100</span>, fp);<br>    hva_start = strtol(strline,<span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">//主机虚拟地址</span><br>    res = fgets(strline, <span class="hljs-number">100</span>, fp);<br>    start_fork_pc = strtol(strline, <span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">//fork的地址</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> TARGET_MIPS</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">36</span>; i++)<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(TARGET_ARM)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#123;<br>        res = fgets(strline, <span class="hljs-number">100</span>, fp);<br>        init_regs[i] = strtol(strline,<span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;VIRTUAL_SPA; i++) <span class="hljs-comment">//初始化客户机地址</span><br>    &#123;<br>        gva_start[i] = <span class="hljs-number">0</span>;<br>        gva_end[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(res = fgets(strline, <span class="hljs-number">100</span>, fp)!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(strline, <span class="hljs-string">&quot;####&quot;</span>))<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(strline, <span class="hljs-string">&quot;\n&quot;</span>) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">char</span> *p1 = strtok(strline, <span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-type">char</span> *p2 = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-type">char</span> *p3 = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-type">char</span> *p4 = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;:&quot;</span>);<br>        p4[<span class="hljs-built_in">strlen</span>(p4)<span class="hljs-number">-1</span>]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>        gva_start[vir_spa_index] = strtol(p1,<span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<span class="hljs-comment">//客户机虚拟地址的起始地址</span><br>        gva_end[vir_spa_index] = strtol(p2,<span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<span class="hljs-comment">//客户机虚拟地址的终点地址</span><br>        gva_type[vir_spa_index] = strtol(p3,<span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<span class="hljs-comment">//客户机虚拟地址的类型    </span><br>        <span class="hljs-built_in">strcpy</span>(gva_name[vir_spa_index], p4); <span class="hljs-comment">//地址名称</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(gva_name[vir_spa_index]) == <span class="hljs-number">0</span>) <span class="hljs-comment">//判断名称是不是为空</span><br>        &#123;<br>            gva_seq[vir_spa_index] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(gva_name[vir_spa_index], last_name)!=<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">strcpy</span>(last_name, gva_name[vir_spa_index]);<br>            gva_seq[vir_spa_index] = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//printf(&quot;not equal:%s,%d\n&quot;, gva_name[vir_spa_index], gva_seq[vir_spa_index]);</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            gva_seq[vir_spa_index] = gva_seq[vir_spa_index <span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//printf(&quot;equal:%s,%d\n&quot;, gva_name[vir_spa_index], gva_seq[vir_spa_index]);</span><br>        &#125;<br>        vir_spa_index ++;<br>    &#125;<br>    <span class="hljs-comment">//获取虚拟地址-&gt;物理地址的映射对</span><br>    <span class="hljs-keyword">while</span>(res = fgets(strline, <span class="hljs-number">100</span>, fp)!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(strline, <span class="hljs-string">&quot;####&quot;</span>))<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">char</span> *p1 = strtok(strline, <span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-type">char</span> *p2 = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-type">char</span> *p3 = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;:&quot;</span>);<br>        virt_addr[vir_phy_index] = strtol(p1,<span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<br>        phys_addr[vir_phy_index] = strtol(p2,<span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<br>        prot[vir_phy_index] = strtol(p3,<span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<br>        vir_phy_index ++;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SNAPSHOT_SYNC</span><br>    res = fgets(strline, <span class="hljs-number">100</span>, fp);<br>    syn_shmem_id = strtol(strline,<span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">//获取共享内存的id号</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;syn_shmem_id:%d\n&quot;</span>, syn_shmem_id);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    res = fgets(strline, <span class="hljs-number">100</span>, fp);<br>    accept_fd = strtol(strline, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//网络接收的文件描述符</span><br>    res = fgets(strline, <span class="hljs-number">100</span>, fp);<br>    CP0_UserLocal = strtol(strline, <span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">//CPU数</span><br>    fclose(fp);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="getconfig"><a href="#getconfig" class="headerlink" title="getconfig"></a>getconfig</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">getconfig</span><span class="hljs-params">(<span class="hljs-type">char</span> *keywords, <span class="hljs-type">char</span> *final_value)</span><br>&#123;<br>    FILE *fp = fopen(<span class="hljs-string">&quot;FirmAFL_config&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-type">char</span> StrLine[<span class="hljs-number">256</span>];<br>    assert(fp);<br>    <span class="hljs-keyword">while</span> (!feof(fp)) <br>    &#123; <br>        <span class="hljs-type">char</span> * res = fgets(StrLine,<span class="hljs-number">256</span>,fp);<br>        <span class="hljs-keyword">if</span>(res == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FirmAFL_config has no content\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-type">char</span> * key = strtok(StrLine, <span class="hljs-string">&quot;=&quot;</span>);<br>        <span class="hljs-type">char</span> * value = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;=&quot;</span>);<br>        <span class="hljs-type">int</span> val_len = <span class="hljs-built_in">strlen</span>(value);<br>        <span class="hljs-keyword">if</span>(value[val_len<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        &#123;<br>            value[val_len<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        &#125; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(keywords, key) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">strcpy</span>(final_value, value);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    fclose(fp); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FirmAFL-config"><a href="#FirmAFL-config" class="headerlink" title="FirmAFL_config"></a>FirmAFL_config</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">FirmAFL_config</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> opti_str[<span class="hljs-number">50</span>];<br>    getconfig(<span class="hljs-string">&quot;opti&quot;</span>, opti_str); <span class="hljs-comment">//判断是否开启优化</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(opti_str,<span class="hljs-string">&quot;no&quot;</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>        optimization_level = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(opti_str,<span class="hljs-string">&quot;yes&quot;</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>        optimization_level = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;optimization not assigned\n&quot;</span>);<br>        sleep(<span class="hljs-number">100</span>);<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> FEED_INPUT</span><br>    getconfig(<span class="hljs-string">&quot;feed_type&quot;</span>,feed_type);<br>    assert(<span class="hljs-built_in">strlen</span>(feed_type)&gt;<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(feed_type, <span class="hljs-string">&quot;FEED_ENV&quot;</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>        getconfig(<span class="hljs-string">&quot;lib_name&quot;</span>, lib_name);<br>        <span class="hljs-type">char</span> offset_str[<span class="hljs-number">256</span>];<br>        getconfig(<span class="hljs-string">&quot;environ_offset&quot;</span>, offset_str);<br>        environ_offset = strtol(offset_str, <span class="hljs-literal">NULL</span>, <span class="hljs-number">16</span>);<br>        assert(<span class="hljs-built_in">strlen</span>(lib_name) &gt; <span class="hljs-number">0</span>);<br>        assert(environ_offset!=<span class="hljs-number">0</span>);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-type">char</span> id_str[<span class="hljs-number">256</span>];<br>    <span class="hljs-built_in">memset</span>(id_str, <span class="hljs-number">256</span>, <span class="hljs-number">0</span>);<br>    getconfig(<span class="hljs-string">&quot;id&quot;</span>, id_str);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(id_str) &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        program_id = strtol(id_str, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-x2F-qemu-mode-x2F-DECAF-qemu-2-10-x2F-accel-x2F-tcg-x2F-cpu-exec-c"><a href="#2-x2F-qemu-mode-x2F-DECAF-qemu-2-10-x2F-accel-x2F-tcg-x2F-cpu-exec-c" class="headerlink" title="2.&#x2F;qemu_mode&#x2F;DECAF_qemu_2.10&#x2F;accel&#x2F;tcg&#x2F;cpu-exec.c"></a>2.&#x2F;qemu_mode&#x2F;DECAF_qemu_2.10&#x2F;accel&#x2F;tcg&#x2F;cpu-exec.c</h2><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/52php/p/5861372.html">https://www.cnblogs.com/52php/p/5861372.html</a></p><p><a href="https://xudaxian.xyz/2020/09/05/FIRM-AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://xudaxian.xyz/2020/09/05/FIRM-AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/07/Firm-AFL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/06/07/Firm-AFL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Firm-AFL"><a href="#Firm-AFL" class="headerlink" title="Firm-AFL"></a>Firm-AFL</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Firm-AFL</code>是一款用于对物联网固件进行模糊测试的工具，该工具通过增强进程仿真促进测试效率，拥有QEMU系统仿真与用户模式仿真的优点。更多技术细节可以去查阅论文。</p><p><code>Firm-AFL</code>所依赖的环境较多，搭建起来复杂，因此记录一下搭建<code>Firm-AFL</code>的细节。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><p>首先下载<code>Firm-AFL</code>，<code>git clone https://github.com/zyw-200/FirmAFL.git</code></p></li><li><p>编译全系统仿真以及用户模式仿真的文件</p><ul><li><p>User mode</p><ul><li><pre><code class="shell">cd user_mode/./configure --target-list=mipsel-linux-user,mips-linux-user,arm-linux-user --static --disable-werrormake<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><br>- <span class="hljs-keyword">System</span> mode<br><br>  - ```<span class="hljs-built_in">shell</span><br>    cd qemu_mode/DECAF_qemu_2<span class="hljs-number">.10</span>/<br>    ./configure --target-list=mipsel-softmmu,mips-softmmu,arm-softmmu --<span class="hljs-keyword">disable</span>-werror<br>    <span class="hljs-built_in">make</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>安装<code>firmadyne</code></p><ul><li><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install busybox-static fakeroot git dmsetup kpartx netcat-openbsd nmap python-psycopg2 python3-psycopg2 snmp uml-utilities util-linux vlan<br></code></pre></td></tr></table></figure></li><li><p>下载项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --recursive https://github.com/firmadyne/firmadyne.git<br></code></pre></td></tr></table></figure></li></ul></li><li><p>安装<code>binwalk</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/ReFirmLabs/binwalk.git<br>cd binwalk<br>sudo ./deps.sh<br>sudo python ./setup.py install<br>For Python 2.x, sudo apt-get install python-lzma<br>sudo -H pip install git+https://github.com/ahupp/python-magic<br>sudo -H pip install git+https://github.com/sviehb/jefferson.<br></code></pre></td></tr></table></figure></li><li><p>配置<code>frimadyne</code>数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install postgresql<br>sudo -u postgres createuser -P firmadyne, #密码为firmadyne，创建用户<br>sudo -u postgres createdb -O firmadyne firmware #创建数据库<br><br>xz -d data.xz #作者提供的数据库文件<br>mv  data /firmadyne/database/schema<br>sudo -u postgres psql -d firmware &lt; ./firmadyne/database/schema #导入数据库文件，这里需要采用作者给出的数据库文件<br></code></pre></td></tr></table></figure></li><li><p>通过<code>frimadyne</code>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./firmadyne/download.sh<br></code></pre></td></tr></table></figure></li><li><p>修改<code>frimadyne</code>的配置文件信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gedit ./firmadyne/firmadyne.config<br></code></pre></td></tr></table></figure><p>将注释删掉，并且填写自己<code>firmadyne</code>的路径</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221221152037290.png" alt="image-20221221152037290"></p></li><li><p>制作固件镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./FrimAFL/firmadyne #这里的frimadyne是上面下载的项目<br>sudo python3 ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk &quot;../firmware/DIR-815_FIRMWARE_1.01.ZIP&quot; images #提取镜像，提取的镜像放在了images文件夹下<br>sudo ./scripts/getArch.sh ./images/9050.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里作者修改了makeImage.sh脚本，因此采用作者的脚本</span><br>cp ./FrimAFL/firmadyne_modify/makeImage.sh ./FrimAFL/firmadyne/scripts<br>sudo ./scripts/makeImage.sh 9050<br>sudo ./scripts/inferNetwork.sh 9050<br>cd ..<br>python FirmAFL_setup.py 9050 mipsel<br></code></pre></td></tr></table></figure><p>此时镜像已经制作完毕，如下图</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221221152451038.png" alt="image-20221221152451038"></p></li><li><p>Fuzzing</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./FrimAFL/image_9050<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里可以使用作者提供的启动文件</span><br>cp ./FrimAFL/FirmAFL_config/9050/run.sh ./FrimAFL/image_9050 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里可以通过start.py直接完成仿真+模糊测试</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">python3 start.py</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者分步启动</span><br>sudo ./run.sh #开启仿真<br><br>python3 test.py#可以运行这个测试文件，判断仿真完毕没，这里需要主要偶的时候这个test.py是用python2写的，需要略微修改一下才能用python3启动<br><br>sudo ./user.sh #若test.py可以正常执行，则开始Fuziing<br></code></pre></td></tr></table></figure><ul><li>开始仿真</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221221153545684.png" alt="image-20221221153545684"></p><ul><li>运行测试文件，判断仿真是否完成</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221221153706991.png" alt="image-20221221153706991"></p><ul><li>仿真完成后就可以Fuzzing了</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221221153820363.png" alt="image-20221221153820363"></p></li></ul><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>1.缺少<code>autoreconf</code></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221220160241561.png" alt="image-20221220160241561"></p><p>安装一下<code>autoerconf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install autoconf<br></code></pre></td></tr></table></figure><p>2.<code>possibly undefined macro: AC_PROG_LIBTOOL</code></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221220160448373.png" alt="image-20221220160448373"></p><p>安装一下<code>libtool</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install libtool<br></code></pre></td></tr></table></figure><p>3.找不到<code>-lbfd</code></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221220162308501.png" alt="image-20221220162308501"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install binutils-dev<br></code></pre></td></tr></table></figure><p>4.缺少<code>boost.foreach.hpp</code>文件</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221220163351554.png" alt="image-20221220163351554"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install libboost-dev<br></code></pre></td></tr></table></figure><p>5.<code>libproxychains.so.3</code>出错</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221220172557925.png" alt="image-20221220172557925"></p><p>首先找到安装的路径<code>/usr/lib/x86_64-linux-gnu/libproxychains.so.3</code></p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221220172617556.png" alt="image-20221220172617556"></p><p><code>sudo gedit /usr/bin/proxychains</code>修改配置</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221220172539337.png" alt="image-20221220172539337"></p><p>7.could not be found for jpeg</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20221220234813318.png" alt="image-20221220234813318"></p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt install libjpeg-<span class="hljs-built_in">dev</span> zlib1g-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/firmadyne/firmadyne">https://github.com/firmadyne/firmadyne</a></p><p><a href="https://github.com/zyw-200/FirmAFL">https://github.com/zyw-200/FirmAFL</a></p><p><a href="https://github.com/ReFirmLabs/binwalk">https://github.com/ReFirmLabs/binwalk</a></p><p><a href="https://blog.csdn.net/weixin_43695001/article/details/123486237">https://blog.csdn.net/weixin_43695001/article/details/123486237</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker常用命令</title>
    <link href="/2023/06/07/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/06/07/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="记录Docker常用的命令"><a href="#记录Docker常用的命令" class="headerlink" title="记录Docker常用的命令"></a>记录Docker常用的命令</h1><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a><strong>docker run</strong></h2><p>创建一个新的容器并运行一个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure><ul><li><strong>-d:</strong> 后台运行容器，并返回容器ID</li><li><strong>-i:</strong> 以交互模式运行容器</li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端</li><li><strong>–name&#x3D;”nginx-lb”</strong></li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口</li></ul><h2 id="docker-exec"><a href="#docker-exec" class="headerlink" title="**docker exec **"></a>**docker exec **</h2><p>在运行的容器中执行命令</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">docker exec <span class="hljs-comment">[OPTIONS]</span> <span class="hljs-keyword">CONTAINER</span> COMMAND <span class="hljs-comment">[ARG...]</span><br></code></pre></td></tr></table></figure><ul><li>**-d :**分离模式: 在后台运行</li><li>**-i :**即使没有附加也保持STDIN 打开</li><li>**-t :**分配一个伪终端</li></ul><h2 id="docker-cp"><a href="#docker-cp" class="headerlink" title="docker cp"></a>docker cp</h2><p>用于容器与主机之间的数据拷贝</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下</span><br>docker cp /www/runoob 96f7f14e99ab:/www/<br></code></pre></td></tr></table></figure><h2 id="批量删除镜像"><a href="#批量删除镜像" class="headerlink" title="批量删除镜像"></a>批量删除镜像</h2><h3 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm [-f] $(docker ps -qa)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">根据容器的状态，删除Exited状态的容器</span><br>docker rm $(docker ps -qf status=exited)<br></code></pre></td></tr></table></figure><h3 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rmi [-f] $(docker images -qa)<br></code></pre></td></tr></table></figure><h3 id="按条件删除镜像"><a href="#按条件删除镜像" class="headerlink" title="按条件删除镜像"></a>按条件删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">没有打标签</span><br>docker rmi [-f] $(docker images -q | awk &#x27;/^&lt;none&gt;/ &#123; print $3 &#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">镜像名包含关键字</span><br>docker rmi --force [-f] $(docker images | grep doss-api | awk &#x27;&#123;print $3&#125;&#x27;)  #其中doss-api为关键字<br></code></pre></td></tr></table></figure><h3 id="删除REPOSITORY、TAG为none的镜像（虚悬镜像）"><a href="#删除REPOSITORY、TAG为none的镜像（虚悬镜像）" class="headerlink" title="删除REPOSITORY、TAG为none的镜像（虚悬镜像）"></a>删除REPOSITORY、TAG为none的镜像（虚悬镜像）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">这类无标签镜像也被称为 虚悬镜像(dangling image) ，可以用下面的命令专门显示这类镜像：</span><br>docker image ls -f dangling=true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除</span><br><br>docker rmi $(docker images -q -f dangling=true)<br></code></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.runoob.com/docker/docker-run-command.html">https://www.runoob.com/docker/docker-run-command.html</a></p><p><a href="https://blog.csdn.net/weixin_43702146/article/details/120701988">https://blog.csdn.net/weixin_43702146/article/details/120701988</a></p>]]></content>
    
    
    <categories>
      
      <category>Docker使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装</title>
    <link href="/2023/06/07/Docker%E5%AE%89%E8%A3%85/"/>
    <url>/2023/06/07/Docker%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每次装新版本的<code>Ubuntu</code>时总要上网搜索一下<code>docker</code>安装命令，因此记录一下，免得以后找的时候不方便。</p><p>本文命令都是从<a href="https://zhuanlan.zhihu.com/p/143156163">如何在 Ubuntu 20.04 上安装和使用 Docker</a>抄下来的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装必要的依赖软件，来添加一个新的 HTTPS 软件源</span><br>sudo apt install apt-transport-https ca-certificates<br>curl gnupg-agent software-properties-common<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入源仓库的 GPG key</span><br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将 Docker APT 软件源添加到系统</span><br>sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装</span><br>sudo apt update<br>sudo apt install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/143156163">https://zhuanlan.zhihu.com/p/143156163</a></p>]]></content>
    
    
    <categories>
      
      <category>Docker使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C程序设计语言学习笔记</title>
    <link href="/2023/06/07/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/"/>
    <url>/2023/06/07/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章-导言"><a href="#第1章-导言" class="headerlink" title="第1章 导言"></a>第1章 导言</h1><h2 id="1-1-入门"><a href="#1-1-入门" class="headerlink" title="1.1 入门"></a>1.1 入门</h2><ul><li>函数包含一些语句用于执行指定计算操作</li><li>变量用于存储计算过程需要使用的值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">\n 代表回车符</span><br><span class="hljs-comment">\t 代表制表符</span><br><span class="hljs-comment">\b 代表回退符</span><br><span class="hljs-comment">\&quot; 代表双引号</span><br><span class="hljs-comment">\\ 代表反斜杠</span><br><span class="hljs-comment">\c 代表是字符c</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="1-2-变量与算术表达式"><a href="#1-2-变量与算术表达式" class="headerlink" title="1.2 变量与算术表达式"></a>1.2 变量与算术表达式</h2><ul><li>char字符-一个字节</li><li>short-短整型</li><li>long长整型</li><li>double双精度浮点型</li><li>while循环<ul><li>首先测试圆括号中的判断语句</li><li>接着执行循环体语句（前提是判断语句判断结果为真）</li><li>当判断结果为假则继续执行循环语句后的语句</li></ul></li></ul><h2 id="1-3-for语句"><a href="#1-3-for语句" class="headerlink" title="1.3 for语句"></a>1.3 for语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//执行顺序为数字从小大到</span><br><span class="hljs-keyword">for</span>(①初始化部分;②条件部分;④增加部分)<br>&#123;<br>    ③循环体<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-4-符号常量"><a href="#1-4-符号常量" class="headerlink" title="1.4 符号常量"></a>1.4 符号常量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//定义常量</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> 名字 替换文本 <span class="hljs-comment">//注意没分号</span></span><br></code></pre></td></tr></table></figure><h2 id="1-5-字符输入-x2F-输出"><a href="#1-5-字符输入-x2F-输出" class="headerlink" title="1.5 字符输入&#x2F;输出"></a>1.5 字符输入&#x2F;输出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//从键盘读取一个字符</span><br>c  = getchar()<br><span class="hljs-comment">//输出一个字符</span><br><span class="hljs-built_in">putchar</span>(c)<br></code></pre></td></tr></table></figure><h3 id="1-5-1-文件复制"><a href="#1-5-1-文件复制" class="headerlink" title="1.5.1 文件复制"></a>1.5.1 文件复制</h3><ul><li><code>!=</code>的优先级高于<code>=</code></li></ul><h3 id="1-5-2-字符计数"><a href="#1-5-2-字符计数" class="headerlink" title="1.5.2 字符计数"></a>1.5.2 字符计数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//前缀表达式</span><br>++nc;<br><span class="hljs-comment">//后缀表达式</span><br>nc++;<br></code></pre></td></tr></table></figure><h3 id="1-5-3-行计数"><a href="#1-5-3-行计数" class="headerlink" title="1.5.3 行计数"></a>1.5.3 行计数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-type">int</span> nl;<br>    <span class="hljs-keyword">while</span>((c = getchar())!=EOF)<br>        <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            nl++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,nl);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-4-单词计数"><a href="#1-5-4-单词计数" class="headerlink" title="1.5.4 单词计数"></a>1.5.4 单词计数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> IN 1</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> OUT 2</span><br>    <br>    <span class="hljs-type">int</span> c,nl,nw,nc,state;<br>    <br>    <span class="hljs-keyword">while</span>((c = getchar()) ！= EOF)<br>    &#123;<br>        nc++;<br>        <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            nl++;<br>        <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27; &#x27;</span> || c == <span class="hljs-string">&#x27;\t&#x27;</span> <br>|| <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            state = OUT;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(state == OUT)<br>        &#123;<br>            nw++;<br>            state = IN;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,nl,nw,nc);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-数组"><a href="#1-6-数组" class="headerlink" title="1.6 数组"></a>1.6 数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> ndigit[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> c,i,nwhite,nother;<br>    <br>    nwhite = nother = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>        ndight[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>( (c = getchar()) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>            ++ndigit[c - <span class="hljs-string">&#x27;0&#x27;</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( c == <span class="hljs-string">&#x27; &#x27;</span> || c == <span class="hljs-string">&#x27;\t&#x27;</span> c == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            nwhite++;<br>        <span class="hljs-keyword">else</span> <br>            ++nother;<br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;digits =&quot;</span>);<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,ndigit[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;, white space = %d, other = %d\n&quot;</span>, nwhite, nohter);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7 函数"></a>1.7 函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">返回类型 函数名(<span class="hljs-number">0</span>个或多个参数声明)<br>&#123;<br>    声明部分<br>    语句序列<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-8-参数-传值调用"><a href="#1-8-参数-传值调用" class="headerlink" title="1.8 参数-传值调用"></a>1.8 参数-传值调用</h2><p>在C语言中，被调用函数不能直接修改主调函数中变量的值，而只能修改其私有的临时副本的值。若需要修改主调函数中的变量需要使用指针。</p><h2 id="1-9-字符数组"><a href="#1-9-字符数组" class="headerlink" title="1.9 字符数组"></a>1.9 字符数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1000 <span class="hljs-comment">/*最大的行数*/</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getline</span><span class="hljs-params">(<span class="hljs-type">char</span> line[],<span class="hljs-type">int</span> maxline)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">(<span class="hljs-type">char</span> to[],<span class="hljs-type">char</span> fromp[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getline</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">int</span> lim)</span><br>&#123;<br>    <span class="hljs-type">int</span> c, i;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFd平台搭建</title>
    <link href="/2023/06/07/CTFd%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/06/07/CTFd%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h1><p><code>docker</code>在<code>docker hub</code>拖取镜像加速</p><p><a href="https://www.runoob.com/docker/docker-mirror-acceleration.html">Docker 镜像加速</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一行代码--多媒体</title>
    <link href="/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E8%BF%90%E7%94%A8%E6%89%8B%E6%9C%BA%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <url>/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E8%BF%90%E7%94%A8%E6%89%8B%E6%9C%BA%E5%A4%9A%E5%AA%92%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="运用手机多媒体"><a href="#运用手机多媒体" class="headerlink" title="运用手机多媒体"></a>运用手机多媒体</h1><h2 id="通知-Notification"><a href="#通知-Notification" class="headerlink" title="通知(Notification)"></a>通知(Notification)</h2><p>创建通知的详细步骤</p><ul><li>首先需要一个<code>NotificationManager</code>对通知进行管理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NotificationManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);<br></code></pre></td></tr></table></figure><ul><li>接着使用<code>Builder</code>构造器来创建<code>Notification</code>对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(context).build();<br></code></pre></td></tr></table></figure><ul><li>设置许多方法丰富<code>Notification</code>对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(context)<br>    .setContentTile(<span class="hljs-string">&quot;This is content titile&quot;</span>)<span class="hljs-comment">//用于指定通知的标题内容</span><br>    .setContextText(<span class="hljs-string">&quot;This is content&quot;</span>)<span class="hljs-comment">//指定通知的正文内容</span><br>    .setWhen(System.currentTimeMillis())<span class="hljs-comment">//通知被创建的时间</span><br>    .setSmallIcon(R.drawable.small_icon)<span class="hljs-comment">//设置通知的小图标</span><br>    .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.large_icon))<span class="hljs-comment">//设置通知的大图标</span><br>    .build();<br></code></pre></td></tr></table></figure><ul><li>使用<code>notify()</code>方法可以让通知显示出来<ul><li>参数一：<code>id</code>，保证每个通知所指定的<code>id</code>都是不同的</li><li>参数二：<code>Notification</code>对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">manager.notify(<span class="hljs-number">1</span>,notification);<br></code></pre></td></tr></table></figure><h3 id="NotificationTest"><a href="#NotificationTest" class="headerlink" title="NotificationTest"></a>NotificationTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>        <span class="hljs-keyword">case</span> R.id.send_notice:<br>            <span class="hljs-type">NotificationManager</span> <span class="hljs-variable">notificationManager</span> <span class="hljs-operator">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);<br>            <span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(<span class="hljs-built_in">this</span>)<br>                    .setContentTitle(<span class="hljs-string">&quot;This is content title&quot;</span>)<br>                    .setContentText(<span class="hljs-string">&quot;this is content text&quot;</span>)<br>                    .setWhen(System.currentTimeMillis())<br>                    .setSmallIcon(R.mipmap.ic_launcher)<br>                    .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher))<br>                    .build();<br>            notificationManager.notify(<span class="hljs-number">1</span>,notification);<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="PendingIntent"><a href="#PendingIntent" class="headerlink" title="PendingIntent"></a>PendingIntent</h3><p><code>PendingIntent</code>倾向于在某个合适的时机去执行某个动作。这里第一行代码也比喻为延迟执行的<code>Intent</code></p><p><code>PendingIntent</code>可以用几种方法提供实例</p><ul><li><code>getActivity()</code>方法</li><li><code>getBroadcast()</code>方法</li><li><code>getService()</code>方法</li></ul><p>这几个方法接收参数相同</p><ul><li>参数一：<code>Context</code></li><li>参数二：一般用不到，传入0</li><li>参数三：<code>Intent</code>对象</li><li>参数四：用于确定<code>PendingIntent</code>的行为<ul><li><code>FLAG_ONE_SHOT</code></li><li><code>FLAG_NOCREATE</code></li><li><code>FLAG_CANCEL_CURRENT</code></li><li><code>FLAG_UPDATE_CURRENT</code></li><li>通常传0即可</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">                <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, NotificationActivity.class);<br>                <span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> PendingIntent.getActivity(<span class="hljs-built_in">this</span>,<span class="hljs-number">0</span>,intent,<span class="hljs-number">0</span>);<br>...<br>    .setContentIntent(pi)<br></code></pre></td></tr></table></figure><p><strong>消失显示在系统通知栏的图标</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法一</span><br>.setAutoCancel(<span class="hljs-literal">true</span>)<br><span class="hljs-comment">//方法二</span><br>manager.cancel(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><ul><li><code>setSound()</code>方法用于在通知发出的时候播放一段音频。<ul><li>参数一：接收一个<code>Uri</code>参数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setSound(Uri.fromFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/system/media/audio/ringtones/Luna.ogg&quot;</span>)))<br></code></pre></td></tr></table></figure><ul><li>通知到来的时候让手机进行振动</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">下标为0表示手机静止的时长</span><br><span class="hljs-comment">下标为1表示手机振动的时长</span><br><span class="hljs-comment">下标为2表示手机静止的时长</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">以此类推</span><br><span class="hljs-comment">*/</span><br>.setVibrate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>&#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">还需要添加权限</span><br><span class="hljs-comment">*/</span><br>&lt;uses-permission android:name=<span class="hljs-string">&quot;android.permission.VIBRATE&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ul><li>通知时控制手机LED灯的显示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">第一个参数用于指定LED灯的颜色</span><br><span class="hljs-comment">第二个参数用于指定LED灯亮起的时长</span><br><span class="hljs-comment">第三个参数用于指定LED灯暗去的时长</span><br><span class="hljs-comment">*/</span><br>.setLights(Color.GREEN,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><ul><li>通知的默认效果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setDefaults(NotificationCompat.DEFAULT_ALL)<br></code></pre></td></tr></table></figure><ul><li>显示通知长段文字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setStyle(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.BigTextStyle().bigText(<span class="hljs-string">&quot;.....&quot;</span>))<br></code></pre></td></tr></table></figure><ul><li>显示一张大图片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setStyle(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.BigPictureStyle().bigPicture(BitmapFactory.decodeResource(getResources(),R.drawable.big_image)))<br></code></pre></td></tr></table></figure><ul><li>设置通知的重要程度<ul><li><code>PRIORITY_DEFAULT</code>默认的重要程度</li><li><code>PRIORITY_MIN</code>表示最低的重要程度</li><li><code>PRIORITY_LOW</code>表示较低的重要程度</li><li><code>PRIORITY_HIGH</code>表示较高的重要程度</li><li><code>PRIORITY_MAX</code>表示最高的重要程度，这类通知消息必须要让用户立刻看到</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.setPriority(NotificationCompat.PRIORITY_MAX)<br></code></pre></td></tr></table></figure><h2 id="调用摄像头和相册"><a href="#调用摄像头和相册" class="headerlink" title="调用摄像头和相册"></a>调用摄像头和相册</h2><h3 id="调用摄像头"><a href="#调用摄像头" class="headerlink" title="调用摄像头"></a>调用摄像头</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-comment">//用于存放摄像头拍摄的照片</span><br>                <span class="hljs-comment">//getExternalCacheDir()用于获取应用关联缓冲目录</span><br>                <span class="hljs-comment">//File()参数一为目录，参数二为文件名</span><br>                <span class="hljs-type">File</span> <span class="hljs-variable">outputImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(getExternalCacheDir(),<span class="hljs-string">&quot;output_image.jpg&quot;</span>);<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-comment">//判断文件是否存在</span><br>                    <span class="hljs-keyword">if</span>(outputImage.exists())&#123;<br>                        <span class="hljs-comment">//文件存在则直接删除</span><br>                        outputImage.delete();<br>                    &#125;<br>                    <span class="hljs-comment">//创建新文件</span><br>                    outputImage.createNewFile();<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(Build.VERSION.SDK_INT&gt;=<span class="hljs-number">24</span>)&#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    参数一：context</span><br><span class="hljs-comment">                    参数二：唯一的字符串</span><br><span class="hljs-comment">                    参数三：File对象</span><br><span class="hljs-comment">                     */</span><br>                    imageUri = FileProvider.getUriForFile(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;com.example.cameraalbumtest.fileprovider&quot;</span>,outputImage);<br><br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//将File对象转化为Uri对象</span><br>                    imageUri = Uri.fromFile(outputImage);<br>                &#125;<br>                <span class="hljs-comment">//隐式intent，action为android.media.action.IMAGE_CAPTURE</span><br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;android.media.action.IMAGE_CAPTURE&quot;</span>);<br>                <span class="hljs-comment">//指定图片存储的路径</span><br>                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);<br>                <span class="hljs-comment">//启动activity</span><br>                startActivityForResult(intent,TAKE_PHOTO);<br>            &#125;<br>        &#125;);<br>...<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> resultCode, <span class="hljs-meta">@Nullable</span> Intent data)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>            <span class="hljs-keyword">case</span> TAKE_PHOTO:<br>                <span class="hljs-keyword">if</span>(resultCode == RESULT_OK)&#123;<br>                    <span class="hljs-keyword">try</span>&#123;<br>                        <span class="hljs-comment">//将拍摄的图片解析成Bitmap对象</span><br>                        <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));<br>                        <span class="hljs-comment">//将Bitmap对象使用imageView呈现出来</span><br>                        picture.setImageBitmap(bitmap);<br>                    &#125;<span class="hljs-keyword">catch</span> (FileNotFoundException e)&#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">provider</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;androidx.core.content.FileProvider&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:authorities</span>=<span class="hljs-string">&quot;com.example.cameraalbumtest.fileprovider&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:grantUriPermissions</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:resource</span>=<span class="hljs-string">&quot;@xml/file_paths&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">meta-data</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">provider</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>file_paths.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">paths</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">files-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my_images&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;.&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">paths</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="调用相册"><a href="#调用相册" class="headerlink" title="调用相册"></a>调用相册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>        chooseFromAlbum.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-comment">//检查是否有写外部存储的权限</span><br>                <span class="hljs-keyword">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class="hljs-built_in">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)<br>                != PackageManager.PERMISSION_GRANTED)&#123;<br>                    <span class="hljs-comment">//若没有则请求获取，利用String[]&#123;&#125;写入需要获得的权限</span><br>                    ActivityCompat.requestPermissions(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class="hljs-number">1</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    openAlbum();<br>                &#125;<br>            &#125;<br>        &#125;);<br>...<br>        <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">openAlbum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;android.intent.action.GET_CONTENT&quot;</span>);<br>        intent.setType(<span class="hljs-string">&quot;image/*&quot;</span>);<br>        startActivityForResult(intent,CHOOSE_PHOTO);<br>    &#125;<br>...<br>        <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span>(grantResults.length&gt;<span class="hljs-number">0</span>&amp;&amp;grantResults[<span class="hljs-number">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;<br>                    openAlbum();<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;You denied the permission&quot;</span>,Toast.LENGTH_SHORT).show();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>...<br>               <span class="hljs-keyword">case</span> CHOOSE_PHOTO:<br>                <span class="hljs-keyword">if</span>(resultCode == RESULT_OK)&#123;<br>                    <span class="hljs-keyword">if</span>(Build.VERSION.SDK_INT&gt;=<span class="hljs-number">19</span>)&#123;<br>                        handleImageOnKitKat(data);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        handleImageBeforeKitKat(data);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>...<br>        <span class="hljs-comment">//指示Lint应将此类型视为针对给定API级别，无论项目的target版本是多少</span><br>    <span class="hljs-meta">@TargetApi(19)</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleImageOnKitKat</span><span class="hljs-params">(Intent data)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">imagePath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        getData()检索intent正在操作的数据</span><br><span class="hljs-comment">        Uri代表要操作的数据</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> data.getData();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        DocumentsContract用于定义documents provider和平台之间的连接</span><br><span class="hljs-comment">        isDocumentUri()方法用于测试给定的Uri是否为DocumentsProvider支持的Document</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(DocumentsContract.isDocumentUri(<span class="hljs-built_in">this</span>,uri))&#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            Uri:content://com.android.providers.media.documents/document/image%3A447</span><br><span class="hljs-comment">             */</span><br><br>            <span class="hljs-comment">//如果是document类型的Uri，则通过document id处理</span><br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            在4.4之前Uri的形式Uri ： content://media/extenral/images/media/17766</span><br><span class="hljs-comment">            在4.4之后Uri的形式content://com.android.providers.media.documents/document/image%3A82482</span><br><span class="hljs-comment">            参考https://blog.csdn.net/yancychas/article/details/76695136</span><br><span class="hljs-comment">            4.4之后的Uri经过了documents的封装</span><br><span class="hljs-comment">             */</span><br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            这里取出的docId为image:447，即取出document后面的值</span><br><span class="hljs-comment">             */</span><br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">docId</span> <span class="hljs-operator">=</span> DocumentsContract.getDocumentId(uri);<br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            getAuthority()方法用于获取URI中authority的部分的解码</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;com.android.providers.media.documents&quot;</span>.equals(uri.getAuthority()))&#123;<br>                <span class="hljs-comment">//取出id值</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> docId.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>];<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                MediaStore用于连接medio provider 与应用程序</span><br><span class="hljs-comment">                MediaStore.Images用于收集所有MIME类型的images</span><br><span class="hljs-comment">                MIME类型是媒体类型</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">selection</span> <span class="hljs-operator">=</span> MediaStore.Images.Media._ID + <span class="hljs-string">&quot;=&quot;</span> + id;<br>                imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,selection);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;content&quot;</span>.equalsIgnoreCase(uri.getScheme()))&#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                uri.getScheme()用于获取主机号</span><br><span class="hljs-comment">                 */</span><br>                imagePath = getImagePath(uri,<span class="hljs-literal">null</span>);<br>            &#125;<span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;file&quot;</span>.equalsIgnoreCase(uri.getScheme()))&#123;<br>                imagePath = uri.getPath();<br>            &#125;<br>            displayImage(imagePath);<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleImageBeforeKitKat</span><span class="hljs-params">(Intent data)</span>&#123;<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> data.getData();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">imagePath</span> <span class="hljs-operator">=</span> getImagePath(uri,<span class="hljs-literal">null</span>);<br>        displayImage(imagePath);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getImagePath</span><span class="hljs-params">(Uri uri,String selection)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">           query()方法用于检索数据</span><br><span class="hljs-comment">           参数一:uri 类型Uri 为检索的内容</span><br><span class="hljs-comment">           参数二:projection 类型String 要返回的列表</span><br><span class="hljs-comment">           参数三:queryArgs 类型Bundle 包含操作所需的附加消息</span><br><span class="hljs-comment">           参数四:cancellationSignal 取消正在进行的操作信号</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> getContentResolver().query(uri,<span class="hljs-literal">null</span>,selection,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span>(cursor != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(cursor.moveToFirst())&#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                getColumnIndex(String columnName)用于获取指定列的下标</span><br><span class="hljs-comment">                 */</span><br>                path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));<br>                System.out.println(path);<br>            &#125;<br>            cursor.close();<br>        &#125;<br>        <span class="hljs-keyword">return</span> path;<br>    &#125;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayImage</span><span class="hljs-params">(String imagePath)</span>&#123;<br>        <span class="hljs-keyword">if</span>(imagePath!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeFile(imagePath);<br>            picture.setImageBitmap(bitmap);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;failed to get image&quot;</span>,Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="播放多媒体文件"><a href="#播放多媒体文件" class="headerlink" title="播放多媒体文件"></a>播放多媒体文件</h2><h3 id="播放音频"><a href="#播放音频" class="headerlink" title="播放音频"></a>播放音频</h3><ul><li>首先需要创建<code>MeidaPlayer</code>对象</li><li>接着调用<code>setDataSource()</code>方法设置音频文件的路径</li><li>再调用<code>prepare()</code>方法使<code>MediaPlayer</code>进入到准备状态</li><li>调用<code>start()</code>方法开始播放音频</li><li>调用<code>pause()</code>方法暂停播放</li><li>调用<code>reset()</code>方法就会停止播放</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMediaPlayer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>           <span class="hljs-comment">// System.out.println(Environment.getExternalStorageDirectory());</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/storage/emulated/0/Pictures&quot;</span>,<span class="hljs-string">&quot;music.mp3&quot;</span>);<br>            mediaPlayer.setDataSource(file.getPath());<br>            mediaPlayer.prepare();<span class="hljs-comment">//这里不能漏掉，否则会报错</span><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);<br>        <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span>(grantResults.length&gt;<span class="hljs-number">0</span>&amp;&amp;grantResults[<span class="hljs-number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;<br>                    initMediaPlayer();<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;拒绝权限将无法继续使用&quot;</span>,Toast.LENGTH_SHORT).show();<br>                    finish();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>            <span class="hljs-keyword">case</span> R.id.play:<br>                <span class="hljs-keyword">if</span>(!mediaPlayer.isPlaying())&#123;<br>                    mediaPlayer.start();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.stop:<br>                <span class="hljs-keyword">if</span>(mediaPlayer.isPlaying())&#123;<br>                    mediaPlayer.reset();<br>                    initMediaPlayer();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.pause:<br>                <span class="hljs-keyword">if</span>(mediaPlayer.isPlaying())&#123;<br>                    mediaPlayer.pause();<br>                &#125;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        <span class="hljs-keyword">if</span>(mediaPlayer != <span class="hljs-literal">null</span>)&#123;<br>            mediaPlayer.stop();<br>            mediaPlayer.release();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener &#123;<br>    <span class="hljs-keyword">private</span> VideoView videoView;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        videoView = findViewById(R.id.video_view);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">play</span> <span class="hljs-operator">=</span> (Button)findViewById(R.id.play);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">pause</span> <span class="hljs-operator">=</span> (Button)findViewById(R.id.pause);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">replay</span> <span class="hljs-operator">=</span> (Button)findViewById(R.id.replay);<br>        play.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        pause.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        replay.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class="hljs-built_in">this</span>,Manifest.permission.WRITE_EXTERNAL_STORAGE)!=<br>                PackageManager.PERMISSION_GRANTED)&#123;<br>            ActivityCompat.requestPermissions(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            initVideoPath();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initVideoPath</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/storage/emulated/0/Pictures&quot;</span>,<span class="hljs-string">&quot;movie.mp4&quot;</span>);<br>        videoView.setVideoPath(file.getPath());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>            <span class="hljs-keyword">case</span> R.id.play:<br>                <span class="hljs-keyword">if</span>(!videoView.isPlaying())&#123;<br>                    videoView.start();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.pause:<br>                <span class="hljs-keyword">if</span>(videoView.isPlaying())&#123;<br>                    videoView.pause();<br>                &#125;<br>            <span class="hljs-keyword">case</span> R.id.replay:<br>                <span class="hljs-keyword">if</span>(videoView.isPlaying())&#123;<br>                    videoView.resume();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span>(grantResults.length&gt;<span class="hljs-number">0</span>&amp;&amp;grantResults[<span class="hljs-number">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;<br>                    initVideoPath();<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;拒绝权限无法使用程序&quot;</span>,Toast.LENGTH_SHORT).show();<br>                &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        <span class="hljs-keyword">if</span>(videoView!=<span class="hljs-literal">null</span>)&#123;<br>            videoView.suspend();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一行代码--活动</title>
    <link href="/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E6%B4%BB%E5%8A%A8/"/>
    <url>/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E6%B4%BB%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><h2 id="什么是Activity"><a href="#什么是Activity" class="headerlink" title="什么是Activity?"></a>什么是Activity?</h2><p><code>Activity</code>包含用户组件用于与用户进行交互。</p><h2 id="onCreate-方法"><a href="#onCreate-方法" class="headerlink" title="onCreate()方法"></a>onCreate()方法</h2><p>每个<code>Activity</code>都需要继承父类的<code>OnCreate()</code>方法</p><h2 id="setContentView-方法"><a href="#setContentView-方法" class="headerlink" title="setContentView()方法"></a>setContentView()方法</h2><p>给当前的活动加载一个布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">setContentView(布局文件的id);<br></code></pre></td></tr></table></figure><p>项目中添加任何资源都会在<code>R</code>文件中生成一个相应的资源<code>id</code></p><h2 id="布局文件涉及的元素"><a href="#布局文件涉及的元素" class="headerlink" title="布局文件涉及的元素"></a>布局文件涉及的元素</h2><ul><li><code>Button</code>：插入一个按钮</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>android:id=@+id/id_name</code>:定义一个名为<code>id_name</code>的<code>id</code></li><li><code>android:id=@id/id_name</code>:引用一个名为<code>id_name</code>的<code>id</code></li><li><code>android:layout_width</code>:指定当前元素的宽度</li><li><code>andorid:layout_height</code>:指定当前元素的高度</li><li><code>match_parent</code>:当前元素与父元素一样宽</li><li><code>android:text</code>:指定元素内显示的文字内容</li><li><code>wrap_content</code>:当前元素的高度&#x2F;宽度刚好能够包含内容</li></ul><h2 id="AndroidManifest文件中注册"><a href="#AndroidManifest文件中注册" class="headerlink" title="AndroidManifest文件中注册"></a>AndroidManifest文件中注册</h2><ul><li><p>活动注册声明需要放在<code>&lt;application&gt;</code>标签内</p></li><li><p>通过<code>&lt;activity&gt;</code>标签进行注册</p><ul><li><code>andorid:name</code>指定注册的<code>activity</code></li><li>由于<code>&lt;manifest&gt;</code>标签已经标明程序包名，因此使用<code>.FirstActivity</code>即可标明<code>activity</code></li><li><code>&lt;intent-filter&gt;</code>标签用于标明哪个活动首先启动，若没有定义主活动，那么该活动无法在启动器中看到或打开，该活动通常作为第三方服务器供其他应用在内部调用。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>&lt;android:label&gt;</code>:指定活动中标题栏的内容，标题栏在活动的最顶部</p></li></ul><h2 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h2><p><code>Toast</code>是<code>Android</code>系统提供的提醒方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Button</span> <span class="hljs-variable">button1</span> <span class="hljs-operator">=</span> (Button) findViewById(R.id.button_1);<br>button1.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        Toast.makeText(FirstActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;You clicked Button 1&quot;</span>, Toast.LENGTH_SHORT).show();<br></code></pre></td></tr></table></figure><ul><li><code>findViewById()</code>方法用于获取在布局文件中定义的元素。<ul><li>返回值:<code>View</code>对象</li></ul></li><li><code>setOnClickListener()</code>方法为按钮注册一个监听器，点击按钮则会执行监听器中的<code>OnClick()</code>方法。</li><li><code>Toast()</code>方法有三个参数<ul><li>参数一:<code>Context</code>即是<code>Toast</code>要求的上下文，活动本身就是一个<code>Context</code>对象，因此将当前活动传入</li><li>参数二:<code>Toast</code>显示的内容</li><li>参数三:显示时长</li></ul></li></ul><h2 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/add_item&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Add&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/remove_item&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Remove&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;item&gt;</code>:用于创建具体的某一个菜单项</li><li><code>android:id</code>:给菜单项指定唯一的标识符</li><li><code>android:title</code>:给这个菜单项指定一个名称</li></ul><h3 id="onCreateOptionsMenu-方法"><a href="#onCreateOptionsMenu-方法" class="headerlink" title="onCreateOptionsMenu()方法"></a>onCreateOptionsMenu()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu)</span> &#123;<br>     getMenuInflater().inflate(R.menu.main,menu);<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> &#125;<br></code></pre></td></tr></table></figure><ul><li><code>getMenuInflater()</code>方法用于获取<code>Menuinflate</code>对象</li><li><code>inflate()</code>方法用于给当前活动创建菜单<ul><li>参数一:通过哪个资源文件来创建菜单</li><li>参数二:指定我们的菜单项加载到哪一个<code>Menu</code>对象</li><li>返回值:布尔值<ul><li><code>true</code>代表允许创建的菜单显示出来</li><li><code>false</code>代表菜单无法显示</li></ul></li></ul></li></ul><h3 id="onOptionsItemSelected-方法"><a href="#onOptionsItemSelected-方法" class="headerlink" title="onOptionsItemSelected()方法"></a>onOptionsItemSelected()方法</h3><p>用于判断我们点击的是哪一个菜单项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onOptionsItemSelected</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MenuItem item)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (item.getItemId())<br>        &#123;<br>            <span class="hljs-keyword">case</span> R.id.add_item:<br>                Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;You clicked Add&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.remove_item:<br>                Toast.makeText(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;You clicked remove&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>             <span class="hljs-keyword">default</span>:<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="销毁活动"><a href="#销毁活动" class="headerlink" title="销毁活动"></a>销毁活动</h2><ul><li>点击<code>Back</code>键</li><li>使用<code>finsh()</code>方法</li></ul><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p><code>Intent</code>是<code>Android</code>程序中各组件之间进行交互的一种重要方式</p><ul><li>用于指定当前组件想要执行的动作</li><li>在不同组件之间传递数据</li><li>可用于启动活动、服务、广播等场景。</li></ul><h3 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h3><p>构造方法<code>Intent(Context packageContext, Class&lt;?&gt;cls)</code></p><ul><li>第一个参数:启动活动的上下文</li><li>第二个参数:想要启动的目标活动</li></ul><p><code>StartActivity()</code>方法：</p><ul><li>参数一:<code>Intent</code>参数</li><li>用于启动目标活动</li></ul><h3 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h3><p>隐式<code>Intent</code>不明确指出想要启动哪个活动，而是指定<code>action</code>和<code>category</code>，然后由系统分析哪个<code>Intent</code>，并找出合适的活动。</p><p><code>&lt;activity&gt;</code>标签下配置<code>&lt;intent-filter&gt;</code>内容用于指定活动能够相应的<code>action</code>和<code>category</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.SecondActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.activitytest.ACTION_START&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.example.activitytest.ACTION_START&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="更多隐式Intent的用法"><a href="#更多隐式Intent的用法" class="headerlink" title="更多隐式Intent的用法"></a>更多隐式Intent的用法</h3><p>隐式<code>Intent</code>不仅可以启动自己程序内的活动，还可以其他程序的活动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_VIEW);<br>intent.setData(Uri.parse(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>));<br>startActivity(intent);<br></code></pre></td></tr></table></figure><ul><li><code>Uri.parse()</code>方法将网址字符串解析成一个<code>Uri</code>对象</li><li><code>setData()</code>方法接受一个<code>Uri</code>对象，用于指定当前<code>Intent</code>正在操作的数据。</li><li><code>&lt;data&gt;</code>标签:用于更加准确地指定当前活动能够响应什么类型地数据。<ul><li><code>android:scheme</code>用于指定数据的协议</li><li><code>android:host</code>指定数据的主机名</li><li><code>android:port</code>指定端口</li><li><code>android:path</code>指定路径</li><li><code>andorid:mimeType</code>:指定处理的数据类型</li></ul></li></ul><h2 id="向下一个活动传递数据"><a href="#向下一个活动传递数据" class="headerlink" title="向下一个活动传递数据"></a>向下一个活动传递数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//FirstActivity</span><br><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello SecondActivity&quot;</span>;<br>.....<br>intent.putExtra(<span class="hljs-string">&quot;extra_data&quot;</span>,data);<br><br><span class="hljs-comment">//SecondActivity</span><br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> getIntent();<br><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> intent.getStringExtra(<span class="hljs-string">&quot;extra_data&quot;</span>);<br>Log.d(<span class="hljs-string">&quot;SecondActivity&quot;</span>,data);<br></code></pre></td></tr></table></figure><ul><li><p><code>putExtra()</code>用于传递数据</p><ul><li>参数一:键值</li><li>参数二:需要传递的数据</li></ul></li><li><p><code>getIntent()</code>方法用于获取到启动<code>SecondActivity</code>的<code>Intent</code></p></li><li><p><code>getStringExtra()</code>方法用来获取传递的数据</p></li></ul><h2 id="返回数据给上一个活动"><a href="#返回数据给上一个活动" class="headerlink" title="返回数据给上一个活动"></a>返回数据给上一个活动</h2><p><code>startActivityForResult()</code>方法:用于启动活动，与<code>startActivity()</code>方法不同的是该方法可以在活动销毁时返回一个结果给上一个活动。</p><ul><li>参数一:<code>intent</code>对象</li><li>参数二:请求码，用于标识请求的<code>Activity</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//FirstActivity</span><br>...<br>startActivityForResult(intent,<span class="hljs-number">1</span>);<br>...<br><span class="hljs-comment">//SecondActivity</span><br>...<br>intent.putExtra(<span class="hljs-string">&quot;data_return&quot;</span>,<span class="hljs-string">&quot;Hello FirstActivity&quot;</span>);<br>setResult(RESULT_OK,intent);<br>finish();<br></code></pre></td></tr></table></figure><p><code>setResult()</code>方法</p><ul><li>参数一:用于向上一个活动返回处理结果</li><li>参数二:将带有数据的<code>Intent</code>传递回去</li></ul><p>使用<code>startActivityForResult()</code>方法启动的活动，在被销毁时会毁掉上一个活动的<code>onActivityResult()</code>方法，因此需要重写<code>onActivityResult()</code>方法来得到返回的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> resultCode, <span class="hljs-meta">@Nullable</span> Intent data)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (requestCode)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span>(resultCode == RESULT_OK)<br>            &#123;<br>                <span class="hljs-type">String</span>  <span class="hljs-variable">returnedData</span> <span class="hljs-operator">=</span> data.getStringExtra(<span class="hljs-string">&quot;extra_data&quot;</span>);<br>                Log.d(<span class="hljs-string">&quot;FirstActivity&quot;</span>,returnedData);<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>onActivityResult()</code>方法</p><ul><li>参数一<code>requestCode</code>:启动活动时传入的请求码</li><li>参数二<code>resultCode</code>:返回数据时传入的处理结果</li><li>参数三<code>data</code>:携带返回数据的<code>Intent</code></li></ul><p>当点击<code>Back</code>按键时，需要重写需要销毁活动中的<code>onBackPressed()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBackPressed</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> getIntent();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello MainActivity&quot;</span>;<br>    intent.putExtra(<span class="hljs-string">&quot;extra_data&quot;</span>,data);<br>    setResult(RESULT_OK,intent);<br>    finish();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="活动的生命周期"><a href="#活动的生命周期" class="headerlink" title="活动的生命周期"></a>活动的生命周期</h2><h3 id="返回栈"><a href="#返回栈" class="headerlink" title="返回栈"></a>返回栈</h3><p><code>Android</code>使用任务(<code>Task</code>)来管理活动，一个任务就是一组放在栈里的活动的集合，这个栈被称之为活动栈(<code>Back Stack</code>)。</p><h3 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h3><ul><li>运行状态:处于栈顶的活动</li><li>暂停状态:不处于栈顶但是仍然可见</li><li>停止状态:不处于栈顶且不可见，当需要内存时，停止的活动就会被系统回收</li><li>销毁状态:当一个活动移除栈中就处于该状态</li></ul><h3 id="活动的生成期"><a href="#活动的生成期" class="headerlink" title="活动的生成期"></a>活动的生成期</h3><p><code>Activity</code>类定义的7个回调方法对应活动的生命周期</p><ul><li><code>onCreate()</code>:活动第一次被创建时调用，该方法完成初始化操作。</li><li><code>onStart()</code>:该方法由不可见转化为可见时调用</li><li><code>onResume()</code>:该方法在准备好和用户进行交互的时候调用，此时该活动一定处于栈顶</li><li><code>onPause()</code>:这个方法在系统准备启动或者恢复另一个活动的时候调用</li><li><code>onStop()</code>:这个方法在活动完全不可见的时候调用。与<code>onPause()</code>方法的区别在于，若启动一个新的活动是对话框的活动那么<code>onPause()</code>方法会调用但是<code>onStop()</code>方法不会被调用</li><li><code>onDestory()</code>:这个方法在活动被销毁之前调用，之后该活动的状态变为销毁状态</li><li><code>onRestart()</code>:这个方法在活动由停止状态变为运行状态之前调用</li><li>完整生存期:活动在<code>onCreate()</code>方法和<code>onDestory()</code>方法之间所经历的。</li><li>可见生存期:活动在<code>onStart()</code>方法和<code>onStop()</code>方法之间所经历的</li><li>前台生存期:活动在<code>onResume()</code>方法和<code>onPause()</code>方法之间所经历的</li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220117175350351.png" alt="image-20220117175350351"></p><h3 id="活动被回收"><a href="#活动被回收" class="headerlink" title="活动被回收"></a>活动被回收</h3><p>当活动<code>A</code>调用活动<code>B</code>，活动<code>B</code>返回活动<code>A</code>时，活动<code>A</code>已经被回收，此时会通过<code>onCreate()</code>重新创造活动<code>A</code>，但是此时在活动<code>A</code>的数据会消失，在活动销毁之前会调用<code>onSaveInstanceState()</code>方法。该方法写到<code>Bundle</code>类型的参数，并且听过方法用于保存数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSaveInstanceState</span><span class="hljs-params">(Bundle outState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onSaveInstanceState(outState);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">tempData</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Something you just typed&quot;</span>;<br>    outState.putString(<span class="hljs-string">&quot;data_key&quot;</span>,tempData);<br>&#125;<br></code></pre></td></tr></table></figure><p>而<code>onCreate()</code>方法存在参数<code>Bundle</code>。</p><h3 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h3><p>启动模式有4种，分别是<code>standard</code>、<code>singleTop</code>、<code>singleTask</code>和<code>singleInstance</code>，可以通过<code>android:launchMode</code>属性选择启动模式。</p><ul><li><p><code>standard</code>:就是默认的模式，使用返回栈存储活动，即使调用的活动已经在栈顶，仍然会将该活动当成新的栈顶。此时栈中就会存在两个相同的活动。</p></li><li><p><code>singleTop</code>:会改进<code>standard</code>模式，当调用的活动已经存在栈顶时，不会再调用。但是会出现这种情况当活动<code>A</code>调用活动<code>B</code>，活动<code>B</code>再次调用活动<code>A</code>时，栈的情况<code>A--&gt;B--&gt;A</code>，此时栈上会出现两个活动<code>A</code>的实例。</p></li><li><p><code>singleTask</code>:解决<code>singleTop</code>出现多个相同实例的情况，若发现需要调用的活动，在栈上存在实例则直接取出该实例，而不会另外新增一个该活动的实例。并且把该活动之上的所有实例弹出栈。</p></li><li><p><code>singleInstance</code>:指定了<code>singleInstance</code>模式的活动会启用一个新的返回栈来管理这个活动。此时可以实现其他程序与自己的程序共享一个活动的实例，由于每个程序有自己的一个返回栈，若不采用该启动模式，相同活动在不同的返回栈中存在不同的实例也就不可能共享相同的实例了。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一行代码--广播</title>
    <link href="/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E5%B9%BF%E6%92%AD/"/>
    <url>/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E5%B9%BF%E6%92%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h1><p>为了方便进行系统级别的消息通知，<code>Android</code>引用一套广播消息机制。<code>Android</code>中的每个应用程序可以对自己感兴趣的广播进行注册。</p><ul><li>标志广播:是一种完全异步执行的广播，广播发出时，所有广播接收器几乎在同一时刻接收到这条广播信息。</li><li>有序广播:是一种同步执行的广播，在广播发出时，同一时刻只会有一个广播接收器能够收到这条广播信息，当这个广播接收器逻辑执行完毕后，广播才会继续传递。此时的广播具有优先级，优先级高的广播接收器可以先收到广播信息，并且前面的广播接收器还可以截断正在传递的广播。</li></ul><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><ul><li>动态注册：在代码中注册</li><li>静态注册：<code>AndroidManifest.xml</code>注册</li></ul><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br>    intentFilter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<span class="hljs-comment">//意图过滤器</span><br>    intentFilter.addAction(<span class="hljs-string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);<br>    networkChangeReceiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetworkChangeReceiver</span>();<br>    registerReceiver(networkChangeReceiver,intentFilter);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onDestroy();<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkChangeReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;onReceive&quot;</span>, <span class="hljs-string">&quot;onReceive: 11111&quot;</span>);<br>        Toast.makeText(context,<span class="hljs-string">&quot;network changes&quot;</span>,Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>IntentFilter</code>:意图拦截器，用于拦截符合<code>action</code>和<code>category</code>的意图，这里需要接收网络修改的广播，因此行为为<code>&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</code></p></li><li><p><code>NetworkChangeReceiver</code>类是继承了广播类并重写了接收到广播的方法</p></li><li><p><code>registerReceiver()</code>方法用于注册广播接收器</p><ul><li>参数一:需要注册的广播接收器</li><li>参数二:需要接收广播的行为</li></ul></li><li><p><code>unregisterReceiver()</code>方法用于取消注册</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>            <span class="hljs-type">ConnectivityManager</span> <span class="hljs-variable">connectivityManager</span> <span class="hljs-operator">=</span> (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);<br>            <span class="hljs-type">NetworkInfo</span> <span class="hljs-variable">networkInfo</span> <span class="hljs-operator">=</span> connectivityManager.getActiveNetworkInfo();<br>            <span class="hljs-keyword">if</span>(networkInfo != <span class="hljs-literal">null</span> &amp;&amp; networkInfo.isAvailable())<br>            &#123;<br>                Toast.makeText(context,<span class="hljs-string">&quot;network is available&quot;</span>, Toast.LENGTH_SHORT).show();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                Toast.makeText(context,<span class="hljs-string">&quot;network is unavailable&quot;</span>,Toast.LENGTH_SHORT).show();<br>            &#125;<br><br>        &#125;<br></code></pre></td></tr></table></figure><ul><li><code>getSystemService()</code>方法用于获取系统服务类</li><li><code>ConnectivityManager</code>类是专门用于管理网络连接</li><li><code>getActiveNetworkInfo()</code>方法用于获取网络状态</li></ul><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>动态注册更灵活但是必须程序运行时才能接收广播，但是静态注册可以在程序未启动的时候接收广播。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.BootCompleteReceiver&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>android:name</code>用于指定注册的广播接收器</li><li><code>android:enabled</code>表示是否启用该广播接收器</li><li><code>android:exported</code>表示是否允许这个广播接收器接收本程序以外的广播</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span>/&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.BootCompleteReceiver&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于<code>Android</code>系统启动时会发出值为<code>android.intent.action.BOOT_COMPLETED</code>的广播，因此添加相应的<code>action</code>。</p><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>首先自定义一个广播接收器，<code>&lt;intent-filter&gt;</code>标签内需要拦截的行为为<code>&quot;com.example.mybroadcastreceiver.MY_BROADCAST&quot;</code>，接着发送广播的行为也为这个，即可发送和接收广播。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.example.mybroadcastreceiver.MY_BROADCAST&quot;</span>);<br>sendBroadcast(intent);<br></code></pre></td></tr></table></figure><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>广播可以跨进程通信。</p><ul><li><code>sendOrderedBroadcast(intent,null)</code>方法可以发送有序广播<ul><li>参数一：<code>Intent</code>对象</li><li>参数二：与权限相关的字符串</li></ul></li><li><code>android:prority</code>可以自定义广播的优先级</li><li><code>abortBroadcast()</code>方法可以拦截广播</li></ul><h2 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h2><ul><li>本地广播是在程序内部的广播，防止接收垃圾广播，或者广播中携带安全数据被恶意劫持。</li><li>本地广播无法静止注册</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-keyword">private</span> IntentFilter intentFilter;<br>    <span class="hljs-keyword">private</span> LocalReceiver localReceiver;<br>    <span class="hljs-keyword">private</span> LocalBroadcastManager localBroadcastManager;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        localBroadcastManager =  LocalBroadcastManager.getInstance(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> (Button) findViewById(R.id.button);<br>        button.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.example.mybroadcastreceiver.MY_BROADCAST&quot;</span>);<br>                localBroadcastManager.sendBroadcast(intent);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        localBroadcastManager.unregisterReceiver(localReceiver);<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>            Toast.makeText(context,<span class="hljs-string">&quot;received local  broadcast&quot;</span>,Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本地广播使用动态注册。</p><ul><li><code>LocalBroadcastManager</code>：用于在同一个应用内的不同组件间发送Broadcast</li></ul><h2 id="强制下线功能"><a href="#强制下线功能" class="headerlink" title="强制下线功能"></a>强制下线功能</h2><p><strong>ActivityConllector</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivityCollector</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> List&lt;Activity&gt;activities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addActivity</span><span class="hljs-params">(Activity activity)</span>&#123;<br>        activities.add(activity);<span class="hljs-comment">//增加活动</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeActivity</span><span class="hljs-params">(Activity activity)</span>&#123;<br>        activities.remove(activity);<span class="hljs-comment">//删除活动</span><br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finishAll</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//移除所有活动</span><br>        <span class="hljs-keyword">for</span>(Activity activity:activities)&#123;<br>            <span class="hljs-keyword">if</span>(!activity.isFinishing())&#123;<br>                activity.finish();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ForceOfflineReceiver类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">.....<br>    <span class="hljs-comment">//需要在Resume与Pause中重写代码，强制下线的对话框需要在栈顶的活动实例中展现，不需要每个活动实例都弹出对话框。</span><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onResume();<br>        <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>        intentFilter.addAction(<span class="hljs-string">&quot;com.example.broadcastbestpractice.FORCE_OFFLINE&quot;</span>);<br>        receiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForceOfflineReceiver</span>();<br>        registerReceiver(receiver,intentFilter);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onPause();<br>        <span class="hljs-keyword">if</span>(receiver!=<span class="hljs-literal">null</span>)&#123;<br>            unregisterReceiver(receiver);<br>            receiver = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>.....<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForceOfflineReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context context, Intent intent)</span> &#123;<br>            AlertDialog.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlertDialog</span>.Builder(context);<span class="hljs-comment">//创建一个对话框</span><br>            builder.setTitle(<span class="hljs-string">&quot;Warning&quot;</span>);<span class="hljs-comment">//设置标题</span><br>            builder.setMessage(<span class="hljs-string">&quot;You are forced to be offline. Please try to login agin&quot;</span>);<span class="hljs-comment">//设置消息</span><br>            builder.setCancelable(<span class="hljs-literal">false</span>);<span class="hljs-comment">//取消功能必须删除，否则无法强制下线</span><br>            <span class="hljs-comment">//点击OK会触发的时间</span><br>            builder.setPositiveButton(<span class="hljs-string">&quot;OK&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DialogInterface</span>.OnClickListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(DialogInterface dialog, <span class="hljs-type">int</span> which)</span> &#123;<br>                    ActivityCollector.finishAll();<span class="hljs-comment">//将所有活动移除</span><br>                    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(context,LoginActivity.class);<br>                    context.startActivity(intent);<span class="hljs-comment">//重新跳转到登陆页面</span><br>                &#125;<br>            &#125;);<br>            builder.show();<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一行代码--服务</title>
    <link href="/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/06/07/Android%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81--%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><ul><li>服务(Service)用于<code>Android</code>实现程序后台运行。适合不需要与用户交互且长期运行的任务。</li><li>服务并不是运行在独立进程中，而是依赖于创建服务所在的进程中，若该进程被杀死，服务也会停止。</li></ul><h2 id="Android多线程编程"><a href="#Android多线程编程" class="headerlink" title="Android多线程编程"></a>Android多线程编程</h2><h3 id="线程基本用法"><a href="#线程基本用法" class="headerlink" title="线程基本用法"></a>线程基本用法</h3><p><strong>通过类继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//处理具体的逻辑</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//启动</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>().start();<br></code></pre></td></tr></table></figure><p><strong>通过实现接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//处理具体的逻辑</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//启动</span><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread).start();<br></code></pre></td></tr></table></figure><p><strong>匿名类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//处理具体的逻辑</span><br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><h2 id="子线程中更新UI"><a href="#子线程中更新UI" class="headerlink" title="子线程中更新UI"></a>子线程中更新UI</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>        <span class="hljs-keyword">case</span> R.id.change_text:<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-comment">//在子线程中对UI进行修改</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    text.setText(<span class="hljs-string">&quot;Nice to meet ou&quot;</span>);<br>                &#125;<br>            &#125;).start();<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>运行会出现以下报错，这是由于<code>Android</code>系统不允许子线程修改<code>UI</code>界面</p><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220118171011196.png" alt="image-20220118171011196"></p><p>使用<code>Android</code>提供的异步消息处理机制，就可以实现子线程中进行<code>UI</code>操作。在子线程中只实现了发送消息，而消息处理的过程是在主线程中完成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">....<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UPDATE_TEXT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>()&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span>&#123;<span class="hljs-comment">//重写消息处理方法</span><br>            <span class="hljs-keyword">switch</span> (msg.what)&#123;<br>                <span class="hljs-keyword">case</span> UPDATE_TEXT:<br>                    text.setText(<span class="hljs-string">&quot;Nice to meet you&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;;<br>....<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>            <span class="hljs-keyword">case</span> R.id.change_text:<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-comment">//利用消息处理进行子线程对UI修改</span><br>                        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                        message.what = UPDATE_TEXT;<br>                        handler.sendMessage(message);<br>                    &#125;<br>                &#125;).start();<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="异步消息处理机制"><a href="#异步消息处理机制" class="headerlink" title="异步消息处理机制"></a>异步消息处理机制</h2><p><code>Android</code>中的异步消息处理由4部分组成：<code>Message</code>、<code>Handler</code>、<code>MessageQueue</code>、<code>Looper</code>。</p><ul><li><p><code>Message</code>：是线程之间传递的消息，用于在不同线程之间交换数据。</p></li><li><p><code>Handler</code>：是用于发送和处理消息的</p></li><li><p><code>MessageQueue</code>：消息队列，主要用于存放通过<code>Handle</code>发送的消息。这部分消息会一直存在于消息队列中，等待被处理。每个线程都有一个<code>MessageQueue</code>对象</p></li><li><p><code>Looper</code>：管理消息队列，每当发现队列中存在消息就会将消息取出，传递给<code>Handler</code>进行处理，每个线程都有一个<code>Looper</code>对象</p></li></ul><p><img src="https://gitee.com/h0pe-ay/blogimages/raw/master/image-20220118172507399.png" alt="图片来自Android第一行代码"></p><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AsyncTask</span>&lt;Void, Integer, Boolean&gt;<br>&#123;<br>    <span class="hljs-comment">///</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>AsyncTask</code>是一个抽象类，因此想要使用需要创建一个子类去继承它。<code>AsyncTask</code>类指定3个泛型参数</p><ul><li>参数一：<code>Params</code>，在执行<code>AsyncTask</code>时需要传入的参数，用于在后台任务中使用。</li><li>参数二：<code>Progress</code>，后台任务执行时，在界面显示当前的进度</li><li>参数三：<code>Result</code>，任务执行完毕后，如果需要对结果进行返回，则是要该泛型值进行返回。</li></ul><p><code>AsyncTask</code>需要重写的方法</p><ul><li><code>onPreExecute()</code>：该方法在后台任务开始执行前调用，用于界面上的初始化。</li><li><code>doInBackground(Params...)</code>:需要在线程运行的代码需要放在这个方法中，但是不能进行<code>UI</code>处理</li><li><code>onProgressUpdate(Progress...)</code>：这个方法可以对<code>UI</code>进行操作，参数通过<code>publishProgress(Progress...)</code>传递过来</li><li><code>onPostExecute(Result)</code>：后台任务执行完毕并通过<code>return</code>语句返回时会执行该方法</li></ul><h2 id="服务的基本用法"><a href="#服务的基本用法" class="headerlink" title="服务的基本用法"></a>服务的基本用法</h2><p><strong>启动服务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">startIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,MyService.class);<br>startService(startIntent); <span class="hljs-comment">//启动服务</span><br></code></pre></td></tr></table></figure><p><strong>关闭服务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> R.id.stop_service:<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">stopIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,MyService.class);<br>    stopService(stopIntent);<br></code></pre></td></tr></table></figure><h2 id="活动和服务进行通信"><a href="#活动和服务进行通信" class="headerlink" title="活动和服务进行通信"></a>活动和服务进行通信</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-type">DownloadBinder</span> <span class="hljs-variable">mBinder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadBinder</span>(); <span class="hljs-comment">//建立Binder对象</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadBinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Binder</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startDownload</span><span class="hljs-params">()</span>&#123;<br>            Log.d(<span class="hljs-string">&quot;MyService&quot;</span>, <span class="hljs-string">&quot;startDownload: &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getProgress</span><span class="hljs-params">()</span>&#123;<br>            Log.d(<span class="hljs-string">&quot;MyService&quot;</span>, <span class="hljs-string">&quot;getProgress: &quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>...<br>        <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Return the communication channel to the service.</span><br>        <span class="hljs-keyword">return</span> mBinder;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span>  MyService.DownloadBinder downloadBinder;<span class="hljs-comment">//Binder对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ServiceConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceConnection</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceConnected</span><span class="hljs-params">(ComponentName name, IBinder service)</span> &#123;<br>            downloadBinder = (MyService.DownloadBinder)service;<br>            downloadBinder.startDownload();<br>            downloadBinder.getProgress();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceDisconnected</span><span class="hljs-params">(ComponentName name)</span> &#123;<br><br>        &#125;<br>    &#125;;<br>...<br>            <span class="hljs-keyword">case</span> R.id.bind_service:<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">bindIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,MyService.class);<br>                 bindService(bindIntent,connection,BIND_AUTO_CREATE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.unbind_service:<br>                unbindService(connection);<br>                <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><ul><li><code>bindService()</code>方法用于服务与活动建立连接<ul><li>参数一：<code>intent</code>对象</li><li>参数二：<code>Serviceconnect</code>实例</li><li>参数三：<code>BIND_AUTO_CREATE</code>表示在活动和服务进行绑定后自动创建服务</li></ul></li></ul><h2 id="服务的生命周期"><a href="#服务的生命周期" class="headerlink" title="服务的生命周期"></a>服务的生命周期</h2><ul><li><p>服务生命周期内可能回调的方法有<code>onCreate()</code>、<code>onStartCommand()</code>、<code>onBind()</code>、<code>onDestory()</code>。</p></li><li><p>当调用了<code>startService()</code>方法，相应的服务就会被启动且会回调<code>onStartCommand()</code>方法，若服务此前没有被调用则会调用<code>onCreate()</code>方法。<code>stopService()</code>和<code>stopSelf()</code>方法可以停止服务。</p></li><li><p><code>bindService()</code>方法用来获取服务的持久性连接，这时会回调<code>onBind()</code>方法，<code>onBind()</code>方法会返回<code>IBinder</code>对象的实例，使用<code>unbindService()</code>方法用于销毁服务。</p></li><li><p>当服务销毁时会回调<code>onDestory()</code></p></li></ul><h2 id="服务的更多技巧"><a href="#服务的更多技巧" class="headerlink" title="服务的更多技巧"></a>服务的更多技巧</h2><h3 id="前台服务"><a href="#前台服务" class="headerlink" title="前台服务"></a>前台服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,MainActivity.class);<br><span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> PendingIntent.getActivity(<span class="hljs-built_in">this</span>,<span class="hljs-number">0</span>,intent,<span class="hljs-number">0</span>);<br><span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(<span class="hljs-built_in">this</span>)<br>        .setContentTitle(<span class="hljs-string">&quot;This is content title&quot;</span>)<br>        .setContentText(<span class="hljs-string">&quot;This is content Text&quot;</span>)<br>        .setWhen(System.currentTimeMillis())<br>        .setSmallIcon(R.mipmap.ic_launcher)<br>        .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher))<br>        .setContentIntent(pi)<br>        .build();<br>startForeground(<span class="hljs-number">1</span>,notification);<br></code></pre></td></tr></table></figure><ul><li><p><code>PendingIntent</code>是<code>Intent</code>的封装，满足某些条件或触发某些事件后执行指定的行为</p><ul><li>参数一：<code>Context</code>上下文</li><li>参数二：<code>requestCode</code>请求码</li><li>参数三：<code>Intent</code>意图</li><li>参数四：<code>flags</code></li></ul></li><li><p><code>Notification</code>是状态通知栏</p></li></ul><h3 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h3><p>由于服务中的代码都是默认在主线程当中运行，因此需要将处理耗时的逻辑放在子线程中处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>    Log.d(<span class="hljs-string">&quot;MySerivce&quot;</span>,<span class="hljs-string">&quot;onStartCommand: &quot;</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//处理具体的逻辑</span><br>        &#125;<br>    &#125;).start();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>&#125;<br></code></pre></td></tr></table></figure><p>服务一旦启动就会处于运行状态，因此需要在子线程中加上停止服务的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>    Log.d(<span class="hljs-string">&quot;MySerivce&quot;</span>,<span class="hljs-string">&quot;onStartCommand: &quot;</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//处理具体的逻辑</span><br>            stopSelf();<br>        &#125;<br>    &#125;).start();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>&#125;<br></code></pre></td></tr></table></figure><p>防止程序员忘记启动线程或者在子线程中写停止服务的操作，<code>Android</code>提供了<code>IntentService</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIntentService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IntentService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates an IntentService.  Invoked by your subclass&#x27;s constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name Used to name the worker thread, important only for debugging.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyIntentService</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//操作都在子线程中进行</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onHandleIntent</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent intent)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;MyIntentService&quot;</span>, <span class="hljs-string">&quot;Thread id is  : &quot;</span>+Thread.currentThread().getId());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        Log.d(<span class="hljs-string">&quot;MyIntentService&quot;</span>, <span class="hljs-string">&quot;onDestroy: &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="服务的实践"><a href="#服务的实践" class="headerlink" title="服务的实践"></a>服务的实践</h2><h3 id="DownloadListener"><a href="#DownloadListener" class="headerlink" title="DownloadListener"></a>DownloadListener</h3><p><code>DownloadListener</code>接口用于下载操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DownloadListener</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgress</span><span class="hljs-params">(<span class="hljs-type">int</span> progress)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailed</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPaused</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCanceled</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DownloadService"><a href="#DownloadService" class="headerlink" title="DownloadService"></a>DownloadService</h3><p>下载的服务,主要实现了接口的方法，以及活动与服务绑定时返回的<code>Binder</code>对象，以及消息通知栏的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.servicebestpractice;<br><br><span class="hljs-keyword">import</span> android.app.Notification;<br><span class="hljs-keyword">import</span> android.app.NotificationChannel;<br><span class="hljs-keyword">import</span> android.app.NotificationManager;<br><span class="hljs-keyword">import</span> android.app.PendingIntent;<br><span class="hljs-keyword">import</span> android.app.Service;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.graphics.BitmapFactory;<br><span class="hljs-keyword">import</span> android.graphics.Color;<br><span class="hljs-keyword">import</span> android.os.Binder;<br><span class="hljs-keyword">import</span> android.os.Environment;<br><span class="hljs-keyword">import</span> android.os.IBinder;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> androidx.core.app.NotificationCompat;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">private</span> DownloadTask downloadTask;<br><br>    <span class="hljs-keyword">private</span> String downloadUrl;<br>    <span class="hljs-comment">//对下载监听器实例化，并重写方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">DownloadListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadListener</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgress</span><span class="hljs-params">(<span class="hljs-type">int</span> progress)</span> &#123;<br>            getNotificationManager().notify(<span class="hljs-number">1</span>, getNotification(<span class="hljs-string">&quot;Downloading...&quot;</span>, progress));<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">()</span> &#123;<br>            downloadTask = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 下载成功时将前台服务通知关闭，并创建一个下载成功的通知</span><br>            stopForeground(<span class="hljs-literal">true</span>);<br>            getNotificationManager().notify(<span class="hljs-number">1</span>, getNotification(<span class="hljs-string">&quot;Download Success&quot;</span>, -<span class="hljs-number">1</span>));<br>            Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Download Success&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailed</span><span class="hljs-params">()</span> &#123;<br>            downloadTask = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 下载失败时将前台服务通知关闭，并创建一个下载失败的通知</span><br>            stopForeground(<span class="hljs-literal">true</span>);<br>            getNotificationManager().notify(<span class="hljs-number">1</span>, getNotification(<span class="hljs-string">&quot;Download Failed&quot;</span>, -<span class="hljs-number">1</span>));<br>            Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Download Failed&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPaused</span><span class="hljs-params">()</span> &#123;<br>            downloadTask = <span class="hljs-literal">null</span>;<br>            Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Paused&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCanceled</span><span class="hljs-params">()</span> &#123;<br>            downloadTask = <span class="hljs-literal">null</span>;<br>            stopForeground(<span class="hljs-literal">true</span>);<br>            Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Canceled&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br><br>    &#125;;<br>    <span class="hljs-comment">//完成绑定对象的实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">DownloadBinder</span> <span class="hljs-variable">mBinder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadBinder</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-keyword">return</span> mBinder;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadBinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Binder</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startDownload</span><span class="hljs-params">(String url)</span> &#123;<br>            <span class="hljs-comment">//downloadTask用于处理下载任务</span><br>            <span class="hljs-keyword">if</span> (downloadTask == <span class="hljs-literal">null</span>) &#123;<br>                downloadUrl = url;<br>                downloadTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadTask</span>(listener);<br>                <span class="hljs-comment">//将下载地址传入，并启动任务</span><br>                downloadTask.execute(downloadUrl);<br>                <span class="hljs-comment">//消息通知栏</span><br>                startForeground(<span class="hljs-number">1</span>, getNotification(<span class="hljs-string">&quot;Downloading...&quot;</span>, <span class="hljs-number">0</span>));<br>                Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Downloading...&quot;</span>, Toast.LENGTH_SHORT).show();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pauseDownload</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (downloadTask != <span class="hljs-literal">null</span>) &#123;<br>                downloadTask.pauseDownload();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelDownload</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (downloadTask != <span class="hljs-literal">null</span>) &#123;<br>                downloadTask.cancelDownload();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (downloadUrl != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 取消下载时需将文件删除，并将通知关闭</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> downloadUrl.substring(downloadUrl.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>));<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">directory</span> <span class="hljs-operator">=</span> Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();<br>                    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directory + fileName);<br>                    <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>                        file.delete();<br>                    &#125;<br>                    getNotificationManager().cancel(<span class="hljs-number">1</span>);<br>                    stopForeground(<span class="hljs-literal">true</span>);<br>                    Toast.makeText(DownloadService.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Canceled&quot;</span>, Toast.LENGTH_SHORT).show();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> NotificationManager <span class="hljs-title function_">getNotificationManager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Notification <span class="hljs-title function_">getNotification</span><span class="hljs-params">(String title, <span class="hljs-type">int</span> progress)</span> &#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MainActivity.class);<br>        <span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> PendingIntent.getActivity(<span class="hljs-built_in">this</span>, <span class="hljs-number">0</span>, intent, <span class="hljs-number">0</span>);<br>        NotificationCompat.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(<span class="hljs-built_in">this</span>);<br>        builder.setSmallIcon(R.mipmap.ic_launcher);<br>        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));<br>        builder.setContentIntent(pi);<br>        builder.setContentTitle(title);<br>        <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 当progress大于或等于0时才需显示下载进度</span><br>            builder.setContentText(progress + <span class="hljs-string">&quot;%&quot;</span>);<br>            builder.setProgress(<span class="hljs-number">100</span>, progress, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.build();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DownloadTask"><a href="#DownloadTask" class="headerlink" title="DownloadTask"></a>DownloadTask</h3><p>这里利用<code>okhttp</code>对文件进行下载操作，并且由于下载的操作需要耗时，因此放在子线程中运行，但是这里注意修改<code>UI</code>的操作不能再子线程中，因此需要使用<code>publishProgress()</code>方法传递参数实时修改<code>UI</code>效果。采用<code>AsyncTask</code>实现多线程。</p><p><code>AsyncTask</code>执行顺序<code>doInBackground()-&gt;onProgressUpdate()-&gt;onPostExecute()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>   <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">doInBackground</span><span class="hljs-params">(String... params)</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">savedFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">downloadedLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录已下载的文件长度</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">downloadUrl</span> <span class="hljs-operator">=</span> params[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> downloadUrl.substring(downloadUrl.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">directory</span> <span class="hljs-operator">=</span> Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();<br>            file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directory + fileName);<br>            <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>                downloadedLength = file.length();<span class="hljs-comment">//记录已下载文件的长度</span><br>            &#125;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">contentLength</span> <span class="hljs-operator">=</span> getContentLength(downloadUrl);<br>            <span class="hljs-keyword">if</span> (contentLength == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> TYPE_FAILED;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (contentLength == downloadedLength) &#123;<br>                <span class="hljs-comment">// 已下载字节和文件总字节相等，说明已经下载完成了</span><br>                <span class="hljs-keyword">return</span> TYPE_SUCCESS;<br>            &#125;<br>            <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<br>            <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                    <span class="hljs-comment">// 断点下载，指定从哪个字节开始下载</span><br>                    .addHeader(<span class="hljs-string">&quot;RANGE&quot;</span>, <span class="hljs-string">&quot;bytes=&quot;</span> + downloadedLength + <span class="hljs-string">&quot;-&quot;</span>)<br>                    .url(downloadUrl)<br>                    .build();<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.newCall(request).execute();<br>            <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>) &#123;<br>                is = response.body().byteStream();<br>                savedFile = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file, <span class="hljs-string">&quot;rw&quot;</span>);<br>                savedFile.seek(downloadedLength); <span class="hljs-comment">// 跳过已下载的字节</span><br>                <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-type">int</span> len;<br>                <span class="hljs-keyword">while</span> ((len = is.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (isCanceled) &#123;<br>                        <span class="hljs-keyword">return</span> TYPE_CANCELED;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(isPaused) &#123;<br>                        <span class="hljs-keyword">return</span> TYPE_PAUSED;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        total += len;<br>                        savedFile.write(b, <span class="hljs-number">0</span>, len);<br>                        <span class="hljs-comment">// 计算已下载的百分比</span><br>                        <span class="hljs-type">int</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) ((total + downloadedLength) * <span class="hljs-number">100</span> / contentLength);<br>                        publishProgress(progress);<br>                    &#125;<br>                &#125;<br>                response.body().close();<br>                <span class="hljs-keyword">return</span> TYPE_SUCCESS;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123;<br>                    is.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (savedFile != <span class="hljs-literal">null</span>) &#123;<br>                    savedFile.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (isCanceled &amp;&amp; file != <span class="hljs-literal">null</span>) &#123;<br>                    file.delete();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> TYPE_FAILED;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgressUpdate</span><span class="hljs-params">(Integer... values)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> values[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (progress &gt; lastProgress) &#123;<br>            listener.onProgress(progress);<br>            lastProgress = progress;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPostExecute</span><span class="hljs-params">(Integer status)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (status) &#123;<br>            <span class="hljs-keyword">case</span> TYPE_SUCCESS:<br>                listener.onSuccess();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TYPE_FAILED:<br>                listener.onFailed();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TYPE_PAUSED:<br>                listener.onPaused();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TYPE_CANCELED:<br>                listener.onCanceled();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pauseDownload</span><span class="hljs-params">()</span> &#123;<br>        isPaused = <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelDownload</span><span class="hljs-params">()</span> &#123;<br>        isCanceled = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getContentLength</span><span class="hljs-params">(String downloadUrl)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                .url(downloadUrl)<br>                .build();<br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.newCall(request).execute();<br>        <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span> &amp;&amp; response.isSuccessful()) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">contentLength</span> <span class="hljs-operator">=</span> response.body().contentLength();<br>            response.close();<br>            <span class="hljs-keyword">return</span> contentLength;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/07/hello-world/"/>
    <url>/2023/06/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
